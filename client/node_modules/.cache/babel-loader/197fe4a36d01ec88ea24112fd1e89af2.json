{"ast":null,"code":"import { supportsLinearEasing, attachTimeline, isGenerator, isWaapiSupportedEasing } from 'motion-dom';\nimport { millisecondsToSeconds, secondsToMilliseconds, noop } from 'motion-utils';\nimport { anticipate } from '../../easing/anticipate.mjs';\nimport { backInOut } from '../../easing/back.mjs';\nimport { circInOut } from '../../easing/circ.mjs';\nimport { DOMKeyframesResolver } from '../../render/dom/DOMKeyframesResolver.mjs';\nimport { BaseAnimation } from './BaseAnimation.mjs';\nimport { MainThreadAnimation } from './MainThreadAnimation.mjs';\nimport { acceleratedValues } from './utils/accelerated-values.mjs';\nimport { startWaapiAnimation } from './waapi/index.mjs';\nimport { getFinalKeyframe } from './waapi/utils/get-final-keyframe.mjs';\nimport { supportsWaapi } from './waapi/utils/supports-waapi.mjs';\n/**\n * 10ms is chosen here as it strikes a balance between smooth\n * results (more than one keyframe per frame at 60fps) and\n * keyframe quantity.\n */\n\nconst sampleDelta = 10; //ms\n\n/**\n * Implement a practical max duration for keyframe generation\n * to prevent infinite loops\n */\n\nconst maxDuration = 20000;\n/**\n * Check if an animation can run natively via WAAPI or requires pregenerated keyframes.\n * WAAPI doesn't support spring or function easings so we run these as JS animation before\n * handing off.\n */\n\nfunction requiresPregeneratedKeyframes(options) {\n  return isGenerator(options.type) || options.type === \"spring\" || !isWaapiSupportedEasing(options.ease);\n}\n\nfunction pregenerateKeyframes(keyframes, options) {\n  /**\n   * Create a main-thread animation to pregenerate keyframes.\n   * We sample this at regular intervals to generate keyframes that we then\n   * linearly interpolate between.\n   */\n  const sampleAnimation = new MainThreadAnimation({ ...options,\n    keyframes,\n    repeat: 0,\n    delay: 0,\n    isGenerator: true\n  });\n  let state = {\n    done: false,\n    value: keyframes[0]\n  };\n  const pregeneratedKeyframes = [];\n  /**\n   * Bail after 20 seconds of pre-generated keyframes as it's likely\n   * we're heading for an infinite loop.\n   */\n\n  let t = 0;\n\n  while (!state.done && t < maxDuration) {\n    state = sampleAnimation.sample(t);\n    pregeneratedKeyframes.push(state.value);\n    t += sampleDelta;\n  }\n\n  return {\n    times: undefined,\n    keyframes: pregeneratedKeyframes,\n    duration: t - sampleDelta,\n    ease: \"linear\"\n  };\n}\n\nconst unsupportedEasingFunctions = {\n  anticipate,\n  backInOut,\n  circInOut\n};\n\nfunction isUnsupportedEase(key) {\n  return key in unsupportedEasingFunctions;\n}\n\nclass AcceleratedAnimation extends BaseAnimation {\n  constructor(options) {\n    super(options);\n    const {\n      name,\n      motionValue,\n      element,\n      keyframes\n    } = this.options;\n    this.resolver = new DOMKeyframesResolver(keyframes, (resolvedKeyframes, finalKeyframe) => this.onKeyframesResolved(resolvedKeyframes, finalKeyframe), name, motionValue, element);\n    this.resolver.scheduleResolve();\n  }\n\n  initPlayback(keyframes, finalKeyframe) {\n    let {\n      duration = 300,\n      times,\n      ease,\n      type,\n      motionValue,\n      name,\n      startTime\n    } = this.options;\n    /**\n     * If element has since been unmounted, return false to indicate\n     * the animation failed to initialised.\n     */\n\n    if (!motionValue.owner || !motionValue.owner.current) {\n      return false;\n    }\n    /**\n     * If the user has provided an easing function name that isn't supported\n     * by WAAPI (like \"anticipate\"), we need to provide the corressponding\n     * function. This will later get converted to a linear() easing function.\n     */\n\n\n    if (typeof ease === \"string\" && supportsLinearEasing() && isUnsupportedEase(ease)) {\n      ease = unsupportedEasingFunctions[ease];\n    }\n    /**\n     * If this animation needs pre-generated keyframes then generate.\n     */\n\n\n    if (requiresPregeneratedKeyframes(this.options)) {\n      const {\n        onComplete,\n        onUpdate,\n        motionValue,\n        element,\n        ...options\n      } = this.options;\n      const pregeneratedAnimation = pregenerateKeyframes(keyframes, options);\n      keyframes = pregeneratedAnimation.keyframes; // If this is a very short animation, ensure we have\n      // at least two keyframes to animate between as older browsers\n      // can't animate between a single keyframe.\n\n      if (keyframes.length === 1) {\n        keyframes[1] = keyframes[0];\n      }\n\n      duration = pregeneratedAnimation.duration;\n      times = pregeneratedAnimation.times;\n      ease = pregeneratedAnimation.ease;\n      type = \"keyframes\";\n    }\n\n    const animation = startWaapiAnimation(motionValue.owner.current, name, keyframes, { ...this.options,\n      duration,\n      times,\n      ease\n    }); // Override the browser calculated startTime with one synchronised to other JS\n    // and WAAPI animations starting this event loop.\n\n    animation.startTime = startTime !== null && startTime !== void 0 ? startTime : this.calcStartTime();\n\n    if (this.pendingTimeline) {\n      attachTimeline(animation, this.pendingTimeline);\n      this.pendingTimeline = undefined;\n    } else {\n      /**\n       * Prefer the `onfinish` prop as it's more widely supported than\n       * the `finished` promise.\n       *\n       * Here, we synchronously set the provided MotionValue to the end\n       * keyframe. If we didn't, when the WAAPI animation is finished it would\n       * be removed from the element which would then revert to its old styles.\n       */\n      animation.onfinish = () => {\n        const {\n          onComplete\n        } = this.options;\n        motionValue.set(getFinalKeyframe(keyframes, this.options, finalKeyframe));\n        onComplete && onComplete();\n        this.cancel();\n        this.resolveFinishedPromise();\n      };\n    }\n\n    return {\n      animation,\n      duration,\n      times,\n      type,\n      ease,\n      keyframes: keyframes\n    };\n  }\n\n  get duration() {\n    const {\n      resolved\n    } = this;\n    if (!resolved) return 0;\n    const {\n      duration\n    } = resolved;\n    return millisecondsToSeconds(duration);\n  }\n\n  get time() {\n    const {\n      resolved\n    } = this;\n    if (!resolved) return 0;\n    const {\n      animation\n    } = resolved;\n    return millisecondsToSeconds(animation.currentTime || 0);\n  }\n\n  set time(newTime) {\n    const {\n      resolved\n    } = this;\n    if (!resolved) return;\n    const {\n      animation\n    } = resolved;\n    animation.currentTime = secondsToMilliseconds(newTime);\n  }\n\n  get speed() {\n    const {\n      resolved\n    } = this;\n    if (!resolved) return 1;\n    const {\n      animation\n    } = resolved;\n    return animation.playbackRate;\n  }\n\n  set speed(newSpeed) {\n    const {\n      resolved\n    } = this;\n    if (!resolved) return;\n    const {\n      animation\n    } = resolved;\n    animation.playbackRate = newSpeed;\n  }\n\n  get state() {\n    const {\n      resolved\n    } = this;\n    if (!resolved) return \"idle\";\n    const {\n      animation\n    } = resolved;\n    return animation.playState;\n  }\n\n  get startTime() {\n    const {\n      resolved\n    } = this;\n    if (!resolved) return null;\n    const {\n      animation\n    } = resolved; // Coerce to number as TypeScript incorrectly types this\n    // as CSSNumberish\n\n    return animation.startTime;\n  }\n  /**\n   * Replace the default DocumentTimeline with another AnimationTimeline.\n   * Currently used for scroll animations.\n   */\n\n\n  attachTimeline(timeline) {\n    if (!this._resolved) {\n      this.pendingTimeline = timeline;\n    } else {\n      const {\n        resolved\n      } = this;\n      if (!resolved) return noop;\n      const {\n        animation\n      } = resolved;\n      attachTimeline(animation, timeline);\n    }\n\n    return noop;\n  }\n\n  play() {\n    if (this.isStopped) return;\n    const {\n      resolved\n    } = this;\n    if (!resolved) return;\n    const {\n      animation\n    } = resolved;\n\n    if (animation.playState === \"finished\") {\n      this.updateFinishedPromise();\n    }\n\n    animation.play();\n  }\n\n  pause() {\n    const {\n      resolved\n    } = this;\n    if (!resolved) return;\n    const {\n      animation\n    } = resolved;\n    animation.pause();\n  }\n\n  stop() {\n    this.resolver.cancel();\n    this.isStopped = true;\n    if (this.state === \"idle\") return;\n    this.resolveFinishedPromise();\n    this.updateFinishedPromise();\n    const {\n      resolved\n    } = this;\n    if (!resolved) return;\n    const {\n      animation,\n      keyframes,\n      duration,\n      type,\n      ease,\n      times\n    } = resolved;\n\n    if (animation.playState === \"idle\" || animation.playState === \"finished\") {\n      return;\n    }\n    /**\n     * WAAPI doesn't natively have any interruption capabilities.\n     *\n     * Rather than read commited styles back out of the DOM, we can\n     * create a renderless JS animation and sample it twice to calculate\n     * its current value, \"previous\" value, and therefore allow\n     * Motion to calculate velocity for any subsequent animation.\n     */\n\n\n    if (this.time) {\n      const {\n        motionValue,\n        onUpdate,\n        onComplete,\n        element,\n        ...options\n      } = this.options;\n      const sampleAnimation = new MainThreadAnimation({ ...options,\n        keyframes,\n        duration,\n        type,\n        ease,\n        times,\n        isGenerator: true\n      });\n      const sampleTime = secondsToMilliseconds(this.time);\n      motionValue.setWithVelocity(sampleAnimation.sample(sampleTime - sampleDelta).value, sampleAnimation.sample(sampleTime).value, sampleDelta);\n    }\n\n    const {\n      onStop\n    } = this.options;\n    onStop && onStop();\n    this.cancel();\n  }\n\n  complete() {\n    const {\n      resolved\n    } = this;\n    if (!resolved) return;\n    resolved.animation.finish();\n  }\n\n  cancel() {\n    const {\n      resolved\n    } = this;\n    if (!resolved) return;\n    resolved.animation.cancel();\n  }\n\n  static supports(options) {\n    const {\n      motionValue,\n      name,\n      repeatDelay,\n      repeatType,\n      damping,\n      type\n    } = options;\n\n    if (!motionValue || !motionValue.owner || !(motionValue.owner.current instanceof HTMLElement)) {\n      return false;\n    }\n\n    const {\n      onUpdate,\n      transformTemplate\n    } = motionValue.owner.getProps();\n    return supportsWaapi() && name && acceleratedValues.has(name) &&\n    /**\n     * If we're outputting values to onUpdate then we can't use WAAPI as there's\n     * no way to read the value from WAAPI every frame.\n     */\n    !onUpdate && !transformTemplate && !repeatDelay && repeatType !== \"mirror\" && damping !== 0 && type !== \"inertia\";\n  }\n\n}\n\nexport { AcceleratedAnimation };","map":{"version":3,"names":["supportsLinearEasing","attachTimeline","isGenerator","isWaapiSupportedEasing","millisecondsToSeconds","secondsToMilliseconds","noop","anticipate","backInOut","circInOut","DOMKeyframesResolver","BaseAnimation","MainThreadAnimation","acceleratedValues","startWaapiAnimation","getFinalKeyframe","supportsWaapi","sampleDelta","maxDuration","requiresPregeneratedKeyframes","options","type","ease","pregenerateKeyframes","keyframes","sampleAnimation","repeat","delay","state","done","value","pregeneratedKeyframes","t","sample","push","times","undefined","duration","unsupportedEasingFunctions","isUnsupportedEase","key","AcceleratedAnimation","constructor","name","motionValue","element","resolver","resolvedKeyframes","finalKeyframe","onKeyframesResolved","scheduleResolve","initPlayback","startTime","owner","current","onComplete","onUpdate","pregeneratedAnimation","length","animation","calcStartTime","pendingTimeline","onfinish","set","cancel","resolveFinishedPromise","resolved","time","currentTime","newTime","speed","playbackRate","newSpeed","playState","timeline","_resolved","play","isStopped","updateFinishedPromise","pause","stop","sampleTime","setWithVelocity","onStop","complete","finish","supports","repeatDelay","repeatType","damping","HTMLElement","transformTemplate","getProps","has"],"sources":["C:/Users/samih/OneDrive/Desktop/school/website/PERNWebsite/node_modules/framer-motion/dist/es/animation/animators/AcceleratedAnimation.mjs"],"sourcesContent":["import { supportsLinearEasing, attachTimeline, isGenerator, isWaapiSupportedEasing } from 'motion-dom';\nimport { millisecondsToSeconds, secondsToMilliseconds, noop } from 'motion-utils';\nimport { anticipate } from '../../easing/anticipate.mjs';\nimport { backInOut } from '../../easing/back.mjs';\nimport { circInOut } from '../../easing/circ.mjs';\nimport { DOMKeyframesResolver } from '../../render/dom/DOMKeyframesResolver.mjs';\nimport { BaseAnimation } from './BaseAnimation.mjs';\nimport { MainThreadAnimation } from './MainThreadAnimation.mjs';\nimport { acceleratedValues } from './utils/accelerated-values.mjs';\nimport { startWaapiAnimation } from './waapi/index.mjs';\nimport { getFinalKeyframe } from './waapi/utils/get-final-keyframe.mjs';\nimport { supportsWaapi } from './waapi/utils/supports-waapi.mjs';\n\n/**\n * 10ms is chosen here as it strikes a balance between smooth\n * results (more than one keyframe per frame at 60fps) and\n * keyframe quantity.\n */\nconst sampleDelta = 10; //ms\n/**\n * Implement a practical max duration for keyframe generation\n * to prevent infinite loops\n */\nconst maxDuration = 20000;\n/**\n * Check if an animation can run natively via WAAPI or requires pregenerated keyframes.\n * WAAPI doesn't support spring or function easings so we run these as JS animation before\n * handing off.\n */\nfunction requiresPregeneratedKeyframes(options) {\n    return (isGenerator(options.type) ||\n        options.type === \"spring\" ||\n        !isWaapiSupportedEasing(options.ease));\n}\nfunction pregenerateKeyframes(keyframes, options) {\n    /**\n     * Create a main-thread animation to pregenerate keyframes.\n     * We sample this at regular intervals to generate keyframes that we then\n     * linearly interpolate between.\n     */\n    const sampleAnimation = new MainThreadAnimation({\n        ...options,\n        keyframes,\n        repeat: 0,\n        delay: 0,\n        isGenerator: true,\n    });\n    let state = { done: false, value: keyframes[0] };\n    const pregeneratedKeyframes = [];\n    /**\n     * Bail after 20 seconds of pre-generated keyframes as it's likely\n     * we're heading for an infinite loop.\n     */\n    let t = 0;\n    while (!state.done && t < maxDuration) {\n        state = sampleAnimation.sample(t);\n        pregeneratedKeyframes.push(state.value);\n        t += sampleDelta;\n    }\n    return {\n        times: undefined,\n        keyframes: pregeneratedKeyframes,\n        duration: t - sampleDelta,\n        ease: \"linear\",\n    };\n}\nconst unsupportedEasingFunctions = {\n    anticipate,\n    backInOut,\n    circInOut,\n};\nfunction isUnsupportedEase(key) {\n    return key in unsupportedEasingFunctions;\n}\nclass AcceleratedAnimation extends BaseAnimation {\n    constructor(options) {\n        super(options);\n        const { name, motionValue, element, keyframes } = this.options;\n        this.resolver = new DOMKeyframesResolver(keyframes, (resolvedKeyframes, finalKeyframe) => this.onKeyframesResolved(resolvedKeyframes, finalKeyframe), name, motionValue, element);\n        this.resolver.scheduleResolve();\n    }\n    initPlayback(keyframes, finalKeyframe) {\n        let { duration = 300, times, ease, type, motionValue, name, startTime, } = this.options;\n        /**\n         * If element has since been unmounted, return false to indicate\n         * the animation failed to initialised.\n         */\n        if (!motionValue.owner || !motionValue.owner.current) {\n            return false;\n        }\n        /**\n         * If the user has provided an easing function name that isn't supported\n         * by WAAPI (like \"anticipate\"), we need to provide the corressponding\n         * function. This will later get converted to a linear() easing function.\n         */\n        if (typeof ease === \"string\" &&\n            supportsLinearEasing() &&\n            isUnsupportedEase(ease)) {\n            ease = unsupportedEasingFunctions[ease];\n        }\n        /**\n         * If this animation needs pre-generated keyframes then generate.\n         */\n        if (requiresPregeneratedKeyframes(this.options)) {\n            const { onComplete, onUpdate, motionValue, element, ...options } = this.options;\n            const pregeneratedAnimation = pregenerateKeyframes(keyframes, options);\n            keyframes = pregeneratedAnimation.keyframes;\n            // If this is a very short animation, ensure we have\n            // at least two keyframes to animate between as older browsers\n            // can't animate between a single keyframe.\n            if (keyframes.length === 1) {\n                keyframes[1] = keyframes[0];\n            }\n            duration = pregeneratedAnimation.duration;\n            times = pregeneratedAnimation.times;\n            ease = pregeneratedAnimation.ease;\n            type = \"keyframes\";\n        }\n        const animation = startWaapiAnimation(motionValue.owner.current, name, keyframes, { ...this.options, duration, times, ease });\n        // Override the browser calculated startTime with one synchronised to other JS\n        // and WAAPI animations starting this event loop.\n        animation.startTime = startTime !== null && startTime !== void 0 ? startTime : this.calcStartTime();\n        if (this.pendingTimeline) {\n            attachTimeline(animation, this.pendingTimeline);\n            this.pendingTimeline = undefined;\n        }\n        else {\n            /**\n             * Prefer the `onfinish` prop as it's more widely supported than\n             * the `finished` promise.\n             *\n             * Here, we synchronously set the provided MotionValue to the end\n             * keyframe. If we didn't, when the WAAPI animation is finished it would\n             * be removed from the element which would then revert to its old styles.\n             */\n            animation.onfinish = () => {\n                const { onComplete } = this.options;\n                motionValue.set(getFinalKeyframe(keyframes, this.options, finalKeyframe));\n                onComplete && onComplete();\n                this.cancel();\n                this.resolveFinishedPromise();\n            };\n        }\n        return {\n            animation,\n            duration,\n            times,\n            type,\n            ease,\n            keyframes: keyframes,\n        };\n    }\n    get duration() {\n        const { resolved } = this;\n        if (!resolved)\n            return 0;\n        const { duration } = resolved;\n        return millisecondsToSeconds(duration);\n    }\n    get time() {\n        const { resolved } = this;\n        if (!resolved)\n            return 0;\n        const { animation } = resolved;\n        return millisecondsToSeconds(animation.currentTime || 0);\n    }\n    set time(newTime) {\n        const { resolved } = this;\n        if (!resolved)\n            return;\n        const { animation } = resolved;\n        animation.currentTime = secondsToMilliseconds(newTime);\n    }\n    get speed() {\n        const { resolved } = this;\n        if (!resolved)\n            return 1;\n        const { animation } = resolved;\n        return animation.playbackRate;\n    }\n    set speed(newSpeed) {\n        const { resolved } = this;\n        if (!resolved)\n            return;\n        const { animation } = resolved;\n        animation.playbackRate = newSpeed;\n    }\n    get state() {\n        const { resolved } = this;\n        if (!resolved)\n            return \"idle\";\n        const { animation } = resolved;\n        return animation.playState;\n    }\n    get startTime() {\n        const { resolved } = this;\n        if (!resolved)\n            return null;\n        const { animation } = resolved;\n        // Coerce to number as TypeScript incorrectly types this\n        // as CSSNumberish\n        return animation.startTime;\n    }\n    /**\n     * Replace the default DocumentTimeline with another AnimationTimeline.\n     * Currently used for scroll animations.\n     */\n    attachTimeline(timeline) {\n        if (!this._resolved) {\n            this.pendingTimeline = timeline;\n        }\n        else {\n            const { resolved } = this;\n            if (!resolved)\n                return noop;\n            const { animation } = resolved;\n            attachTimeline(animation, timeline);\n        }\n        return noop;\n    }\n    play() {\n        if (this.isStopped)\n            return;\n        const { resolved } = this;\n        if (!resolved)\n            return;\n        const { animation } = resolved;\n        if (animation.playState === \"finished\") {\n            this.updateFinishedPromise();\n        }\n        animation.play();\n    }\n    pause() {\n        const { resolved } = this;\n        if (!resolved)\n            return;\n        const { animation } = resolved;\n        animation.pause();\n    }\n    stop() {\n        this.resolver.cancel();\n        this.isStopped = true;\n        if (this.state === \"idle\")\n            return;\n        this.resolveFinishedPromise();\n        this.updateFinishedPromise();\n        const { resolved } = this;\n        if (!resolved)\n            return;\n        const { animation, keyframes, duration, type, ease, times } = resolved;\n        if (animation.playState === \"idle\" ||\n            animation.playState === \"finished\") {\n            return;\n        }\n        /**\n         * WAAPI doesn't natively have any interruption capabilities.\n         *\n         * Rather than read commited styles back out of the DOM, we can\n         * create a renderless JS animation and sample it twice to calculate\n         * its current value, \"previous\" value, and therefore allow\n         * Motion to calculate velocity for any subsequent animation.\n         */\n        if (this.time) {\n            const { motionValue, onUpdate, onComplete, element, ...options } = this.options;\n            const sampleAnimation = new MainThreadAnimation({\n                ...options,\n                keyframes,\n                duration,\n                type,\n                ease,\n                times,\n                isGenerator: true,\n            });\n            const sampleTime = secondsToMilliseconds(this.time);\n            motionValue.setWithVelocity(sampleAnimation.sample(sampleTime - sampleDelta).value, sampleAnimation.sample(sampleTime).value, sampleDelta);\n        }\n        const { onStop } = this.options;\n        onStop && onStop();\n        this.cancel();\n    }\n    complete() {\n        const { resolved } = this;\n        if (!resolved)\n            return;\n        resolved.animation.finish();\n    }\n    cancel() {\n        const { resolved } = this;\n        if (!resolved)\n            return;\n        resolved.animation.cancel();\n    }\n    static supports(options) {\n        const { motionValue, name, repeatDelay, repeatType, damping, type } = options;\n        if (!motionValue ||\n            !motionValue.owner ||\n            !(motionValue.owner.current instanceof HTMLElement)) {\n            return false;\n        }\n        const { onUpdate, transformTemplate } = motionValue.owner.getProps();\n        return (supportsWaapi() &&\n            name &&\n            acceleratedValues.has(name) &&\n            /**\n             * If we're outputting values to onUpdate then we can't use WAAPI as there's\n             * no way to read the value from WAAPI every frame.\n             */\n            !onUpdate &&\n            !transformTemplate &&\n            !repeatDelay &&\n            repeatType !== \"mirror\" &&\n            damping !== 0 &&\n            type !== \"inertia\");\n    }\n}\n\nexport { AcceleratedAnimation };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}