{"ast":null,"code":"import { useContext, useRef, useInsertionEffect } from 'react';\nimport { animateValue } from '../animation/animators/MainThreadAnimation.mjs';\nimport { MotionConfigContext } from '../context/MotionConfigContext.mjs';\nimport { useIsomorphicLayoutEffect } from '../utils/use-isomorphic-effect.mjs';\nimport { useMotionValue } from './use-motion-value.mjs';\nimport { isMotionValue } from './utils/is-motion-value.mjs';\nimport { frame } from '../frameloop/frame.mjs';\n\nfunction toNumber(v) {\n  if (typeof v === \"number\") return v;\n  return parseFloat(v);\n}\n/**\n * Creates a `MotionValue` that, when `set`, will use a spring animation to animate to its new state.\n *\n * It can either work as a stand-alone `MotionValue` by initialising it with a value, or as a subscriber\n * to another `MotionValue`.\n *\n * @remarks\n *\n * ```jsx\n * const x = useSpring(0, { stiffness: 300 })\n * const y = useSpring(x, { damping: 10 })\n * ```\n *\n * @param inputValue - `MotionValue` or number. If provided a `MotionValue`, when the input `MotionValue` changes, the created `MotionValue` will spring towards that value.\n * @param springConfig - Configuration options for the spring.\n * @returns `MotionValue`\n *\n * @public\n */\n\n\nfunction useSpring(source) {\n  let config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const {\n    isStatic\n  } = useContext(MotionConfigContext);\n  const activeSpringAnimation = useRef(null);\n  const value = useMotionValue(isMotionValue(source) ? toNumber(source.get()) : source);\n  const latestValue = useRef(value.get());\n  const latestSetter = useRef(() => {});\n\n  const startAnimation = () => {\n    stopAnimation();\n    activeSpringAnimation.current = animateValue({\n      keyframes: [value.get(), latestValue.current],\n      velocity: value.getVelocity(),\n      type: \"spring\",\n      restDelta: 0.001,\n      restSpeed: 0.01,\n      ...config,\n      onUpdate: latestSetter.current\n    });\n  };\n\n  const stopAnimation = () => {\n    if (activeSpringAnimation.current) {\n      activeSpringAnimation.current.stop();\n    }\n  };\n\n  useInsertionEffect(() => {\n    return value.attach((v, set) => {\n      /**\n       * A more hollistic approach to this might be to use isStatic to fix VisualElement animations\n       * at that level, but this will work for now\n       */\n      if (isStatic) return set(v);\n      latestValue.current = v;\n      latestSetter.current = set;\n      frame.postRender(startAnimation);\n      return value.get();\n    }, stopAnimation);\n  }, [JSON.stringify(config)]);\n  useIsomorphicLayoutEffect(() => {\n    if (isMotionValue(source)) {\n      return source.on(\"change\", v => value.set(toNumber(v)));\n    }\n  }, [value]);\n  return value;\n}\n\nexport { useSpring };","map":{"version":3,"names":["useContext","useRef","useInsertionEffect","animateValue","MotionConfigContext","useIsomorphicLayoutEffect","useMotionValue","isMotionValue","frame","toNumber","v","parseFloat","useSpring","source","config","isStatic","activeSpringAnimation","value","get","latestValue","latestSetter","startAnimation","stopAnimation","current","keyframes","velocity","getVelocity","type","restDelta","restSpeed","onUpdate","stop","attach","set","postRender","JSON","stringify","on"],"sources":["C:/Users/samih/OneDrive/Desktop/school/website/PERNWebsite/node_modules/framer-motion/dist/es/value/use-spring.mjs"],"sourcesContent":["import { useContext, useRef, useInsertionEffect } from 'react';\nimport { animateValue } from '../animation/animators/MainThreadAnimation.mjs';\nimport { MotionConfigContext } from '../context/MotionConfigContext.mjs';\nimport { useIsomorphicLayoutEffect } from '../utils/use-isomorphic-effect.mjs';\nimport { useMotionValue } from './use-motion-value.mjs';\nimport { isMotionValue } from './utils/is-motion-value.mjs';\nimport { frame } from '../frameloop/frame.mjs';\n\nfunction toNumber(v) {\n    if (typeof v === \"number\")\n        return v;\n    return parseFloat(v);\n}\n/**\n * Creates a `MotionValue` that, when `set`, will use a spring animation to animate to its new state.\n *\n * It can either work as a stand-alone `MotionValue` by initialising it with a value, or as a subscriber\n * to another `MotionValue`.\n *\n * @remarks\n *\n * ```jsx\n * const x = useSpring(0, { stiffness: 300 })\n * const y = useSpring(x, { damping: 10 })\n * ```\n *\n * @param inputValue - `MotionValue` or number. If provided a `MotionValue`, when the input `MotionValue` changes, the created `MotionValue` will spring towards that value.\n * @param springConfig - Configuration options for the spring.\n * @returns `MotionValue`\n *\n * @public\n */\nfunction useSpring(source, config = {}) {\n    const { isStatic } = useContext(MotionConfigContext);\n    const activeSpringAnimation = useRef(null);\n    const value = useMotionValue(isMotionValue(source) ? toNumber(source.get()) : source);\n    const latestValue = useRef(value.get());\n    const latestSetter = useRef(() => { });\n    const startAnimation = () => {\n        stopAnimation();\n        activeSpringAnimation.current = animateValue({\n            keyframes: [value.get(), latestValue.current],\n            velocity: value.getVelocity(),\n            type: \"spring\",\n            restDelta: 0.001,\n            restSpeed: 0.01,\n            ...config,\n            onUpdate: latestSetter.current,\n        });\n    };\n    const stopAnimation = () => {\n        if (activeSpringAnimation.current) {\n            activeSpringAnimation.current.stop();\n        }\n    };\n    useInsertionEffect(() => {\n        return value.attach((v, set) => {\n            /**\n             * A more hollistic approach to this might be to use isStatic to fix VisualElement animations\n             * at that level, but this will work for now\n             */\n            if (isStatic)\n                return set(v);\n            latestValue.current = v;\n            latestSetter.current = set;\n            frame.postRender(startAnimation);\n            return value.get();\n        }, stopAnimation);\n    }, [JSON.stringify(config)]);\n    useIsomorphicLayoutEffect(() => {\n        if (isMotionValue(source)) {\n            return source.on(\"change\", (v) => value.set(toNumber(v)));\n        }\n    }, [value]);\n    return value;\n}\n\nexport { useSpring };\n"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,MAArB,EAA6BC,kBAA7B,QAAuD,OAAvD;AACA,SAASC,YAAT,QAA6B,gDAA7B;AACA,SAASC,mBAAT,QAAoC,oCAApC;AACA,SAASC,yBAAT,QAA0C,oCAA1C;AACA,SAASC,cAAT,QAA+B,wBAA/B;AACA,SAASC,aAAT,QAA8B,6BAA9B;AACA,SAASC,KAAT,QAAsB,wBAAtB;;AAEA,SAASC,QAAT,CAAkBC,CAAlB,EAAqB;EACjB,IAAI,OAAOA,CAAP,KAAa,QAAjB,EACI,OAAOA,CAAP;EACJ,OAAOC,UAAU,CAACD,CAAD,CAAjB;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASE,SAAT,CAAmBC,MAAnB,EAAwC;EAAA,IAAbC,MAAa,uEAAJ,EAAI;EACpC,MAAM;IAAEC;EAAF,IAAef,UAAU,CAACI,mBAAD,CAA/B;EACA,MAAMY,qBAAqB,GAAGf,MAAM,CAAC,IAAD,CAApC;EACA,MAAMgB,KAAK,GAAGX,cAAc,CAACC,aAAa,CAACM,MAAD,CAAb,GAAwBJ,QAAQ,CAACI,MAAM,CAACK,GAAP,EAAD,CAAhC,GAAiDL,MAAlD,CAA5B;EACA,MAAMM,WAAW,GAAGlB,MAAM,CAACgB,KAAK,CAACC,GAAN,EAAD,CAA1B;EACA,MAAME,YAAY,GAAGnB,MAAM,CAAC,MAAM,CAAG,CAAV,CAA3B;;EACA,MAAMoB,cAAc,GAAG,MAAM;IACzBC,aAAa;IACbN,qBAAqB,CAACO,OAAtB,GAAgCpB,YAAY,CAAC;MACzCqB,SAAS,EAAE,CAACP,KAAK,CAACC,GAAN,EAAD,EAAcC,WAAW,CAACI,OAA1B,CAD8B;MAEzCE,QAAQ,EAAER,KAAK,CAACS,WAAN,EAF+B;MAGzCC,IAAI,EAAE,QAHmC;MAIzCC,SAAS,EAAE,KAJ8B;MAKzCC,SAAS,EAAE,IAL8B;MAMzC,GAAGf,MANsC;MAOzCgB,QAAQ,EAAEV,YAAY,CAACG;IAPkB,CAAD,CAA5C;EASH,CAXD;;EAYA,MAAMD,aAAa,GAAG,MAAM;IACxB,IAAIN,qBAAqB,CAACO,OAA1B,EAAmC;MAC/BP,qBAAqB,CAACO,OAAtB,CAA8BQ,IAA9B;IACH;EACJ,CAJD;;EAKA7B,kBAAkB,CAAC,MAAM;IACrB,OAAOe,KAAK,CAACe,MAAN,CAAa,CAACtB,CAAD,EAAIuB,GAAJ,KAAY;MAC5B;AACZ;AACA;AACA;MACY,IAAIlB,QAAJ,EACI,OAAOkB,GAAG,CAACvB,CAAD,CAAV;MACJS,WAAW,CAACI,OAAZ,GAAsBb,CAAtB;MACAU,YAAY,CAACG,OAAb,GAAuBU,GAAvB;MACAzB,KAAK,CAAC0B,UAAN,CAAiBb,cAAjB;MACA,OAAOJ,KAAK,CAACC,GAAN,EAAP;IACH,CAXM,EAWJI,aAXI,CAAP;EAYH,CAbiB,EAaf,CAACa,IAAI,CAACC,SAAL,CAAetB,MAAf,CAAD,CAbe,CAAlB;EAcAT,yBAAyB,CAAC,MAAM;IAC5B,IAAIE,aAAa,CAACM,MAAD,CAAjB,EAA2B;MACvB,OAAOA,MAAM,CAACwB,EAAP,CAAU,QAAV,EAAqB3B,CAAD,IAAOO,KAAK,CAACgB,GAAN,CAAUxB,QAAQ,CAACC,CAAD,CAAlB,CAA3B,CAAP;IACH;EACJ,CAJwB,EAItB,CAACO,KAAD,CAJsB,CAAzB;EAKA,OAAOA,KAAP;AACH;;AAED,SAASL,SAAT"},"metadata":{},"sourceType":"module"}