{"ast":null,"code":"import { MotionGlobalConfig } from '../utils/GlobalConfig.mjs';\nimport { createRenderStep } from './render-step.mjs';\nconst stepsOrder = [\"read\", // Read\n\"resolveKeyframes\", // Write/Read/Write/Read\n\"update\", // Compute\n\"preRender\", // Compute\n\"render\", // Write\n\"postRender\" // Compute\n];\nconst maxElapsed = 40;\n\nfunction createRenderBatcher(scheduleNextBatch, allowKeepAlive) {\n  let runNextFrame = false;\n  let useDefaultElapsed = true;\n  const state = {\n    delta: 0.0,\n    timestamp: 0.0,\n    isProcessing: false\n  };\n\n  const flagRunNextFrame = () => runNextFrame = true;\n\n  const steps = stepsOrder.reduce((acc, key) => {\n    acc[key] = createRenderStep(flagRunNextFrame);\n    return acc;\n  }, {});\n  const {\n    read,\n    resolveKeyframes,\n    update,\n    preRender,\n    render,\n    postRender\n  } = steps;\n\n  const processBatch = () => {\n    const timestamp = MotionGlobalConfig.useManualTiming ? state.timestamp : performance.now();\n    runNextFrame = false;\n    state.delta = useDefaultElapsed ? 1000 / 60 : Math.max(Math.min(timestamp - state.timestamp, maxElapsed), 1);\n    state.timestamp = timestamp;\n    state.isProcessing = true; // Unrolled render loop for better per-frame performance\n\n    read.process(state);\n    resolveKeyframes.process(state);\n    update.process(state);\n    preRender.process(state);\n    render.process(state);\n    postRender.process(state);\n    state.isProcessing = false;\n\n    if (runNextFrame && allowKeepAlive) {\n      useDefaultElapsed = false;\n      scheduleNextBatch(processBatch);\n    }\n  };\n\n  const wake = () => {\n    runNextFrame = true;\n    useDefaultElapsed = true;\n\n    if (!state.isProcessing) {\n      scheduleNextBatch(processBatch);\n    }\n  };\n\n  const schedule = stepsOrder.reduce((acc, key) => {\n    const step = steps[key];\n\n    acc[key] = function (process) {\n      let keepAlive = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      let immediate = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      if (!runNextFrame) wake();\n      return step.schedule(process, keepAlive, immediate);\n    };\n\n    return acc;\n  }, {});\n\n  const cancel = process => {\n    for (let i = 0; i < stepsOrder.length; i++) {\n      steps[stepsOrder[i]].cancel(process);\n    }\n  };\n\n  return {\n    schedule,\n    cancel,\n    state,\n    steps\n  };\n}\n\nexport { createRenderBatcher, stepsOrder };","map":{"version":3,"names":["MotionGlobalConfig","createRenderStep","stepsOrder","maxElapsed","createRenderBatcher","scheduleNextBatch","allowKeepAlive","runNextFrame","useDefaultElapsed","state","delta","timestamp","isProcessing","flagRunNextFrame","steps","reduce","acc","key","read","resolveKeyframes","update","preRender","render","postRender","processBatch","useManualTiming","performance","now","Math","max","min","process","wake","schedule","step","keepAlive","immediate","cancel","i","length"],"sources":["C:/Users/samih/OneDrive/Desktop/school/website/PERNWebsite/node_modules/framer-motion/dist/es/frameloop/batcher.mjs"],"sourcesContent":["import { MotionGlobalConfig } from '../utils/GlobalConfig.mjs';\nimport { createRenderStep } from './render-step.mjs';\n\nconst stepsOrder = [\n    \"read\", // Read\n    \"resolveKeyframes\", // Write/Read/Write/Read\n    \"update\", // Compute\n    \"preRender\", // Compute\n    \"render\", // Write\n    \"postRender\", // Compute\n];\nconst maxElapsed = 40;\nfunction createRenderBatcher(scheduleNextBatch, allowKeepAlive) {\n    let runNextFrame = false;\n    let useDefaultElapsed = true;\n    const state = {\n        delta: 0.0,\n        timestamp: 0.0,\n        isProcessing: false,\n    };\n    const flagRunNextFrame = () => (runNextFrame = true);\n    const steps = stepsOrder.reduce((acc, key) => {\n        acc[key] = createRenderStep(flagRunNextFrame);\n        return acc;\n    }, {});\n    const { read, resolveKeyframes, update, preRender, render, postRender } = steps;\n    const processBatch = () => {\n        const timestamp = MotionGlobalConfig.useManualTiming\n            ? state.timestamp\n            : performance.now();\n        runNextFrame = false;\n        state.delta = useDefaultElapsed\n            ? 1000 / 60\n            : Math.max(Math.min(timestamp - state.timestamp, maxElapsed), 1);\n        state.timestamp = timestamp;\n        state.isProcessing = true;\n        // Unrolled render loop for better per-frame performance\n        read.process(state);\n        resolveKeyframes.process(state);\n        update.process(state);\n        preRender.process(state);\n        render.process(state);\n        postRender.process(state);\n        state.isProcessing = false;\n        if (runNextFrame && allowKeepAlive) {\n            useDefaultElapsed = false;\n            scheduleNextBatch(processBatch);\n        }\n    };\n    const wake = () => {\n        runNextFrame = true;\n        useDefaultElapsed = true;\n        if (!state.isProcessing) {\n            scheduleNextBatch(processBatch);\n        }\n    };\n    const schedule = stepsOrder.reduce((acc, key) => {\n        const step = steps[key];\n        acc[key] = (process, keepAlive = false, immediate = false) => {\n            if (!runNextFrame)\n                wake();\n            return step.schedule(process, keepAlive, immediate);\n        };\n        return acc;\n    }, {});\n    const cancel = (process) => {\n        for (let i = 0; i < stepsOrder.length; i++) {\n            steps[stepsOrder[i]].cancel(process);\n        }\n    };\n    return { schedule, cancel, state, steps };\n}\n\nexport { createRenderBatcher, stepsOrder };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}