{"ast":null,"code":"import { mixNumber } from '../../utils/mix/number.mjs';\nimport { hasTransform } from '../utils/has-transform.mjs';\n/**\n * Scales a point based on a factor and an originPoint\n */\n\nfunction scalePoint(point, scale, originPoint) {\n  const distanceFromOrigin = point - originPoint;\n  const scaled = scale * distanceFromOrigin;\n  return originPoint + scaled;\n}\n/**\n * Applies a translate/scale delta to a point\n */\n\n\nfunction applyPointDelta(point, translate, scale, originPoint, boxScale) {\n  if (boxScale !== undefined) {\n    point = scalePoint(point, boxScale, originPoint);\n  }\n\n  return scalePoint(point, scale, originPoint) + translate;\n}\n/**\n * Applies a translate/scale delta to an axis\n */\n\n\nfunction applyAxisDelta(axis) {\n  let translate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  let scale = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n  let originPoint = arguments.length > 3 ? arguments[3] : undefined;\n  let boxScale = arguments.length > 4 ? arguments[4] : undefined;\n  axis.min = applyPointDelta(axis.min, translate, scale, originPoint, boxScale);\n  axis.max = applyPointDelta(axis.max, translate, scale, originPoint, boxScale);\n}\n/**\n * Applies a translate/scale delta to a box\n */\n\n\nfunction applyBoxDelta(box, _ref) {\n  let {\n    x,\n    y\n  } = _ref;\n  applyAxisDelta(box.x, x.translate, x.scale, x.originPoint);\n  applyAxisDelta(box.y, y.translate, y.scale, y.originPoint);\n}\n\nconst TREE_SCALE_SNAP_MIN = 0.999999999999;\nconst TREE_SCALE_SNAP_MAX = 1.0000000000001;\n/**\n * Apply a tree of deltas to a box. We do this to calculate the effect of all the transforms\n * in a tree upon our box before then calculating how to project it into our desired viewport-relative box\n *\n * This is the final nested loop within updateLayoutDelta for future refactoring\n */\n\nfunction applyTreeDeltas(box, treeScale, treePath) {\n  let isSharedTransition = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n  const treeLength = treePath.length;\n  if (!treeLength) return; // Reset the treeScale\n\n  treeScale.x = treeScale.y = 1;\n  let node;\n  let delta;\n\n  for (let i = 0; i < treeLength; i++) {\n    node = treePath[i];\n    delta = node.projectionDelta;\n    /**\n     * TODO: Prefer to remove this, but currently we have motion components with\n     * display: contents in Framer.\n     */\n\n    const {\n      visualElement\n    } = node.options;\n\n    if (visualElement && visualElement.props.style && visualElement.props.style.display === \"contents\") {\n      continue;\n    }\n\n    if (isSharedTransition && node.options.layoutScroll && node.scroll && node !== node.root) {\n      transformBox(box, {\n        x: -node.scroll.offset.x,\n        y: -node.scroll.offset.y\n      });\n    }\n\n    if (delta) {\n      // Incoporate each ancestor's scale into a culmulative treeScale for this component\n      treeScale.x *= delta.x.scale;\n      treeScale.y *= delta.y.scale; // Apply each ancestor's calculated delta into this component's recorded layout box\n\n      applyBoxDelta(box, delta);\n    }\n\n    if (isSharedTransition && hasTransform(node.latestValues)) {\n      transformBox(box, node.latestValues);\n    }\n  }\n  /**\n   * Snap tree scale back to 1 if it's within a non-perceivable threshold.\n   * This will help reduce useless scales getting rendered.\n   */\n\n\n  if (treeScale.x < TREE_SCALE_SNAP_MAX && treeScale.x > TREE_SCALE_SNAP_MIN) {\n    treeScale.x = 1.0;\n  }\n\n  if (treeScale.y < TREE_SCALE_SNAP_MAX && treeScale.y > TREE_SCALE_SNAP_MIN) {\n    treeScale.y = 1.0;\n  }\n}\n\nfunction translateAxis(axis, distance) {\n  axis.min = axis.min + distance;\n  axis.max = axis.max + distance;\n}\n/**\n * Apply a transform to an axis from the latest resolved motion values.\n * This function basically acts as a bridge between a flat motion value map\n * and applyAxisDelta\n */\n\n\nfunction transformAxis(axis, axisTranslate, axisScale, boxScale) {\n  let axisOrigin = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0.5;\n  const originPoint = mixNumber(axis.min, axis.max, axisOrigin); // Apply the axis delta to the final axis\n\n  applyAxisDelta(axis, axisTranslate, axisScale, originPoint, boxScale);\n}\n/**\n * Apply a transform to a box from the latest resolved motion values.\n */\n\n\nfunction transformBox(box, transform) {\n  transformAxis(box.x, transform.x, transform.scaleX, transform.scale, transform.originX);\n  transformAxis(box.y, transform.y, transform.scaleY, transform.scale, transform.originY);\n}\n\nexport { applyAxisDelta, applyBoxDelta, applyPointDelta, applyTreeDeltas, scalePoint, transformAxis, transformBox, translateAxis };","map":{"version":3,"names":["mixNumber","hasTransform","scalePoint","point","scale","originPoint","distanceFromOrigin","scaled","applyPointDelta","translate","boxScale","undefined","applyAxisDelta","axis","min","max","applyBoxDelta","box","x","y","TREE_SCALE_SNAP_MIN","TREE_SCALE_SNAP_MAX","applyTreeDeltas","treeScale","treePath","isSharedTransition","treeLength","length","node","delta","i","projectionDelta","visualElement","options","props","style","display","layoutScroll","scroll","root","transformBox","offset","latestValues","translateAxis","distance","transformAxis","axisTranslate","axisScale","axisOrigin","transform","scaleX","originX","scaleY","originY"],"sources":["C:/Users/samih/OneDrive/Desktop/school/website/PERNWebsite/node_modules/framer-motion/dist/es/projection/geometry/delta-apply.mjs"],"sourcesContent":["import { mixNumber } from '../../utils/mix/number.mjs';\nimport { hasTransform } from '../utils/has-transform.mjs';\n\n/**\n * Scales a point based on a factor and an originPoint\n */\nfunction scalePoint(point, scale, originPoint) {\n    const distanceFromOrigin = point - originPoint;\n    const scaled = scale * distanceFromOrigin;\n    return originPoint + scaled;\n}\n/**\n * Applies a translate/scale delta to a point\n */\nfunction applyPointDelta(point, translate, scale, originPoint, boxScale) {\n    if (boxScale !== undefined) {\n        point = scalePoint(point, boxScale, originPoint);\n    }\n    return scalePoint(point, scale, originPoint) + translate;\n}\n/**\n * Applies a translate/scale delta to an axis\n */\nfunction applyAxisDelta(axis, translate = 0, scale = 1, originPoint, boxScale) {\n    axis.min = applyPointDelta(axis.min, translate, scale, originPoint, boxScale);\n    axis.max = applyPointDelta(axis.max, translate, scale, originPoint, boxScale);\n}\n/**\n * Applies a translate/scale delta to a box\n */\nfunction applyBoxDelta(box, { x, y }) {\n    applyAxisDelta(box.x, x.translate, x.scale, x.originPoint);\n    applyAxisDelta(box.y, y.translate, y.scale, y.originPoint);\n}\nconst TREE_SCALE_SNAP_MIN = 0.999999999999;\nconst TREE_SCALE_SNAP_MAX = 1.0000000000001;\n/**\n * Apply a tree of deltas to a box. We do this to calculate the effect of all the transforms\n * in a tree upon our box before then calculating how to project it into our desired viewport-relative box\n *\n * This is the final nested loop within updateLayoutDelta for future refactoring\n */\nfunction applyTreeDeltas(box, treeScale, treePath, isSharedTransition = false) {\n    const treeLength = treePath.length;\n    if (!treeLength)\n        return;\n    // Reset the treeScale\n    treeScale.x = treeScale.y = 1;\n    let node;\n    let delta;\n    for (let i = 0; i < treeLength; i++) {\n        node = treePath[i];\n        delta = node.projectionDelta;\n        /**\n         * TODO: Prefer to remove this, but currently we have motion components with\n         * display: contents in Framer.\n         */\n        const { visualElement } = node.options;\n        if (visualElement &&\n            visualElement.props.style &&\n            visualElement.props.style.display === \"contents\") {\n            continue;\n        }\n        if (isSharedTransition &&\n            node.options.layoutScroll &&\n            node.scroll &&\n            node !== node.root) {\n            transformBox(box, {\n                x: -node.scroll.offset.x,\n                y: -node.scroll.offset.y,\n            });\n        }\n        if (delta) {\n            // Incoporate each ancestor's scale into a culmulative treeScale for this component\n            treeScale.x *= delta.x.scale;\n            treeScale.y *= delta.y.scale;\n            // Apply each ancestor's calculated delta into this component's recorded layout box\n            applyBoxDelta(box, delta);\n        }\n        if (isSharedTransition && hasTransform(node.latestValues)) {\n            transformBox(box, node.latestValues);\n        }\n    }\n    /**\n     * Snap tree scale back to 1 if it's within a non-perceivable threshold.\n     * This will help reduce useless scales getting rendered.\n     */\n    if (treeScale.x < TREE_SCALE_SNAP_MAX &&\n        treeScale.x > TREE_SCALE_SNAP_MIN) {\n        treeScale.x = 1.0;\n    }\n    if (treeScale.y < TREE_SCALE_SNAP_MAX &&\n        treeScale.y > TREE_SCALE_SNAP_MIN) {\n        treeScale.y = 1.0;\n    }\n}\nfunction translateAxis(axis, distance) {\n    axis.min = axis.min + distance;\n    axis.max = axis.max + distance;\n}\n/**\n * Apply a transform to an axis from the latest resolved motion values.\n * This function basically acts as a bridge between a flat motion value map\n * and applyAxisDelta\n */\nfunction transformAxis(axis, axisTranslate, axisScale, boxScale, axisOrigin = 0.5) {\n    const originPoint = mixNumber(axis.min, axis.max, axisOrigin);\n    // Apply the axis delta to the final axis\n    applyAxisDelta(axis, axisTranslate, axisScale, originPoint, boxScale);\n}\n/**\n * Apply a transform to a box from the latest resolved motion values.\n */\nfunction transformBox(box, transform) {\n    transformAxis(box.x, transform.x, transform.scaleX, transform.scale, transform.originX);\n    transformAxis(box.y, transform.y, transform.scaleY, transform.scale, transform.originY);\n}\n\nexport { applyAxisDelta, applyBoxDelta, applyPointDelta, applyTreeDeltas, scalePoint, transformAxis, transformBox, translateAxis };\n"],"mappings":"AAAA,SAASA,SAAT,QAA0B,4BAA1B;AACA,SAASC,YAAT,QAA6B,4BAA7B;AAEA;AACA;AACA;;AACA,SAASC,UAAT,CAAoBC,KAApB,EAA2BC,KAA3B,EAAkCC,WAAlC,EAA+C;EAC3C,MAAMC,kBAAkB,GAAGH,KAAK,GAAGE,WAAnC;EACA,MAAME,MAAM,GAAGH,KAAK,GAAGE,kBAAvB;EACA,OAAOD,WAAW,GAAGE,MAArB;AACH;AACD;AACA;AACA;;;AACA,SAASC,eAAT,CAAyBL,KAAzB,EAAgCM,SAAhC,EAA2CL,KAA3C,EAAkDC,WAAlD,EAA+DK,QAA/D,EAAyE;EACrE,IAAIA,QAAQ,KAAKC,SAAjB,EAA4B;IACxBR,KAAK,GAAGD,UAAU,CAACC,KAAD,EAAQO,QAAR,EAAkBL,WAAlB,CAAlB;EACH;;EACD,OAAOH,UAAU,CAACC,KAAD,EAAQC,KAAR,EAAeC,WAAf,CAAV,GAAwCI,SAA/C;AACH;AACD;AACA;AACA;;;AACA,SAASG,cAAT,CAAwBC,IAAxB,EAA+E;EAAA,IAAjDJ,SAAiD,uEAArC,CAAqC;EAAA,IAAlCL,KAAkC,uEAA1B,CAA0B;EAAA,IAAvBC,WAAuB;EAAA,IAAVK,QAAU;EAC3EG,IAAI,CAACC,GAAL,GAAWN,eAAe,CAACK,IAAI,CAACC,GAAN,EAAWL,SAAX,EAAsBL,KAAtB,EAA6BC,WAA7B,EAA0CK,QAA1C,CAA1B;EACAG,IAAI,CAACE,GAAL,GAAWP,eAAe,CAACK,IAAI,CAACE,GAAN,EAAWN,SAAX,EAAsBL,KAAtB,EAA6BC,WAA7B,EAA0CK,QAA1C,CAA1B;AACH;AACD;AACA;AACA;;;AACA,SAASM,aAAT,CAAuBC,GAAvB,QAAsC;EAAA,IAAV;IAAEC,CAAF;IAAKC;EAAL,CAAU;EAClCP,cAAc,CAACK,GAAG,CAACC,CAAL,EAAQA,CAAC,CAACT,SAAV,EAAqBS,CAAC,CAACd,KAAvB,EAA8Bc,CAAC,CAACb,WAAhC,CAAd;EACAO,cAAc,CAACK,GAAG,CAACE,CAAL,EAAQA,CAAC,CAACV,SAAV,EAAqBU,CAAC,CAACf,KAAvB,EAA8Be,CAAC,CAACd,WAAhC,CAAd;AACH;;AACD,MAAMe,mBAAmB,GAAG,cAA5B;AACA,MAAMC,mBAAmB,GAAG,eAA5B;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,eAAT,CAAyBL,GAAzB,EAA8BM,SAA9B,EAAyCC,QAAzC,EAA+E;EAAA,IAA5BC,kBAA4B,uEAAP,KAAO;EAC3E,MAAMC,UAAU,GAAGF,QAAQ,CAACG,MAA5B;EACA,IAAI,CAACD,UAAL,EACI,OAHuE,CAI3E;;EACAH,SAAS,CAACL,CAAV,GAAcK,SAAS,CAACJ,CAAV,GAAc,CAA5B;EACA,IAAIS,IAAJ;EACA,IAAIC,KAAJ;;EACA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,UAApB,EAAgCI,CAAC,EAAjC,EAAqC;IACjCF,IAAI,GAAGJ,QAAQ,CAACM,CAAD,CAAf;IACAD,KAAK,GAAGD,IAAI,CAACG,eAAb;IACA;AACR;AACA;AACA;;IACQ,MAAM;MAAEC;IAAF,IAAoBJ,IAAI,CAACK,OAA/B;;IACA,IAAID,aAAa,IACbA,aAAa,CAACE,KAAd,CAAoBC,KADpB,IAEAH,aAAa,CAACE,KAAd,CAAoBC,KAApB,CAA0BC,OAA1B,KAAsC,UAF1C,EAEsD;MAClD;IACH;;IACD,IAAIX,kBAAkB,IAClBG,IAAI,CAACK,OAAL,CAAaI,YADb,IAEAT,IAAI,CAACU,MAFL,IAGAV,IAAI,KAAKA,IAAI,CAACW,IAHlB,EAGwB;MACpBC,YAAY,CAACvB,GAAD,EAAM;QACdC,CAAC,EAAE,CAACU,IAAI,CAACU,MAAL,CAAYG,MAAZ,CAAmBvB,CADT;QAEdC,CAAC,EAAE,CAACS,IAAI,CAACU,MAAL,CAAYG,MAAZ,CAAmBtB;MAFT,CAAN,CAAZ;IAIH;;IACD,IAAIU,KAAJ,EAAW;MACP;MACAN,SAAS,CAACL,CAAV,IAAeW,KAAK,CAACX,CAAN,CAAQd,KAAvB;MACAmB,SAAS,CAACJ,CAAV,IAAeU,KAAK,CAACV,CAAN,CAAQf,KAAvB,CAHO,CAIP;;MACAY,aAAa,CAACC,GAAD,EAAMY,KAAN,CAAb;IACH;;IACD,IAAIJ,kBAAkB,IAAIxB,YAAY,CAAC2B,IAAI,CAACc,YAAN,CAAtC,EAA2D;MACvDF,YAAY,CAACvB,GAAD,EAAMW,IAAI,CAACc,YAAX,CAAZ;IACH;EACJ;EACD;AACJ;AACA;AACA;;;EACI,IAAInB,SAAS,CAACL,CAAV,GAAcG,mBAAd,IACAE,SAAS,CAACL,CAAV,GAAcE,mBADlB,EACuC;IACnCG,SAAS,CAACL,CAAV,GAAc,GAAd;EACH;;EACD,IAAIK,SAAS,CAACJ,CAAV,GAAcE,mBAAd,IACAE,SAAS,CAACJ,CAAV,GAAcC,mBADlB,EACuC;IACnCG,SAAS,CAACJ,CAAV,GAAc,GAAd;EACH;AACJ;;AACD,SAASwB,aAAT,CAAuB9B,IAAvB,EAA6B+B,QAA7B,EAAuC;EACnC/B,IAAI,CAACC,GAAL,GAAWD,IAAI,CAACC,GAAL,GAAW8B,QAAtB;EACA/B,IAAI,CAACE,GAAL,GAAWF,IAAI,CAACE,GAAL,GAAW6B,QAAtB;AACH;AACD;AACA;AACA;AACA;AACA;;;AACA,SAASC,aAAT,CAAuBhC,IAAvB,EAA6BiC,aAA7B,EAA4CC,SAA5C,EAAuDrC,QAAvD,EAAmF;EAAA,IAAlBsC,UAAkB,uEAAL,GAAK;EAC/E,MAAM3C,WAAW,GAAGL,SAAS,CAACa,IAAI,CAACC,GAAN,EAAWD,IAAI,CAACE,GAAhB,EAAqBiC,UAArB,CAA7B,CAD+E,CAE/E;;EACApC,cAAc,CAACC,IAAD,EAAOiC,aAAP,EAAsBC,SAAtB,EAAiC1C,WAAjC,EAA8CK,QAA9C,CAAd;AACH;AACD;AACA;AACA;;;AACA,SAAS8B,YAAT,CAAsBvB,GAAtB,EAA2BgC,SAA3B,EAAsC;EAClCJ,aAAa,CAAC5B,GAAG,CAACC,CAAL,EAAQ+B,SAAS,CAAC/B,CAAlB,EAAqB+B,SAAS,CAACC,MAA/B,EAAuCD,SAAS,CAAC7C,KAAjD,EAAwD6C,SAAS,CAACE,OAAlE,CAAb;EACAN,aAAa,CAAC5B,GAAG,CAACE,CAAL,EAAQ8B,SAAS,CAAC9B,CAAlB,EAAqB8B,SAAS,CAACG,MAA/B,EAAuCH,SAAS,CAAC7C,KAAjD,EAAwD6C,SAAS,CAACI,OAAlE,CAAb;AACH;;AAED,SAASzC,cAAT,EAAyBI,aAAzB,EAAwCR,eAAxC,EAAyDc,eAAzD,EAA0EpB,UAA1E,EAAsF2C,aAAtF,EAAqGL,YAArG,EAAmHG,aAAnH"},"metadata":{},"sourceType":"module"}