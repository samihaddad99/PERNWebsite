{"ast":null,"code":"import { isGenerator, createGeneratorEasing } from 'motion-dom';\nimport { progress, secondsToMilliseconds, invariant } from 'motion-utils';\nimport { getEasingForSegment } from '../../easing/utils/get-easing-for-segment.mjs';\nimport { defaultOffset } from '../../utils/offsets/default.mjs';\nimport { fillOffset } from '../../utils/offsets/fill.mjs';\nimport { isMotionValue } from '../../value/utils/is-motion-value.mjs';\nimport { resolveSubjects } from '../animate/resolve-subjects.mjs';\nimport { calculateRepeatDuration } from './utils/calc-repeat-duration.mjs';\nimport { calcNextTime } from './utils/calc-time.mjs';\nimport { addKeyframes } from './utils/edit.mjs';\nimport { normalizeTimes } from './utils/normalize-times.mjs';\nimport { compareByTime } from './utils/sort.mjs';\nconst defaultSegmentEasing = \"easeInOut\";\nconst MAX_REPEAT = 20;\n\nfunction createAnimationsFromSequence(sequence) {\n  let {\n    defaultTransition = {},\n    ...sequenceTransition\n  } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let scope = arguments.length > 2 ? arguments[2] : undefined;\n  let generators = arguments.length > 3 ? arguments[3] : undefined;\n  const defaultDuration = defaultTransition.duration || 0.3;\n  const animationDefinitions = new Map();\n  const sequences = new Map();\n  const elementCache = {};\n  const timeLabels = new Map();\n  let prevTime = 0;\n  let currentTime = 0;\n  let totalDuration = 0;\n  /**\n   * Build the timeline by mapping over the sequence array and converting\n   * the definitions into keyframes and offsets with absolute time values.\n   * These will later get converted into relative offsets in a second pass.\n   */\n\n  for (let i = 0; i < sequence.length; i++) {\n    const segment = sequence[i];\n    /**\n     * If this is a timeline label, mark it and skip the rest of this iteration.\n     */\n\n    if (typeof segment === \"string\") {\n      timeLabels.set(segment, currentTime);\n      continue;\n    } else if (!Array.isArray(segment)) {\n      timeLabels.set(segment.name, calcNextTime(currentTime, segment.at, prevTime, timeLabels));\n      continue;\n    }\n\n    let [subject, keyframes, transition = {}] = segment;\n    /**\n     * If a relative or absolute time value has been specified we need to resolve\n     * it in relation to the currentTime.\n     */\n\n    if (transition.at !== undefined) {\n      currentTime = calcNextTime(currentTime, transition.at, prevTime, timeLabels);\n    }\n    /**\n     * Keep track of the maximum duration in this definition. This will be\n     * applied to currentTime once the definition has been parsed.\n     */\n\n\n    let maxDuration = 0;\n\n    const resolveValueSequence = function (valueKeyframes, valueTransition, valueSequence) {\n      let elementIndex = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n      let numSubjects = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;\n      const valueKeyframesAsList = keyframesAsList(valueKeyframes);\n      const {\n        delay = 0,\n        times = defaultOffset(valueKeyframesAsList),\n        type = \"keyframes\",\n        repeat,\n        repeatType,\n        repeatDelay = 0,\n        ...remainingTransition\n      } = valueTransition;\n      let {\n        ease = defaultTransition.ease || \"easeOut\",\n        duration\n      } = valueTransition;\n      /**\n       * Resolve stagger() if defined.\n       */\n\n      const calculatedDelay = typeof delay === \"function\" ? delay(elementIndex, numSubjects) : delay;\n      /**\n       * If this animation should and can use a spring, generate a spring easing function.\n       */\n\n      const numKeyframes = valueKeyframesAsList.length;\n      const createGenerator = isGenerator(type) ? type : generators === null || generators === void 0 ? void 0 : generators[type];\n\n      if (numKeyframes <= 2 && createGenerator) {\n        /**\n         * As we're creating an easing function from a spring,\n         * ideally we want to generate it using the real distance\n         * between the two keyframes. However this isn't always\n         * possible - in these situations we use 0-100.\n         */\n        let absoluteDelta = 100;\n\n        if (numKeyframes === 2 && isNumberKeyframesArray(valueKeyframesAsList)) {\n          const delta = valueKeyframesAsList[1] - valueKeyframesAsList[0];\n          absoluteDelta = Math.abs(delta);\n        }\n\n        const springTransition = { ...remainingTransition\n        };\n\n        if (duration !== undefined) {\n          springTransition.duration = secondsToMilliseconds(duration);\n        }\n\n        const springEasing = createGeneratorEasing(springTransition, absoluteDelta, createGenerator);\n        ease = springEasing.ease;\n        duration = springEasing.duration;\n      }\n\n      duration !== null && duration !== void 0 ? duration : duration = defaultDuration;\n      const startTime = currentTime + calculatedDelay;\n      /**\n       * If there's only one time offset of 0, fill in a second with length 1\n       */\n\n      if (times.length === 1 && times[0] === 0) {\n        times[1] = 1;\n      }\n      /**\n       * Fill out if offset if fewer offsets than keyframes\n       */\n\n\n      const remainder = times.length - valueKeyframesAsList.length;\n      remainder > 0 && fillOffset(times, remainder);\n      /**\n       * If only one value has been set, ie [1], push a null to the start of\n       * the keyframe array. This will let us mark a keyframe at this point\n       * that will later be hydrated with the previous value.\n       */\n\n      valueKeyframesAsList.length === 1 && valueKeyframesAsList.unshift(null);\n      /**\n       * Handle repeat options\n       */\n\n      if (repeat) {\n        invariant(repeat < MAX_REPEAT, \"Repeat count too high, must be less than 20\");\n        duration = calculateRepeatDuration(duration, repeat);\n        const originalKeyframes = [...valueKeyframesAsList];\n        const originalTimes = [...times];\n        ease = Array.isArray(ease) ? [...ease] : [ease];\n        const originalEase = [...ease];\n\n        for (let repeatIndex = 0; repeatIndex < repeat; repeatIndex++) {\n          valueKeyframesAsList.push(...originalKeyframes);\n\n          for (let keyframeIndex = 0; keyframeIndex < originalKeyframes.length; keyframeIndex++) {\n            times.push(originalTimes[keyframeIndex] + (repeatIndex + 1));\n            ease.push(keyframeIndex === 0 ? \"linear\" : getEasingForSegment(originalEase, keyframeIndex - 1));\n          }\n        }\n\n        normalizeTimes(times, repeat);\n      }\n\n      const targetTime = startTime + duration;\n      /**\n       * Add keyframes, mapping offsets to absolute time.\n       */\n\n      addKeyframes(valueSequence, valueKeyframesAsList, ease, times, startTime, targetTime);\n      maxDuration = Math.max(calculatedDelay + duration, maxDuration);\n      totalDuration = Math.max(targetTime, totalDuration);\n    };\n\n    if (isMotionValue(subject)) {\n      const subjectSequence = getSubjectSequence(subject, sequences);\n      resolveValueSequence(keyframes, transition, getValueSequence(\"default\", subjectSequence));\n    } else {\n      const subjects = resolveSubjects(subject, keyframes, scope, elementCache);\n      const numSubjects = subjects.length;\n      /**\n       * For every element in this segment, process the defined values.\n       */\n\n      for (let subjectIndex = 0; subjectIndex < numSubjects; subjectIndex++) {\n        /**\n         * Cast necessary, but we know these are of this type\n         */\n        keyframes = keyframes;\n        transition = transition;\n        const thisSubject = subjects[subjectIndex];\n        const subjectSequence = getSubjectSequence(thisSubject, sequences);\n\n        for (const key in keyframes) {\n          resolveValueSequence(keyframes[key], getValueTransition(transition, key), getValueSequence(key, subjectSequence), subjectIndex, numSubjects);\n        }\n      }\n    }\n\n    prevTime = currentTime;\n    currentTime += maxDuration;\n  }\n  /**\n   * For every element and value combination create a new animation.\n   */\n\n\n  sequences.forEach((valueSequences, element) => {\n    for (const key in valueSequences) {\n      const valueSequence = valueSequences[key];\n      /**\n       * Arrange all the keyframes in ascending time order.\n       */\n\n      valueSequence.sort(compareByTime);\n      const keyframes = [];\n      const valueOffset = [];\n      const valueEasing = [];\n      /**\n       * For each keyframe, translate absolute times into\n       * relative offsets based on the total duration of the timeline.\n       */\n\n      for (let i = 0; i < valueSequence.length; i++) {\n        const {\n          at,\n          value,\n          easing\n        } = valueSequence[i];\n        keyframes.push(value);\n        valueOffset.push(progress(0, totalDuration, at));\n        valueEasing.push(easing || \"easeOut\");\n      }\n      /**\n       * If the first keyframe doesn't land on offset: 0\n       * provide one by duplicating the initial keyframe. This ensures\n       * it snaps to the first keyframe when the animation starts.\n       */\n\n\n      if (valueOffset[0] !== 0) {\n        valueOffset.unshift(0);\n        keyframes.unshift(keyframes[0]);\n        valueEasing.unshift(defaultSegmentEasing);\n      }\n      /**\n       * If the last keyframe doesn't land on offset: 1\n       * provide one with a null wildcard value. This will ensure it\n       * stays static until the end of the animation.\n       */\n\n\n      if (valueOffset[valueOffset.length - 1] !== 1) {\n        valueOffset.push(1);\n        keyframes.push(null);\n      }\n\n      if (!animationDefinitions.has(element)) {\n        animationDefinitions.set(element, {\n          keyframes: {},\n          transition: {}\n        });\n      }\n\n      const definition = animationDefinitions.get(element);\n      definition.keyframes[key] = keyframes;\n      definition.transition[key] = { ...defaultTransition,\n        duration: totalDuration,\n        ease: valueEasing,\n        times: valueOffset,\n        ...sequenceTransition\n      };\n    }\n  });\n  return animationDefinitions;\n}\n\nfunction getSubjectSequence(subject, sequences) {\n  !sequences.has(subject) && sequences.set(subject, {});\n  return sequences.get(subject);\n}\n\nfunction getValueSequence(name, sequences) {\n  if (!sequences[name]) sequences[name] = [];\n  return sequences[name];\n}\n\nfunction keyframesAsList(keyframes) {\n  return Array.isArray(keyframes) ? keyframes : [keyframes];\n}\n\nfunction getValueTransition(transition, key) {\n  return transition && transition[key] ? { ...transition,\n    ...transition[key]\n  } : { ...transition\n  };\n}\n\nconst isNumber = keyframe => typeof keyframe === \"number\";\n\nconst isNumberKeyframesArray = keyframes => keyframes.every(isNumber);\n\nexport { createAnimationsFromSequence, getValueTransition };","map":{"version":3,"names":["isGenerator","createGeneratorEasing","progress","secondsToMilliseconds","invariant","getEasingForSegment","defaultOffset","fillOffset","isMotionValue","resolveSubjects","calculateRepeatDuration","calcNextTime","addKeyframes","normalizeTimes","compareByTime","defaultSegmentEasing","MAX_REPEAT","createAnimationsFromSequence","sequence","defaultTransition","sequenceTransition","scope","generators","defaultDuration","duration","animationDefinitions","Map","sequences","elementCache","timeLabels","prevTime","currentTime","totalDuration","i","length","segment","set","Array","isArray","name","at","subject","keyframes","transition","undefined","maxDuration","resolveValueSequence","valueKeyframes","valueTransition","valueSequence","elementIndex","numSubjects","valueKeyframesAsList","keyframesAsList","delay","times","type","repeat","repeatType","repeatDelay","remainingTransition","ease","calculatedDelay","numKeyframes","createGenerator","absoluteDelta","isNumberKeyframesArray","delta","Math","abs","springTransition","springEasing","startTime","remainder","unshift","originalKeyframes","originalTimes","originalEase","repeatIndex","push","keyframeIndex","targetTime","max","subjectSequence","getSubjectSequence","getValueSequence","subjects","subjectIndex","thisSubject","key","getValueTransition","forEach","valueSequences","element","sort","valueOffset","valueEasing","value","easing","has","definition","get","isNumber","keyframe","every"],"sources":["C:/Users/samih/OneDrive/Desktop/school/website/PERNWebsite/node_modules/framer-motion/dist/es/animation/sequence/create.mjs"],"sourcesContent":["import { isGenerator, createGeneratorEasing } from 'motion-dom';\nimport { progress, secondsToMilliseconds, invariant } from 'motion-utils';\nimport { getEasingForSegment } from '../../easing/utils/get-easing-for-segment.mjs';\nimport { defaultOffset } from '../../utils/offsets/default.mjs';\nimport { fillOffset } from '../../utils/offsets/fill.mjs';\nimport { isMotionValue } from '../../value/utils/is-motion-value.mjs';\nimport { resolveSubjects } from '../animate/resolve-subjects.mjs';\nimport { calculateRepeatDuration } from './utils/calc-repeat-duration.mjs';\nimport { calcNextTime } from './utils/calc-time.mjs';\nimport { addKeyframes } from './utils/edit.mjs';\nimport { normalizeTimes } from './utils/normalize-times.mjs';\nimport { compareByTime } from './utils/sort.mjs';\n\nconst defaultSegmentEasing = \"easeInOut\";\nconst MAX_REPEAT = 20;\nfunction createAnimationsFromSequence(sequence, { defaultTransition = {}, ...sequenceTransition } = {}, scope, generators) {\n    const defaultDuration = defaultTransition.duration || 0.3;\n    const animationDefinitions = new Map();\n    const sequences = new Map();\n    const elementCache = {};\n    const timeLabels = new Map();\n    let prevTime = 0;\n    let currentTime = 0;\n    let totalDuration = 0;\n    /**\n     * Build the timeline by mapping over the sequence array and converting\n     * the definitions into keyframes and offsets with absolute time values.\n     * These will later get converted into relative offsets in a second pass.\n     */\n    for (let i = 0; i < sequence.length; i++) {\n        const segment = sequence[i];\n        /**\n         * If this is a timeline label, mark it and skip the rest of this iteration.\n         */\n        if (typeof segment === \"string\") {\n            timeLabels.set(segment, currentTime);\n            continue;\n        }\n        else if (!Array.isArray(segment)) {\n            timeLabels.set(segment.name, calcNextTime(currentTime, segment.at, prevTime, timeLabels));\n            continue;\n        }\n        let [subject, keyframes, transition = {}] = segment;\n        /**\n         * If a relative or absolute time value has been specified we need to resolve\n         * it in relation to the currentTime.\n         */\n        if (transition.at !== undefined) {\n            currentTime = calcNextTime(currentTime, transition.at, prevTime, timeLabels);\n        }\n        /**\n         * Keep track of the maximum duration in this definition. This will be\n         * applied to currentTime once the definition has been parsed.\n         */\n        let maxDuration = 0;\n        const resolveValueSequence = (valueKeyframes, valueTransition, valueSequence, elementIndex = 0, numSubjects = 0) => {\n            const valueKeyframesAsList = keyframesAsList(valueKeyframes);\n            const { delay = 0, times = defaultOffset(valueKeyframesAsList), type = \"keyframes\", repeat, repeatType, repeatDelay = 0, ...remainingTransition } = valueTransition;\n            let { ease = defaultTransition.ease || \"easeOut\", duration } = valueTransition;\n            /**\n             * Resolve stagger() if defined.\n             */\n            const calculatedDelay = typeof delay === \"function\"\n                ? delay(elementIndex, numSubjects)\n                : delay;\n            /**\n             * If this animation should and can use a spring, generate a spring easing function.\n             */\n            const numKeyframes = valueKeyframesAsList.length;\n            const createGenerator = isGenerator(type)\n                ? type\n                : generators === null || generators === void 0 ? void 0 : generators[type];\n            if (numKeyframes <= 2 && createGenerator) {\n                /**\n                 * As we're creating an easing function from a spring,\n                 * ideally we want to generate it using the real distance\n                 * between the two keyframes. However this isn't always\n                 * possible - in these situations we use 0-100.\n                 */\n                let absoluteDelta = 100;\n                if (numKeyframes === 2 &&\n                    isNumberKeyframesArray(valueKeyframesAsList)) {\n                    const delta = valueKeyframesAsList[1] - valueKeyframesAsList[0];\n                    absoluteDelta = Math.abs(delta);\n                }\n                const springTransition = { ...remainingTransition };\n                if (duration !== undefined) {\n                    springTransition.duration = secondsToMilliseconds(duration);\n                }\n                const springEasing = createGeneratorEasing(springTransition, absoluteDelta, createGenerator);\n                ease = springEasing.ease;\n                duration = springEasing.duration;\n            }\n            duration !== null && duration !== void 0 ? duration : (duration = defaultDuration);\n            const startTime = currentTime + calculatedDelay;\n            /**\n             * If there's only one time offset of 0, fill in a second with length 1\n             */\n            if (times.length === 1 && times[0] === 0) {\n                times[1] = 1;\n            }\n            /**\n             * Fill out if offset if fewer offsets than keyframes\n             */\n            const remainder = times.length - valueKeyframesAsList.length;\n            remainder > 0 && fillOffset(times, remainder);\n            /**\n             * If only one value has been set, ie [1], push a null to the start of\n             * the keyframe array. This will let us mark a keyframe at this point\n             * that will later be hydrated with the previous value.\n             */\n            valueKeyframesAsList.length === 1 &&\n                valueKeyframesAsList.unshift(null);\n            /**\n             * Handle repeat options\n             */\n            if (repeat) {\n                invariant(repeat < MAX_REPEAT, \"Repeat count too high, must be less than 20\");\n                duration = calculateRepeatDuration(duration, repeat);\n                const originalKeyframes = [...valueKeyframesAsList];\n                const originalTimes = [...times];\n                ease = Array.isArray(ease) ? [...ease] : [ease];\n                const originalEase = [...ease];\n                for (let repeatIndex = 0; repeatIndex < repeat; repeatIndex++) {\n                    valueKeyframesAsList.push(...originalKeyframes);\n                    for (let keyframeIndex = 0; keyframeIndex < originalKeyframes.length; keyframeIndex++) {\n                        times.push(originalTimes[keyframeIndex] + (repeatIndex + 1));\n                        ease.push(keyframeIndex === 0\n                            ? \"linear\"\n                            : getEasingForSegment(originalEase, keyframeIndex - 1));\n                    }\n                }\n                normalizeTimes(times, repeat);\n            }\n            const targetTime = startTime + duration;\n            /**\n             * Add keyframes, mapping offsets to absolute time.\n             */\n            addKeyframes(valueSequence, valueKeyframesAsList, ease, times, startTime, targetTime);\n            maxDuration = Math.max(calculatedDelay + duration, maxDuration);\n            totalDuration = Math.max(targetTime, totalDuration);\n        };\n        if (isMotionValue(subject)) {\n            const subjectSequence = getSubjectSequence(subject, sequences);\n            resolveValueSequence(keyframes, transition, getValueSequence(\"default\", subjectSequence));\n        }\n        else {\n            const subjects = resolveSubjects(subject, keyframes, scope, elementCache);\n            const numSubjects = subjects.length;\n            /**\n             * For every element in this segment, process the defined values.\n             */\n            for (let subjectIndex = 0; subjectIndex < numSubjects; subjectIndex++) {\n                /**\n                 * Cast necessary, but we know these are of this type\n                 */\n                keyframes = keyframes;\n                transition = transition;\n                const thisSubject = subjects[subjectIndex];\n                const subjectSequence = getSubjectSequence(thisSubject, sequences);\n                for (const key in keyframes) {\n                    resolveValueSequence(keyframes[key], getValueTransition(transition, key), getValueSequence(key, subjectSequence), subjectIndex, numSubjects);\n                }\n            }\n        }\n        prevTime = currentTime;\n        currentTime += maxDuration;\n    }\n    /**\n     * For every element and value combination create a new animation.\n     */\n    sequences.forEach((valueSequences, element) => {\n        for (const key in valueSequences) {\n            const valueSequence = valueSequences[key];\n            /**\n             * Arrange all the keyframes in ascending time order.\n             */\n            valueSequence.sort(compareByTime);\n            const keyframes = [];\n            const valueOffset = [];\n            const valueEasing = [];\n            /**\n             * For each keyframe, translate absolute times into\n             * relative offsets based on the total duration of the timeline.\n             */\n            for (let i = 0; i < valueSequence.length; i++) {\n                const { at, value, easing } = valueSequence[i];\n                keyframes.push(value);\n                valueOffset.push(progress(0, totalDuration, at));\n                valueEasing.push(easing || \"easeOut\");\n            }\n            /**\n             * If the first keyframe doesn't land on offset: 0\n             * provide one by duplicating the initial keyframe. This ensures\n             * it snaps to the first keyframe when the animation starts.\n             */\n            if (valueOffset[0] !== 0) {\n                valueOffset.unshift(0);\n                keyframes.unshift(keyframes[0]);\n                valueEasing.unshift(defaultSegmentEasing);\n            }\n            /**\n             * If the last keyframe doesn't land on offset: 1\n             * provide one with a null wildcard value. This will ensure it\n             * stays static until the end of the animation.\n             */\n            if (valueOffset[valueOffset.length - 1] !== 1) {\n                valueOffset.push(1);\n                keyframes.push(null);\n            }\n            if (!animationDefinitions.has(element)) {\n                animationDefinitions.set(element, {\n                    keyframes: {},\n                    transition: {},\n                });\n            }\n            const definition = animationDefinitions.get(element);\n            definition.keyframes[key] = keyframes;\n            definition.transition[key] = {\n                ...defaultTransition,\n                duration: totalDuration,\n                ease: valueEasing,\n                times: valueOffset,\n                ...sequenceTransition,\n            };\n        }\n    });\n    return animationDefinitions;\n}\nfunction getSubjectSequence(subject, sequences) {\n    !sequences.has(subject) && sequences.set(subject, {});\n    return sequences.get(subject);\n}\nfunction getValueSequence(name, sequences) {\n    if (!sequences[name])\n        sequences[name] = [];\n    return sequences[name];\n}\nfunction keyframesAsList(keyframes) {\n    return Array.isArray(keyframes) ? keyframes : [keyframes];\n}\nfunction getValueTransition(transition, key) {\n    return transition && transition[key]\n        ? {\n            ...transition,\n            ...transition[key],\n        }\n        : { ...transition };\n}\nconst isNumber = (keyframe) => typeof keyframe === \"number\";\nconst isNumberKeyframesArray = (keyframes) => keyframes.every(isNumber);\n\nexport { createAnimationsFromSequence, getValueTransition };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}