{"ast":null,"code":"import { getValueAsType } from '../../dom/value-types/get-as-type.mjs';\nimport { numberValueTypes } from '../../dom/value-types/number.mjs';\nimport { transformPropOrder } from './keys-transform.mjs';\nconst translateAlias = {\n  x: \"translateX\",\n  y: \"translateY\",\n  z: \"translateZ\",\n  transformPerspective: \"perspective\"\n};\nconst numTransforms = transformPropOrder.length;\n/**\n * Build a CSS transform style from individual x/y/scale etc properties.\n *\n * This outputs with a default order of transforms/scales/rotations, this can be customised by\n * providing a transformTemplate function.\n */\n\nfunction buildTransform(latestValues, transform, transformTemplate) {\n  // The transform string we're going to build into.\n  let transformString = \"\";\n  let transformIsDefault = true;\n  /**\n   * Loop over all possible transforms in order, adding the ones that\n   * are present to the transform string.\n   */\n\n  for (let i = 0; i < numTransforms; i++) {\n    const key = transformPropOrder[i];\n    const value = latestValues[key];\n    if (value === undefined) continue;\n    let valueIsDefault = true;\n\n    if (typeof value === \"number\") {\n      valueIsDefault = value === (key.startsWith(\"scale\") ? 1 : 0);\n    } else {\n      valueIsDefault = parseFloat(value) === 0;\n    }\n\n    if (!valueIsDefault || transformTemplate) {\n      const valueAsType = getValueAsType(value, numberValueTypes[key]);\n\n      if (!valueIsDefault) {\n        transformIsDefault = false;\n        const transformName = translateAlias[key] || key;\n        transformString += `${transformName}(${valueAsType}) `;\n      }\n\n      if (transformTemplate) {\n        transform[key] = valueAsType;\n      }\n    }\n  }\n\n  transformString = transformString.trim(); // If we have a custom `transform` template, pass our transform values and\n  // generated transformString to that before returning\n\n  if (transformTemplate) {\n    transformString = transformTemplate(transform, transformIsDefault ? \"\" : transformString);\n  } else if (transformIsDefault) {\n    transformString = \"none\";\n  }\n\n  return transformString;\n}\n\nexport { buildTransform };","map":{"version":3,"names":["getValueAsType","numberValueTypes","transformPropOrder","translateAlias","x","y","z","transformPerspective","numTransforms","length","buildTransform","latestValues","transform","transformTemplate","transformString","transformIsDefault","i","key","value","undefined","valueIsDefault","startsWith","parseFloat","valueAsType","transformName","trim"],"sources":["C:/Users/samih/OneDrive/Desktop/school/website/PERNWebsite/node_modules/framer-motion/dist/es/render/html/utils/build-transform.mjs"],"sourcesContent":["import { getValueAsType } from '../../dom/value-types/get-as-type.mjs';\nimport { numberValueTypes } from '../../dom/value-types/number.mjs';\nimport { transformPropOrder } from './keys-transform.mjs';\n\nconst translateAlias = {\n    x: \"translateX\",\n    y: \"translateY\",\n    z: \"translateZ\",\n    transformPerspective: \"perspective\",\n};\nconst numTransforms = transformPropOrder.length;\n/**\n * Build a CSS transform style from individual x/y/scale etc properties.\n *\n * This outputs with a default order of transforms/scales/rotations, this can be customised by\n * providing a transformTemplate function.\n */\nfunction buildTransform(latestValues, transform, transformTemplate) {\n    // The transform string we're going to build into.\n    let transformString = \"\";\n    let transformIsDefault = true;\n    /**\n     * Loop over all possible transforms in order, adding the ones that\n     * are present to the transform string.\n     */\n    for (let i = 0; i < numTransforms; i++) {\n        const key = transformPropOrder[i];\n        const value = latestValues[key];\n        if (value === undefined)\n            continue;\n        let valueIsDefault = true;\n        if (typeof value === \"number\") {\n            valueIsDefault = value === (key.startsWith(\"scale\") ? 1 : 0);\n        }\n        else {\n            valueIsDefault = parseFloat(value) === 0;\n        }\n        if (!valueIsDefault || transformTemplate) {\n            const valueAsType = getValueAsType(value, numberValueTypes[key]);\n            if (!valueIsDefault) {\n                transformIsDefault = false;\n                const transformName = translateAlias[key] || key;\n                transformString += `${transformName}(${valueAsType}) `;\n            }\n            if (transformTemplate) {\n                transform[key] = valueAsType;\n            }\n        }\n    }\n    transformString = transformString.trim();\n    // If we have a custom `transform` template, pass our transform values and\n    // generated transformString to that before returning\n    if (transformTemplate) {\n        transformString = transformTemplate(transform, transformIsDefault ? \"\" : transformString);\n    }\n    else if (transformIsDefault) {\n        transformString = \"none\";\n    }\n    return transformString;\n}\n\nexport { buildTransform };\n"],"mappings":"AAAA,SAASA,cAAT,QAA+B,uCAA/B;AACA,SAASC,gBAAT,QAAiC,kCAAjC;AACA,SAASC,kBAAT,QAAmC,sBAAnC;AAEA,MAAMC,cAAc,GAAG;EACnBC,CAAC,EAAE,YADgB;EAEnBC,CAAC,EAAE,YAFgB;EAGnBC,CAAC,EAAE,YAHgB;EAInBC,oBAAoB,EAAE;AAJH,CAAvB;AAMA,MAAMC,aAAa,GAAGN,kBAAkB,CAACO,MAAzC;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,cAAT,CAAwBC,YAAxB,EAAsCC,SAAtC,EAAiDC,iBAAjD,EAAoE;EAChE;EACA,IAAIC,eAAe,GAAG,EAAtB;EACA,IAAIC,kBAAkB,GAAG,IAAzB;EACA;AACJ;AACA;AACA;;EACI,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGR,aAApB,EAAmCQ,CAAC,EAApC,EAAwC;IACpC,MAAMC,GAAG,GAAGf,kBAAkB,CAACc,CAAD,CAA9B;IACA,MAAME,KAAK,GAAGP,YAAY,CAACM,GAAD,CAA1B;IACA,IAAIC,KAAK,KAAKC,SAAd,EACI;IACJ,IAAIC,cAAc,GAAG,IAArB;;IACA,IAAI,OAAOF,KAAP,KAAiB,QAArB,EAA+B;MAC3BE,cAAc,GAAGF,KAAK,MAAMD,GAAG,CAACI,UAAJ,CAAe,OAAf,IAA0B,CAA1B,GAA8B,CAApC,CAAtB;IACH,CAFD,MAGK;MACDD,cAAc,GAAGE,UAAU,CAACJ,KAAD,CAAV,KAAsB,CAAvC;IACH;;IACD,IAAI,CAACE,cAAD,IAAmBP,iBAAvB,EAA0C;MACtC,MAAMU,WAAW,GAAGvB,cAAc,CAACkB,KAAD,EAAQjB,gBAAgB,CAACgB,GAAD,CAAxB,CAAlC;;MACA,IAAI,CAACG,cAAL,EAAqB;QACjBL,kBAAkB,GAAG,KAArB;QACA,MAAMS,aAAa,GAAGrB,cAAc,CAACc,GAAD,CAAd,IAAuBA,GAA7C;QACAH,eAAe,IAAK,GAAEU,aAAc,IAAGD,WAAY,IAAnD;MACH;;MACD,IAAIV,iBAAJ,EAAuB;QACnBD,SAAS,CAACK,GAAD,CAAT,GAAiBM,WAAjB;MACH;IACJ;EACJ;;EACDT,eAAe,GAAGA,eAAe,CAACW,IAAhB,EAAlB,CAhCgE,CAiChE;EACA;;EACA,IAAIZ,iBAAJ,EAAuB;IACnBC,eAAe,GAAGD,iBAAiB,CAACD,SAAD,EAAYG,kBAAkB,GAAG,EAAH,GAAQD,eAAtC,CAAnC;EACH,CAFD,MAGK,IAAIC,kBAAJ,EAAwB;IACzBD,eAAe,GAAG,MAAlB;EACH;;EACD,OAAOA,eAAP;AACH;;AAED,SAASJ,cAAT"},"metadata":{},"sourceType":"module"}