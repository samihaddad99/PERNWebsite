{"ast":null,"code":"import { removeNonTranslationalTransform } from '../dom/utils/unit-conversion.mjs';\nimport { frame } from '../../frameloop/frame.mjs';\nconst toResolve = new Set();\nlet isScheduled = false;\nlet anyNeedsMeasurement = false;\n\nfunction measureAllKeyframes() {\n  if (anyNeedsMeasurement) {\n    const resolversToMeasure = Array.from(toResolve).filter(resolver => resolver.needsMeasurement);\n    const elementsToMeasure = new Set(resolversToMeasure.map(resolver => resolver.element));\n    const transformsToRestore = new Map();\n    /**\n     * Write pass\n     * If we're measuring elements we want to remove bounding box-changing transforms.\n     */\n\n    elementsToMeasure.forEach(element => {\n      const removedTransforms = removeNonTranslationalTransform(element);\n      if (!removedTransforms.length) return;\n      transformsToRestore.set(element, removedTransforms);\n      element.render();\n    }); // Read\n\n    resolversToMeasure.forEach(resolver => resolver.measureInitialState()); // Write\n\n    elementsToMeasure.forEach(element => {\n      element.render();\n      const restore = transformsToRestore.get(element);\n\n      if (restore) {\n        restore.forEach(_ref => {\n          let [key, value] = _ref;\n\n          var _a;\n\n          (_a = element.getValue(key)) === null || _a === void 0 ? void 0 : _a.set(value);\n        });\n      }\n    }); // Read\n\n    resolversToMeasure.forEach(resolver => resolver.measureEndState()); // Write\n\n    resolversToMeasure.forEach(resolver => {\n      if (resolver.suspendedScrollY !== undefined) {\n        window.scrollTo(0, resolver.suspendedScrollY);\n      }\n    });\n  }\n\n  anyNeedsMeasurement = false;\n  isScheduled = false;\n  toResolve.forEach(resolver => resolver.complete());\n  toResolve.clear();\n}\n\nfunction readAllKeyframes() {\n  toResolve.forEach(resolver => {\n    resolver.readKeyframes();\n\n    if (resolver.needsMeasurement) {\n      anyNeedsMeasurement = true;\n    }\n  });\n}\n\nfunction flushKeyframeResolvers() {\n  readAllKeyframes();\n  measureAllKeyframes();\n}\n\nclass KeyframeResolver {\n  constructor(unresolvedKeyframes, onComplete, name, motionValue, element) {\n    let isAsync = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;\n\n    /**\n     * Track whether this resolver has completed. Once complete, it never\n     * needs to attempt keyframe resolution again.\n     */\n    this.isComplete = false;\n    /**\n     * Track whether this resolver is async. If it is, it'll be added to the\n     * resolver queue and flushed in the next frame. Resolvers that aren't going\n     * to trigger read/write thrashing don't need to be async.\n     */\n\n    this.isAsync = false;\n    /**\n     * Track whether this resolver needs to perform a measurement\n     * to resolve its keyframes.\n     */\n\n    this.needsMeasurement = false;\n    /**\n     * Track whether this resolver is currently scheduled to resolve\n     * to allow it to be cancelled and resumed externally.\n     */\n\n    this.isScheduled = false;\n    this.unresolvedKeyframes = [...unresolvedKeyframes];\n    this.onComplete = onComplete;\n    this.name = name;\n    this.motionValue = motionValue;\n    this.element = element;\n    this.isAsync = isAsync;\n  }\n\n  scheduleResolve() {\n    this.isScheduled = true;\n\n    if (this.isAsync) {\n      toResolve.add(this);\n\n      if (!isScheduled) {\n        isScheduled = true;\n        frame.read(readAllKeyframes);\n        frame.resolveKeyframes(measureAllKeyframes);\n      }\n    } else {\n      this.readKeyframes();\n      this.complete();\n    }\n  }\n\n  readKeyframes() {\n    const {\n      unresolvedKeyframes,\n      name,\n      element,\n      motionValue\n    } = this;\n    /**\n     * If a keyframe is null, we hydrate it either by reading it from\n     * the instance, or propagating from previous keyframes.\n     */\n\n    for (let i = 0; i < unresolvedKeyframes.length; i++) {\n      if (unresolvedKeyframes[i] === null) {\n        /**\n         * If the first keyframe is null, we need to find its value by sampling the element\n         */\n        if (i === 0) {\n          const currentValue = motionValue === null || motionValue === void 0 ? void 0 : motionValue.get();\n          const finalKeyframe = unresolvedKeyframes[unresolvedKeyframes.length - 1];\n\n          if (currentValue !== undefined) {\n            unresolvedKeyframes[0] = currentValue;\n          } else if (element && name) {\n            const valueAsRead = element.readValue(name, finalKeyframe);\n\n            if (valueAsRead !== undefined && valueAsRead !== null) {\n              unresolvedKeyframes[0] = valueAsRead;\n            }\n          }\n\n          if (unresolvedKeyframes[0] === undefined) {\n            unresolvedKeyframes[0] = finalKeyframe;\n          }\n\n          if (motionValue && currentValue === undefined) {\n            motionValue.set(unresolvedKeyframes[0]);\n          }\n        } else {\n          unresolvedKeyframes[i] = unresolvedKeyframes[i - 1];\n        }\n      }\n    }\n  }\n\n  setFinalKeyframe() {}\n\n  measureInitialState() {}\n\n  renderEndStyles() {}\n\n  measureEndState() {}\n\n  complete() {\n    this.isComplete = true;\n    this.onComplete(this.unresolvedKeyframes, this.finalKeyframe);\n    toResolve.delete(this);\n  }\n\n  cancel() {\n    if (!this.isComplete) {\n      this.isScheduled = false;\n      toResolve.delete(this);\n    }\n  }\n\n  resume() {\n    if (!this.isComplete) this.scheduleResolve();\n  }\n\n}\n\nexport { KeyframeResolver, flushKeyframeResolvers };","map":{"version":3,"names":["removeNonTranslationalTransform","frame","toResolve","Set","isScheduled","anyNeedsMeasurement","measureAllKeyframes","resolversToMeasure","Array","from","filter","resolver","needsMeasurement","elementsToMeasure","map","element","transformsToRestore","Map","forEach","removedTransforms","length","set","render","measureInitialState","restore","get","key","value","_a","getValue","measureEndState","suspendedScrollY","undefined","window","scrollTo","complete","clear","readAllKeyframes","readKeyframes","flushKeyframeResolvers","KeyframeResolver","constructor","unresolvedKeyframes","onComplete","name","motionValue","isAsync","isComplete","scheduleResolve","add","read","resolveKeyframes","i","currentValue","finalKeyframe","valueAsRead","readValue","setFinalKeyframe","renderEndStyles","delete","cancel","resume"],"sources":["C:/Users/samih/OneDrive/Desktop/school/website/PERNWebsite/node_modules/framer-motion/dist/es/render/utils/KeyframesResolver.mjs"],"sourcesContent":["import { removeNonTranslationalTransform } from '../dom/utils/unit-conversion.mjs';\nimport { frame } from '../../frameloop/frame.mjs';\n\nconst toResolve = new Set();\nlet isScheduled = false;\nlet anyNeedsMeasurement = false;\nfunction measureAllKeyframes() {\n    if (anyNeedsMeasurement) {\n        const resolversToMeasure = Array.from(toResolve).filter((resolver) => resolver.needsMeasurement);\n        const elementsToMeasure = new Set(resolversToMeasure.map((resolver) => resolver.element));\n        const transformsToRestore = new Map();\n        /**\n         * Write pass\n         * If we're measuring elements we want to remove bounding box-changing transforms.\n         */\n        elementsToMeasure.forEach((element) => {\n            const removedTransforms = removeNonTranslationalTransform(element);\n            if (!removedTransforms.length)\n                return;\n            transformsToRestore.set(element, removedTransforms);\n            element.render();\n        });\n        // Read\n        resolversToMeasure.forEach((resolver) => resolver.measureInitialState());\n        // Write\n        elementsToMeasure.forEach((element) => {\n            element.render();\n            const restore = transformsToRestore.get(element);\n            if (restore) {\n                restore.forEach(([key, value]) => {\n                    var _a;\n                    (_a = element.getValue(key)) === null || _a === void 0 ? void 0 : _a.set(value);\n                });\n            }\n        });\n        // Read\n        resolversToMeasure.forEach((resolver) => resolver.measureEndState());\n        // Write\n        resolversToMeasure.forEach((resolver) => {\n            if (resolver.suspendedScrollY !== undefined) {\n                window.scrollTo(0, resolver.suspendedScrollY);\n            }\n        });\n    }\n    anyNeedsMeasurement = false;\n    isScheduled = false;\n    toResolve.forEach((resolver) => resolver.complete());\n    toResolve.clear();\n}\nfunction readAllKeyframes() {\n    toResolve.forEach((resolver) => {\n        resolver.readKeyframes();\n        if (resolver.needsMeasurement) {\n            anyNeedsMeasurement = true;\n        }\n    });\n}\nfunction flushKeyframeResolvers() {\n    readAllKeyframes();\n    measureAllKeyframes();\n}\nclass KeyframeResolver {\n    constructor(unresolvedKeyframes, onComplete, name, motionValue, element, isAsync = false) {\n        /**\n         * Track whether this resolver has completed. Once complete, it never\n         * needs to attempt keyframe resolution again.\n         */\n        this.isComplete = false;\n        /**\n         * Track whether this resolver is async. If it is, it'll be added to the\n         * resolver queue and flushed in the next frame. Resolvers that aren't going\n         * to trigger read/write thrashing don't need to be async.\n         */\n        this.isAsync = false;\n        /**\n         * Track whether this resolver needs to perform a measurement\n         * to resolve its keyframes.\n         */\n        this.needsMeasurement = false;\n        /**\n         * Track whether this resolver is currently scheduled to resolve\n         * to allow it to be cancelled and resumed externally.\n         */\n        this.isScheduled = false;\n        this.unresolvedKeyframes = [...unresolvedKeyframes];\n        this.onComplete = onComplete;\n        this.name = name;\n        this.motionValue = motionValue;\n        this.element = element;\n        this.isAsync = isAsync;\n    }\n    scheduleResolve() {\n        this.isScheduled = true;\n        if (this.isAsync) {\n            toResolve.add(this);\n            if (!isScheduled) {\n                isScheduled = true;\n                frame.read(readAllKeyframes);\n                frame.resolveKeyframes(measureAllKeyframes);\n            }\n        }\n        else {\n            this.readKeyframes();\n            this.complete();\n        }\n    }\n    readKeyframes() {\n        const { unresolvedKeyframes, name, element, motionValue } = this;\n        /**\n         * If a keyframe is null, we hydrate it either by reading it from\n         * the instance, or propagating from previous keyframes.\n         */\n        for (let i = 0; i < unresolvedKeyframes.length; i++) {\n            if (unresolvedKeyframes[i] === null) {\n                /**\n                 * If the first keyframe is null, we need to find its value by sampling the element\n                 */\n                if (i === 0) {\n                    const currentValue = motionValue === null || motionValue === void 0 ? void 0 : motionValue.get();\n                    const finalKeyframe = unresolvedKeyframes[unresolvedKeyframes.length - 1];\n                    if (currentValue !== undefined) {\n                        unresolvedKeyframes[0] = currentValue;\n                    }\n                    else if (element && name) {\n                        const valueAsRead = element.readValue(name, finalKeyframe);\n                        if (valueAsRead !== undefined && valueAsRead !== null) {\n                            unresolvedKeyframes[0] = valueAsRead;\n                        }\n                    }\n                    if (unresolvedKeyframes[0] === undefined) {\n                        unresolvedKeyframes[0] = finalKeyframe;\n                    }\n                    if (motionValue && currentValue === undefined) {\n                        motionValue.set(unresolvedKeyframes[0]);\n                    }\n                }\n                else {\n                    unresolvedKeyframes[i] = unresolvedKeyframes[i - 1];\n                }\n            }\n        }\n    }\n    setFinalKeyframe() { }\n    measureInitialState() { }\n    renderEndStyles() { }\n    measureEndState() { }\n    complete() {\n        this.isComplete = true;\n        this.onComplete(this.unresolvedKeyframes, this.finalKeyframe);\n        toResolve.delete(this);\n    }\n    cancel() {\n        if (!this.isComplete) {\n            this.isScheduled = false;\n            toResolve.delete(this);\n        }\n    }\n    resume() {\n        if (!this.isComplete)\n            this.scheduleResolve();\n    }\n}\n\nexport { KeyframeResolver, flushKeyframeResolvers };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}