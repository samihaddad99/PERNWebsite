{"ast":null,"code":"import { frame } from '../../frameloop/frame.mjs';\nimport { makeUseVisualState } from '../../motion/utils/use-visual-state.mjs';\nimport { transformProps } from '../html/utils/keys-transform.mjs';\nimport { buildSVGAttrs } from './utils/build-attrs.mjs';\nimport { createSvgRenderState } from './utils/create-render-state.mjs';\nimport { isSVGTag } from './utils/is-svg-tag.mjs';\nimport { renderSVG } from './utils/render.mjs';\nimport { scrapeMotionValuesFromProps } from './utils/scrape-motion-values.mjs';\n\nfunction updateSVGDimensions(instance, renderState) {\n  try {\n    renderState.dimensions = typeof instance.getBBox === \"function\" ? instance.getBBox() : instance.getBoundingClientRect();\n  } catch (e) {\n    // Most likely trying to measure an unrendered element under Firefox\n    renderState.dimensions = {\n      x: 0,\n      y: 0,\n      width: 0,\n      height: 0\n    };\n  }\n}\n\nconst layoutProps = [\"x\", \"y\", \"width\", \"height\", \"cx\", \"cy\", \"r\"];\nconst svgMotionConfig = {\n  useVisualState: makeUseVisualState({\n    scrapeMotionValuesFromProps: scrapeMotionValuesFromProps,\n    createRenderState: createSvgRenderState,\n    onUpdate: _ref => {\n      let {\n        props,\n        prevProps,\n        current,\n        renderState,\n        latestValues\n      } = _ref;\n      if (!current) return;\n      let hasTransform = !!props.drag;\n\n      if (!hasTransform) {\n        for (const key in latestValues) {\n          if (transformProps.has(key)) {\n            hasTransform = true;\n            break;\n          }\n        }\n      }\n\n      if (!hasTransform) return;\n      let needsMeasure = !prevProps;\n\n      if (prevProps) {\n        /**\n         * Check the layout props for changes, if any are found we need to\n         * measure the element again.\n         */\n        for (let i = 0; i < layoutProps.length; i++) {\n          const key = layoutProps[i];\n\n          if (props[key] !== prevProps[key]) {\n            needsMeasure = true;\n          }\n        }\n      }\n\n      if (!needsMeasure) return;\n      frame.read(() => {\n        updateSVGDimensions(current, renderState);\n        frame.render(() => {\n          buildSVGAttrs(renderState, latestValues, isSVGTag(current.tagName), props.transformTemplate);\n          renderSVG(current, renderState);\n        });\n      });\n    }\n  })\n};\nexport { svgMotionConfig };","map":{"version":3,"names":["frame","makeUseVisualState","transformProps","buildSVGAttrs","createSvgRenderState","isSVGTag","renderSVG","scrapeMotionValuesFromProps","updateSVGDimensions","instance","renderState","dimensions","getBBox","getBoundingClientRect","e","x","y","width","height","layoutProps","svgMotionConfig","useVisualState","createRenderState","onUpdate","props","prevProps","current","latestValues","hasTransform","drag","key","has","needsMeasure","i","length","read","render","tagName","transformTemplate"],"sources":["C:/Users/samih/OneDrive/Desktop/school/website/PERNWebsite/node_modules/framer-motion/dist/es/render/svg/config-motion.mjs"],"sourcesContent":["import { frame } from '../../frameloop/frame.mjs';\nimport { makeUseVisualState } from '../../motion/utils/use-visual-state.mjs';\nimport { transformProps } from '../html/utils/keys-transform.mjs';\nimport { buildSVGAttrs } from './utils/build-attrs.mjs';\nimport { createSvgRenderState } from './utils/create-render-state.mjs';\nimport { isSVGTag } from './utils/is-svg-tag.mjs';\nimport { renderSVG } from './utils/render.mjs';\nimport { scrapeMotionValuesFromProps } from './utils/scrape-motion-values.mjs';\n\nfunction updateSVGDimensions(instance, renderState) {\n    try {\n        renderState.dimensions =\n            typeof instance.getBBox === \"function\"\n                ? instance.getBBox()\n                : instance.getBoundingClientRect();\n    }\n    catch (e) {\n        // Most likely trying to measure an unrendered element under Firefox\n        renderState.dimensions = {\n            x: 0,\n            y: 0,\n            width: 0,\n            height: 0,\n        };\n    }\n}\nconst layoutProps = [\"x\", \"y\", \"width\", \"height\", \"cx\", \"cy\", \"r\"];\nconst svgMotionConfig = {\n    useVisualState: makeUseVisualState({\n        scrapeMotionValuesFromProps: scrapeMotionValuesFromProps,\n        createRenderState: createSvgRenderState,\n        onUpdate: ({ props, prevProps, current, renderState, latestValues, }) => {\n            if (!current)\n                return;\n            let hasTransform = !!props.drag;\n            if (!hasTransform) {\n                for (const key in latestValues) {\n                    if (transformProps.has(key)) {\n                        hasTransform = true;\n                        break;\n                    }\n                }\n            }\n            if (!hasTransform)\n                return;\n            let needsMeasure = !prevProps;\n            if (prevProps) {\n                /**\n                 * Check the layout props for changes, if any are found we need to\n                 * measure the element again.\n                 */\n                for (let i = 0; i < layoutProps.length; i++) {\n                    const key = layoutProps[i];\n                    if (props[key] !==\n                        prevProps[key]) {\n                        needsMeasure = true;\n                    }\n                }\n            }\n            if (!needsMeasure)\n                return;\n            frame.read(() => {\n                updateSVGDimensions(current, renderState);\n                frame.render(() => {\n                    buildSVGAttrs(renderState, latestValues, isSVGTag(current.tagName), props.transformTemplate);\n                    renderSVG(current, renderState);\n                });\n            });\n        },\n    }),\n};\n\nexport { svgMotionConfig };\n"],"mappings":"AAAA,SAASA,KAAT,QAAsB,2BAAtB;AACA,SAASC,kBAAT,QAAmC,yCAAnC;AACA,SAASC,cAAT,QAA+B,kCAA/B;AACA,SAASC,aAAT,QAA8B,yBAA9B;AACA,SAASC,oBAAT,QAAqC,iCAArC;AACA,SAASC,QAAT,QAAyB,wBAAzB;AACA,SAASC,SAAT,QAA0B,oBAA1B;AACA,SAASC,2BAAT,QAA4C,kCAA5C;;AAEA,SAASC,mBAAT,CAA6BC,QAA7B,EAAuCC,WAAvC,EAAoD;EAChD,IAAI;IACAA,WAAW,CAACC,UAAZ,GACI,OAAOF,QAAQ,CAACG,OAAhB,KAA4B,UAA5B,GACMH,QAAQ,CAACG,OAAT,EADN,GAEMH,QAAQ,CAACI,qBAAT,EAHV;EAIH,CALD,CAMA,OAAOC,CAAP,EAAU;IACN;IACAJ,WAAW,CAACC,UAAZ,GAAyB;MACrBI,CAAC,EAAE,CADkB;MAErBC,CAAC,EAAE,CAFkB;MAGrBC,KAAK,EAAE,CAHc;MAIrBC,MAAM,EAAE;IAJa,CAAzB;EAMH;AACJ;;AACD,MAAMC,WAAW,GAAG,CAAC,GAAD,EAAM,GAAN,EAAW,OAAX,EAAoB,QAApB,EAA8B,IAA9B,EAAoC,IAApC,EAA0C,GAA1C,CAApB;AACA,MAAMC,eAAe,GAAG;EACpBC,cAAc,EAAEpB,kBAAkB,CAAC;IAC/BM,2BAA2B,EAAEA,2BADE;IAE/Be,iBAAiB,EAAElB,oBAFY;IAG/BmB,QAAQ,EAAE,QAA+D;MAAA,IAA9D;QAAEC,KAAF;QAASC,SAAT;QAAoBC,OAApB;QAA6BhB,WAA7B;QAA0CiB;MAA1C,CAA8D;MACrE,IAAI,CAACD,OAAL,EACI;MACJ,IAAIE,YAAY,GAAG,CAAC,CAACJ,KAAK,CAACK,IAA3B;;MACA,IAAI,CAACD,YAAL,EAAmB;QACf,KAAK,MAAME,GAAX,IAAkBH,YAAlB,EAAgC;UAC5B,IAAIzB,cAAc,CAAC6B,GAAf,CAAmBD,GAAnB,CAAJ,EAA6B;YACzBF,YAAY,GAAG,IAAf;YACA;UACH;QACJ;MACJ;;MACD,IAAI,CAACA,YAAL,EACI;MACJ,IAAII,YAAY,GAAG,CAACP,SAApB;;MACA,IAAIA,SAAJ,EAAe;QACX;AAChB;AACA;AACA;QACgB,KAAK,IAAIQ,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGd,WAAW,CAACe,MAAhC,EAAwCD,CAAC,EAAzC,EAA6C;UACzC,MAAMH,GAAG,GAAGX,WAAW,CAACc,CAAD,CAAvB;;UACA,IAAIT,KAAK,CAACM,GAAD,CAAL,KACAL,SAAS,CAACK,GAAD,CADb,EACoB;YAChBE,YAAY,GAAG,IAAf;UACH;QACJ;MACJ;;MACD,IAAI,CAACA,YAAL,EACI;MACJhC,KAAK,CAACmC,IAAN,CAAW,MAAM;QACb3B,mBAAmB,CAACkB,OAAD,EAAUhB,WAAV,CAAnB;QACAV,KAAK,CAACoC,MAAN,CAAa,MAAM;UACfjC,aAAa,CAACO,WAAD,EAAciB,YAAd,EAA4BtB,QAAQ,CAACqB,OAAO,CAACW,OAAT,CAApC,EAAuDb,KAAK,CAACc,iBAA7D,CAAb;UACAhC,SAAS,CAACoB,OAAD,EAAUhB,WAAV,CAAT;QACH,CAHD;MAIH,CAND;IAOH;EAxC8B,CAAD;AADd,CAAxB;AA6CA,SAASU,eAAT"},"metadata":{},"sourceType":"module"}