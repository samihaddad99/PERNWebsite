{"ast":null,"code":"import { supportsScrollTimeline } from 'motion-dom';\nimport { noop } from 'motion-utils';\nimport { observeTimeline } from './observe.mjs';\nimport { scrollInfo } from './track.mjs';\n\nfunction scrollTimelineFallback(_ref) {\n  let {\n    source,\n    container,\n    axis = \"y\"\n  } = _ref;\n  // Support legacy source argument. Deprecate later.\n  if (source) container = source; // ScrollTimeline records progress as a percentage CSSUnitValue\n\n  const currentTime = {\n    value: 0\n  };\n  const cancel = scrollInfo(info => {\n    currentTime.value = info[axis].progress * 100;\n  }, {\n    container,\n    axis\n  });\n  return {\n    currentTime,\n    cancel\n  };\n}\n\nconst timelineCache = new Map();\n\nfunction getTimeline() {\n  let {\n    source,\n    container = document.documentElement,\n    axis = \"y\"\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  // Support legacy source argument. Deprecate later.\n  if (source) container = source;\n\n  if (!timelineCache.has(container)) {\n    timelineCache.set(container, {});\n  }\n\n  const elementCache = timelineCache.get(container);\n\n  if (!elementCache[axis]) {\n    elementCache[axis] = supportsScrollTimeline() ? new ScrollTimeline({\n      source: container,\n      axis\n    }) : scrollTimelineFallback({\n      source: container,\n      axis\n    });\n  }\n\n  return elementCache[axis];\n}\n/**\n * If the onScroll function has two arguments, it's expecting\n * more specific information about the scroll from scrollInfo.\n */\n\n\nfunction isOnScrollWithInfo(onScroll) {\n  return onScroll.length === 2;\n}\n/**\n * Currently, we only support element tracking with `scrollInfo`, though in\n * the future we can also offer ViewTimeline support.\n */\n\n\nfunction needsElementTracking(options) {\n  return options && (options.target || options.offset);\n}\n\nfunction scrollFunction(onScroll, options) {\n  if (isOnScrollWithInfo(onScroll) || needsElementTracking(options)) {\n    return scrollInfo(info => {\n      onScroll(info[options.axis].progress, info);\n    }, options);\n  } else {\n    return observeTimeline(onScroll, getTimeline(options));\n  }\n}\n\nfunction scrollAnimation(animation, options) {\n  animation.flatten();\n\n  if (needsElementTracking(options)) {\n    animation.pause();\n    return scrollInfo(info => {\n      animation.time = animation.duration * info[options.axis].progress;\n    }, options);\n  } else {\n    const timeline = getTimeline(options);\n\n    if (animation.attachTimeline) {\n      return animation.attachTimeline(timeline, valueAnimation => {\n        valueAnimation.pause();\n        return observeTimeline(progress => {\n          valueAnimation.time = valueAnimation.duration * progress;\n        }, timeline);\n      });\n    } else {\n      return noop;\n    }\n  }\n}\n\nfunction scroll(onScroll) {\n  let {\n    axis = \"y\",\n    ...options\n  } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const optionsWithDefaults = {\n    axis,\n    ...options\n  };\n  return typeof onScroll === \"function\" ? scrollFunction(onScroll, optionsWithDefaults) : scrollAnimation(onScroll, optionsWithDefaults);\n}\n\nexport { scroll };","map":{"version":3,"names":["supportsScrollTimeline","noop","observeTimeline","scrollInfo","scrollTimelineFallback","source","container","axis","currentTime","value","cancel","info","progress","timelineCache","Map","getTimeline","document","documentElement","has","set","elementCache","get","ScrollTimeline","isOnScrollWithInfo","onScroll","length","needsElementTracking","options","target","offset","scrollFunction","scrollAnimation","animation","flatten","pause","time","duration","timeline","attachTimeline","valueAnimation","scroll","optionsWithDefaults"],"sources":["C:/Users/samih/OneDrive/Desktop/school/website/PERNWebsite/node_modules/framer-motion/dist/es/render/dom/scroll/index.mjs"],"sourcesContent":["import { supportsScrollTimeline } from 'motion-dom';\nimport { noop } from 'motion-utils';\nimport { observeTimeline } from './observe.mjs';\nimport { scrollInfo } from './track.mjs';\n\nfunction scrollTimelineFallback({ source, container, axis = \"y\", }) {\n    // Support legacy source argument. Deprecate later.\n    if (source)\n        container = source;\n    // ScrollTimeline records progress as a percentage CSSUnitValue\n    const currentTime = { value: 0 };\n    const cancel = scrollInfo((info) => {\n        currentTime.value = info[axis].progress * 100;\n    }, { container, axis });\n    return { currentTime, cancel };\n}\nconst timelineCache = new Map();\nfunction getTimeline({ source, container = document.documentElement, axis = \"y\", } = {}) {\n    // Support legacy source argument. Deprecate later.\n    if (source)\n        container = source;\n    if (!timelineCache.has(container)) {\n        timelineCache.set(container, {});\n    }\n    const elementCache = timelineCache.get(container);\n    if (!elementCache[axis]) {\n        elementCache[axis] = supportsScrollTimeline()\n            ? new ScrollTimeline({ source: container, axis })\n            : scrollTimelineFallback({ source: container, axis });\n    }\n    return elementCache[axis];\n}\n/**\n * If the onScroll function has two arguments, it's expecting\n * more specific information about the scroll from scrollInfo.\n */\nfunction isOnScrollWithInfo(onScroll) {\n    return onScroll.length === 2;\n}\n/**\n * Currently, we only support element tracking with `scrollInfo`, though in\n * the future we can also offer ViewTimeline support.\n */\nfunction needsElementTracking(options) {\n    return options && (options.target || options.offset);\n}\nfunction scrollFunction(onScroll, options) {\n    if (isOnScrollWithInfo(onScroll) || needsElementTracking(options)) {\n        return scrollInfo((info) => {\n            onScroll(info[options.axis].progress, info);\n        }, options);\n    }\n    else {\n        return observeTimeline(onScroll, getTimeline(options));\n    }\n}\nfunction scrollAnimation(animation, options) {\n    animation.flatten();\n    if (needsElementTracking(options)) {\n        animation.pause();\n        return scrollInfo((info) => {\n            animation.time = animation.duration * info[options.axis].progress;\n        }, options);\n    }\n    else {\n        const timeline = getTimeline(options);\n        if (animation.attachTimeline) {\n            return animation.attachTimeline(timeline, (valueAnimation) => {\n                valueAnimation.pause();\n                return observeTimeline((progress) => {\n                    valueAnimation.time = valueAnimation.duration * progress;\n                }, timeline);\n            });\n        }\n        else {\n            return noop;\n        }\n    }\n}\nfunction scroll(onScroll, { axis = \"y\", ...options } = {}) {\n    const optionsWithDefaults = { axis, ...options };\n    return typeof onScroll === \"function\"\n        ? scrollFunction(onScroll, optionsWithDefaults)\n        : scrollAnimation(onScroll, optionsWithDefaults);\n}\n\nexport { scroll };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}