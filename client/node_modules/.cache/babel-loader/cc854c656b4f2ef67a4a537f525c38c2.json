{"ast":null,"code":"import { isDragActive } from '../drag/state/is-active.mjs';\nimport { isNodeOrChild } from '../utils/is-node-or-child.mjs';\nimport { isPrimaryPointer } from '../utils/is-primary-pointer.mjs';\nimport { setupGesture } from '../utils/setup.mjs';\nimport { isElementKeyboardAccessible } from './utils/is-keyboard-accessible.mjs';\nimport { enableKeyboardPress } from './utils/keyboard.mjs';\nimport { isPressing } from './utils/state.mjs';\n/**\n * Filter out events that are not primary pointer events, or are triggering\n * while a Motion gesture is active.\n */\n\nfunction isValidPressEvent(event) {\n  return isPrimaryPointer(event) && !isDragActive();\n}\n/**\n * Create a press gesture.\n *\n * Press is different to `\"pointerdown\"`, `\"pointerup\"` in that it\n * automatically filters out secondary pointer events like right\n * click and multitouch.\n *\n * It also adds accessibility support for keyboards, where\n * an element with a press gesture will receive focus and\n *  trigger on Enter `\"keydown\"` and `\"keyup\"` events.\n *\n * This is different to a browser's `\"click\"` event, which does\n * respond to keyboards but only for the `\"click\"` itself, rather\n * than the press start and end/cancel. The element also needs\n * to be focusable for this to work, whereas a press gesture will\n * make an element focusable by default.\n *\n * @public\n */\n\n\nfunction press(elementOrSelector, onPressStart) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  const [elements, eventOptions, cancelEvents] = setupGesture(elementOrSelector, options);\n\n  const startPress = startEvent => {\n    const element = startEvent.currentTarget;\n    if (!isValidPressEvent(startEvent) || isPressing.has(element)) return;\n    isPressing.add(element);\n    const onPressEnd = onPressStart(element, startEvent);\n\n    const onPointerEnd = (endEvent, success) => {\n      window.removeEventListener(\"pointerup\", onPointerUp);\n      window.removeEventListener(\"pointercancel\", onPointerCancel);\n\n      if (!isValidPressEvent(endEvent) || !isPressing.has(element)) {\n        return;\n      }\n\n      isPressing.delete(element);\n\n      if (typeof onPressEnd === \"function\") {\n        onPressEnd(endEvent, {\n          success\n        });\n      }\n    };\n\n    const onPointerUp = upEvent => {\n      onPointerEnd(upEvent, options.useGlobalTarget || isNodeOrChild(element, upEvent.target));\n    };\n\n    const onPointerCancel = cancelEvent => {\n      onPointerEnd(cancelEvent, false);\n    };\n\n    window.addEventListener(\"pointerup\", onPointerUp, eventOptions);\n    window.addEventListener(\"pointercancel\", onPointerCancel, eventOptions);\n  };\n\n  elements.forEach(element => {\n    if (!isElementKeyboardAccessible(element) && element.getAttribute(\"tabindex\") === null) {\n      element.tabIndex = 0;\n    }\n\n    const target = options.useGlobalTarget ? window : element;\n    target.addEventListener(\"pointerdown\", startPress, eventOptions);\n    element.addEventListener(\"focus\", event => enableKeyboardPress(event, eventOptions), eventOptions);\n  });\n  return cancelEvents;\n}\n\nexport { press };","map":{"version":3,"names":["isDragActive","isNodeOrChild","isPrimaryPointer","setupGesture","isElementKeyboardAccessible","enableKeyboardPress","isPressing","isValidPressEvent","event","press","elementOrSelector","onPressStart","options","elements","eventOptions","cancelEvents","startPress","startEvent","element","currentTarget","has","add","onPressEnd","onPointerEnd","endEvent","success","window","removeEventListener","onPointerUp","onPointerCancel","delete","upEvent","useGlobalTarget","target","cancelEvent","addEventListener","forEach","getAttribute","tabIndex"],"sources":["C:/Users/samih/OneDrive/Desktop/school/website/PERNWebsite/node_modules/motion-dom/dist/es/gestures/press/index.mjs"],"sourcesContent":["import { isDragActive } from '../drag/state/is-active.mjs';\nimport { isNodeOrChild } from '../utils/is-node-or-child.mjs';\nimport { isPrimaryPointer } from '../utils/is-primary-pointer.mjs';\nimport { setupGesture } from '../utils/setup.mjs';\nimport { isElementKeyboardAccessible } from './utils/is-keyboard-accessible.mjs';\nimport { enableKeyboardPress } from './utils/keyboard.mjs';\nimport { isPressing } from './utils/state.mjs';\n\n/**\n * Filter out events that are not primary pointer events, or are triggering\n * while a Motion gesture is active.\n */\nfunction isValidPressEvent(event) {\n    return isPrimaryPointer(event) && !isDragActive();\n}\n/**\n * Create a press gesture.\n *\n * Press is different to `\"pointerdown\"`, `\"pointerup\"` in that it\n * automatically filters out secondary pointer events like right\n * click and multitouch.\n *\n * It also adds accessibility support for keyboards, where\n * an element with a press gesture will receive focus and\n *  trigger on Enter `\"keydown\"` and `\"keyup\"` events.\n *\n * This is different to a browser's `\"click\"` event, which does\n * respond to keyboards but only for the `\"click\"` itself, rather\n * than the press start and end/cancel. The element also needs\n * to be focusable for this to work, whereas a press gesture will\n * make an element focusable by default.\n *\n * @public\n */\nfunction press(elementOrSelector, onPressStart, options = {}) {\n    const [elements, eventOptions, cancelEvents] = setupGesture(elementOrSelector, options);\n    const startPress = (startEvent) => {\n        const element = startEvent.currentTarget;\n        if (!isValidPressEvent(startEvent) || isPressing.has(element))\n            return;\n        isPressing.add(element);\n        const onPressEnd = onPressStart(element, startEvent);\n        const onPointerEnd = (endEvent, success) => {\n            window.removeEventListener(\"pointerup\", onPointerUp);\n            window.removeEventListener(\"pointercancel\", onPointerCancel);\n            if (!isValidPressEvent(endEvent) || !isPressing.has(element)) {\n                return;\n            }\n            isPressing.delete(element);\n            if (typeof onPressEnd === \"function\") {\n                onPressEnd(endEvent, { success });\n            }\n        };\n        const onPointerUp = (upEvent) => {\n            onPointerEnd(upEvent, options.useGlobalTarget ||\n                isNodeOrChild(element, upEvent.target));\n        };\n        const onPointerCancel = (cancelEvent) => {\n            onPointerEnd(cancelEvent, false);\n        };\n        window.addEventListener(\"pointerup\", onPointerUp, eventOptions);\n        window.addEventListener(\"pointercancel\", onPointerCancel, eventOptions);\n    };\n    elements.forEach((element) => {\n        if (!isElementKeyboardAccessible(element) &&\n            element.getAttribute(\"tabindex\") === null) {\n            element.tabIndex = 0;\n        }\n        const target = options.useGlobalTarget ? window : element;\n        target.addEventListener(\"pointerdown\", startPress, eventOptions);\n        element.addEventListener(\"focus\", (event) => enableKeyboardPress(event, eventOptions), eventOptions);\n    });\n    return cancelEvents;\n}\n\nexport { press };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}