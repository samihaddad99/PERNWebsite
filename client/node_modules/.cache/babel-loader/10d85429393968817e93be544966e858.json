{"ast":null,"code":"\"use client\";\n\nimport { jsx, Fragment } from 'react/jsx-runtime';\nimport { useMemo, useRef, useState, useContext } from 'react';\nimport { LayoutGroupContext } from '../../context/LayoutGroupContext.mjs';\nimport { useConstant } from '../../utils/use-constant.mjs';\nimport { PresenceChild } from './PresenceChild.mjs';\nimport { usePresence } from './use-presence.mjs';\nimport { onlyElements, getChildKey } from './utils.mjs';\nimport { useIsomorphicLayoutEffect } from '../../utils/use-isomorphic-effect.mjs';\n/**\n * `AnimatePresence` enables the animation of components that have been removed from the tree.\n *\n * When adding/removing more than a single child, every child **must** be given a unique `key` prop.\n *\n * Any `motion` components that have an `exit` property defined will animate out when removed from\n * the tree.\n *\n * ```jsx\n * import { motion, AnimatePresence } from 'framer-motion'\n *\n * export const Items = ({ items }) => (\n *   <AnimatePresence>\n *     {items.map(item => (\n *       <motion.div\n *         key={item.id}\n *         initial={{ opacity: 0 }}\n *         animate={{ opacity: 1 }}\n *         exit={{ opacity: 0 }}\n *       />\n *     ))}\n *   </AnimatePresence>\n * )\n * ```\n *\n * You can sequence exit animations throughout a tree using variants.\n *\n * If a child contains multiple `motion` components with `exit` props, it will only unmount the child\n * once all `motion` components have finished animating out. Likewise, any components using\n * `usePresence` all need to call `safeToRemove`.\n *\n * @public\n */\n\nconst AnimatePresence = _ref => {\n  let {\n    children,\n    custom,\n    initial = true,\n    onExitComplete,\n    presenceAffectsLayout = true,\n    mode = \"sync\",\n    propagate = false,\n    anchorX = \"left\"\n  } = _ref;\n  const [isParentPresent, safeToRemove] = usePresence(propagate);\n  /**\n   * Filter any children that aren't ReactElements. We can only track components\n   * between renders with a props.key.\n   */\n\n  const presentChildren = useMemo(() => onlyElements(children), [children]);\n  /**\n   * Track the keys of the currently rendered children. This is used to\n   * determine which children are exiting.\n   */\n\n  const presentKeys = propagate && !isParentPresent ? [] : presentChildren.map(getChildKey);\n  /**\n   * If `initial={false}` we only want to pass this to components in the first render.\n   */\n\n  const isInitialRender = useRef(true);\n  /**\n   * A ref containing the currently present children. When all exit animations\n   * are complete, we use this to re-render the component with the latest children\n   * *committed* rather than the latest children *rendered*.\n   */\n\n  const pendingPresentChildren = useRef(presentChildren);\n  /**\n   * Track which exiting children have finished animating out.\n   */\n\n  const exitComplete = useConstant(() => new Map());\n  /**\n   * Save children to render as React state. To ensure this component is concurrent-safe,\n   * we check for exiting children via an effect.\n   */\n\n  const [diffedChildren, setDiffedChildren] = useState(presentChildren);\n  const [renderedChildren, setRenderedChildren] = useState(presentChildren);\n  useIsomorphicLayoutEffect(() => {\n    isInitialRender.current = false;\n    pendingPresentChildren.current = presentChildren;\n    /**\n     * Update complete status of exiting children.\n     */\n\n    for (let i = 0; i < renderedChildren.length; i++) {\n      const key = getChildKey(renderedChildren[i]);\n\n      if (!presentKeys.includes(key)) {\n        if (exitComplete.get(key) !== true) {\n          exitComplete.set(key, false);\n        }\n      } else {\n        exitComplete.delete(key);\n      }\n    }\n  }, [renderedChildren, presentKeys.length, presentKeys.join(\"-\")]);\n  const exitingChildren = [];\n\n  if (presentChildren !== diffedChildren) {\n    let nextChildren = [...presentChildren];\n    /**\n     * Loop through all the currently rendered components and decide which\n     * are exiting.\n     */\n\n    for (let i = 0; i < renderedChildren.length; i++) {\n      const child = renderedChildren[i];\n      const key = getChildKey(child);\n\n      if (!presentKeys.includes(key)) {\n        nextChildren.splice(i, 0, child);\n        exitingChildren.push(child);\n      }\n    }\n    /**\n     * If we're in \"wait\" mode, and we have exiting children, we want to\n     * only render these until they've all exited.\n     */\n\n\n    if (mode === \"wait\" && exitingChildren.length) {\n      nextChildren = exitingChildren;\n    }\n\n    setRenderedChildren(onlyElements(nextChildren));\n    setDiffedChildren(presentChildren);\n    /**\n     * Early return to ensure once we've set state with the latest diffed\n     * children, we can immediately re-render.\n     */\n\n    return;\n  }\n\n  if (process.env.NODE_ENV !== \"production\" && mode === \"wait\" && renderedChildren.length > 1) {\n    console.warn(`You're attempting to animate multiple children within AnimatePresence, but its mode is set to \"wait\". This will lead to odd visual behaviour.`);\n  }\n  /**\n   * If we've been provided a forceRender function by the LayoutGroupContext,\n   * we can use it to force a re-render amongst all surrounding components once\n   * all components have finished animating out.\n   */\n\n\n  const {\n    forceRender\n  } = useContext(LayoutGroupContext);\n  return jsx(Fragment, {\n    children: renderedChildren.map(child => {\n      const key = getChildKey(child);\n      const isPresent = propagate && !isParentPresent ? false : presentChildren === renderedChildren || presentKeys.includes(key);\n\n      const onExit = () => {\n        if (exitComplete.has(key)) {\n          exitComplete.set(key, true);\n        } else {\n          return;\n        }\n\n        let isEveryExitComplete = true;\n        exitComplete.forEach(isExitComplete => {\n          if (!isExitComplete) isEveryExitComplete = false;\n        });\n\n        if (isEveryExitComplete) {\n          forceRender === null || forceRender === void 0 ? void 0 : forceRender();\n          setRenderedChildren(pendingPresentChildren.current);\n          propagate && (safeToRemove === null || safeToRemove === void 0 ? void 0 : safeToRemove());\n          onExitComplete && onExitComplete();\n        }\n      };\n\n      return jsx(PresenceChild, {\n        isPresent: isPresent,\n        initial: !isInitialRender.current || initial ? undefined : false,\n        custom: isPresent ? undefined : custom,\n        presenceAffectsLayout: presenceAffectsLayout,\n        mode: mode,\n        onExitComplete: isPresent ? undefined : onExit,\n        anchorX: anchorX,\n        children: child\n      }, key);\n    })\n  });\n};\n\nexport { AnimatePresence };","map":{"version":3,"names":["jsx","Fragment","useMemo","useRef","useState","useContext","LayoutGroupContext","useConstant","PresenceChild","usePresence","onlyElements","getChildKey","useIsomorphicLayoutEffect","AnimatePresence","children","custom","initial","onExitComplete","presenceAffectsLayout","mode","propagate","anchorX","isParentPresent","safeToRemove","presentChildren","presentKeys","map","isInitialRender","pendingPresentChildren","exitComplete","Map","diffedChildren","setDiffedChildren","renderedChildren","setRenderedChildren","current","i","length","key","includes","get","set","delete","join","exitingChildren","nextChildren","child","splice","push","process","env","NODE_ENV","console","warn","forceRender","isPresent","onExit","has","isEveryExitComplete","forEach","isExitComplete","undefined"],"sources":["C:/Users/samih/OneDrive/Desktop/school/website/PERNWebsite/node_modules/framer-motion/dist/es/components/AnimatePresence/index.mjs"],"sourcesContent":["\"use client\";\nimport { jsx, Fragment } from 'react/jsx-runtime';\nimport { useMemo, useRef, useState, useContext } from 'react';\nimport { LayoutGroupContext } from '../../context/LayoutGroupContext.mjs';\nimport { useConstant } from '../../utils/use-constant.mjs';\nimport { PresenceChild } from './PresenceChild.mjs';\nimport { usePresence } from './use-presence.mjs';\nimport { onlyElements, getChildKey } from './utils.mjs';\nimport { useIsomorphicLayoutEffect } from '../../utils/use-isomorphic-effect.mjs';\n\n/**\n * `AnimatePresence` enables the animation of components that have been removed from the tree.\n *\n * When adding/removing more than a single child, every child **must** be given a unique `key` prop.\n *\n * Any `motion` components that have an `exit` property defined will animate out when removed from\n * the tree.\n *\n * ```jsx\n * import { motion, AnimatePresence } from 'framer-motion'\n *\n * export const Items = ({ items }) => (\n *   <AnimatePresence>\n *     {items.map(item => (\n *       <motion.div\n *         key={item.id}\n *         initial={{ opacity: 0 }}\n *         animate={{ opacity: 1 }}\n *         exit={{ opacity: 0 }}\n *       />\n *     ))}\n *   </AnimatePresence>\n * )\n * ```\n *\n * You can sequence exit animations throughout a tree using variants.\n *\n * If a child contains multiple `motion` components with `exit` props, it will only unmount the child\n * once all `motion` components have finished animating out. Likewise, any components using\n * `usePresence` all need to call `safeToRemove`.\n *\n * @public\n */\nconst AnimatePresence = ({ children, custom, initial = true, onExitComplete, presenceAffectsLayout = true, mode = \"sync\", propagate = false, anchorX = \"left\", }) => {\n    const [isParentPresent, safeToRemove] = usePresence(propagate);\n    /**\n     * Filter any children that aren't ReactElements. We can only track components\n     * between renders with a props.key.\n     */\n    const presentChildren = useMemo(() => onlyElements(children), [children]);\n    /**\n     * Track the keys of the currently rendered children. This is used to\n     * determine which children are exiting.\n     */\n    const presentKeys = propagate && !isParentPresent ? [] : presentChildren.map(getChildKey);\n    /**\n     * If `initial={false}` we only want to pass this to components in the first render.\n     */\n    const isInitialRender = useRef(true);\n    /**\n     * A ref containing the currently present children. When all exit animations\n     * are complete, we use this to re-render the component with the latest children\n     * *committed* rather than the latest children *rendered*.\n     */\n    const pendingPresentChildren = useRef(presentChildren);\n    /**\n     * Track which exiting children have finished animating out.\n     */\n    const exitComplete = useConstant(() => new Map());\n    /**\n     * Save children to render as React state. To ensure this component is concurrent-safe,\n     * we check for exiting children via an effect.\n     */\n    const [diffedChildren, setDiffedChildren] = useState(presentChildren);\n    const [renderedChildren, setRenderedChildren] = useState(presentChildren);\n    useIsomorphicLayoutEffect(() => {\n        isInitialRender.current = false;\n        pendingPresentChildren.current = presentChildren;\n        /**\n         * Update complete status of exiting children.\n         */\n        for (let i = 0; i < renderedChildren.length; i++) {\n            const key = getChildKey(renderedChildren[i]);\n            if (!presentKeys.includes(key)) {\n                if (exitComplete.get(key) !== true) {\n                    exitComplete.set(key, false);\n                }\n            }\n            else {\n                exitComplete.delete(key);\n            }\n        }\n    }, [renderedChildren, presentKeys.length, presentKeys.join(\"-\")]);\n    const exitingChildren = [];\n    if (presentChildren !== diffedChildren) {\n        let nextChildren = [...presentChildren];\n        /**\n         * Loop through all the currently rendered components and decide which\n         * are exiting.\n         */\n        for (let i = 0; i < renderedChildren.length; i++) {\n            const child = renderedChildren[i];\n            const key = getChildKey(child);\n            if (!presentKeys.includes(key)) {\n                nextChildren.splice(i, 0, child);\n                exitingChildren.push(child);\n            }\n        }\n        /**\n         * If we're in \"wait\" mode, and we have exiting children, we want to\n         * only render these until they've all exited.\n         */\n        if (mode === \"wait\" && exitingChildren.length) {\n            nextChildren = exitingChildren;\n        }\n        setRenderedChildren(onlyElements(nextChildren));\n        setDiffedChildren(presentChildren);\n        /**\n         * Early return to ensure once we've set state with the latest diffed\n         * children, we can immediately re-render.\n         */\n        return;\n    }\n    if (process.env.NODE_ENV !== \"production\" &&\n        mode === \"wait\" &&\n        renderedChildren.length > 1) {\n        console.warn(`You're attempting to animate multiple children within AnimatePresence, but its mode is set to \"wait\". This will lead to odd visual behaviour.`);\n    }\n    /**\n     * If we've been provided a forceRender function by the LayoutGroupContext,\n     * we can use it to force a re-render amongst all surrounding components once\n     * all components have finished animating out.\n     */\n    const { forceRender } = useContext(LayoutGroupContext);\n    return (jsx(Fragment, { children: renderedChildren.map((child) => {\n            const key = getChildKey(child);\n            const isPresent = propagate && !isParentPresent\n                ? false\n                : presentChildren === renderedChildren ||\n                    presentKeys.includes(key);\n            const onExit = () => {\n                if (exitComplete.has(key)) {\n                    exitComplete.set(key, true);\n                }\n                else {\n                    return;\n                }\n                let isEveryExitComplete = true;\n                exitComplete.forEach((isExitComplete) => {\n                    if (!isExitComplete)\n                        isEveryExitComplete = false;\n                });\n                if (isEveryExitComplete) {\n                    forceRender === null || forceRender === void 0 ? void 0 : forceRender();\n                    setRenderedChildren(pendingPresentChildren.current);\n                    propagate && (safeToRemove === null || safeToRemove === void 0 ? void 0 : safeToRemove());\n                    onExitComplete && onExitComplete();\n                }\n            };\n            return (jsx(PresenceChild, { isPresent: isPresent, initial: !isInitialRender.current || initial\n                    ? undefined\n                    : false, custom: isPresent ? undefined : custom, presenceAffectsLayout: presenceAffectsLayout, mode: mode, onExitComplete: isPresent ? undefined : onExit, anchorX: anchorX, children: child }, key));\n        }) }));\n};\n\nexport { AnimatePresence };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}