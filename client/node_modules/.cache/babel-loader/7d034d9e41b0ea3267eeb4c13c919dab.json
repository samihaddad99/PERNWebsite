{"ast":null,"code":"import { time } from '../frameloop/sync-time.mjs';\nimport { featureDefinitions } from '../motion/features/definitions.mjs';\nimport { createBox } from '../projection/geometry/models.mjs';\nimport { isNumericalString } from '../utils/is-numerical-string.mjs';\nimport { isZeroValueString } from '../utils/is-zero-value-string.mjs';\nimport { initPrefersReducedMotion } from '../utils/reduced-motion/index.mjs';\nimport { hasReducedMotionListener, prefersReducedMotion } from '../utils/reduced-motion/state.mjs';\nimport { SubscriptionManager } from '../utils/subscription-manager.mjs';\nimport { warnOnce } from '../utils/warn-once.mjs';\nimport { motionValue } from '../value/index.mjs';\nimport { complex } from '../value/types/complex/index.mjs';\nimport { isMotionValue } from '../value/utils/is-motion-value.mjs';\nimport { getAnimatableNone } from './dom/value-types/animatable-none.mjs';\nimport { findValueType } from './dom/value-types/find.mjs';\nimport { transformProps } from './html/utils/keys-transform.mjs';\nimport { visualElementStore } from './store.mjs';\nimport { isControllingVariants, isVariantNode } from './utils/is-controlling-variants.mjs';\nimport { KeyframeResolver } from './utils/KeyframesResolver.mjs';\nimport { updateMotionValuesFromProps } from './utils/motion-values.mjs';\nimport { resolveVariantFromProps } from './utils/resolve-variants.mjs';\nimport { frame, cancelFrame } from '../frameloop/frame.mjs';\nconst propEventHandlers = [\"AnimationStart\", \"AnimationComplete\", \"Update\", \"BeforeLayoutMeasure\", \"LayoutMeasure\", \"LayoutAnimationStart\", \"LayoutAnimationComplete\"];\n/**\n * A VisualElement is an imperative abstraction around UI elements such as\n * HTMLElement, SVGElement, Three.Object3D etc.\n */\n\nclass VisualElement {\n  /**\n   * This method takes React props and returns found MotionValues. For example, HTML\n   * MotionValues will be found within the style prop, whereas for Three.js within attribute arrays.\n   *\n   * This isn't an abstract method as it needs calling in the constructor, but it is\n   * intended to be one.\n   */\n  scrapeMotionValuesFromProps(_props, _prevProps, _visualElement) {\n    return {};\n  }\n\n  constructor(_ref) {\n    let {\n      parent,\n      props,\n      presenceContext,\n      reducedMotionConfig,\n      blockInitialAnimation,\n      visualState\n    } = _ref;\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    /**\n     * A reference to the current underlying Instance, e.g. a HTMLElement\n     * or Three.Mesh etc.\n     */\n    this.current = null;\n    /**\n     * A set containing references to this VisualElement's children.\n     */\n\n    this.children = new Set();\n    /**\n     * Determine what role this visual element should take in the variant tree.\n     */\n\n    this.isVariantNode = false;\n    this.isControllingVariants = false;\n    /**\n     * Decides whether this VisualElement should animate in reduced motion\n     * mode.\n     *\n     * TODO: This is currently set on every individual VisualElement but feels\n     * like it could be set globally.\n     */\n\n    this.shouldReduceMotion = null;\n    /**\n     * A map of all motion values attached to this visual element. Motion\n     * values are source of truth for any given animated value. A motion\n     * value might be provided externally by the component via props.\n     */\n\n    this.values = new Map();\n    this.KeyframeResolver = KeyframeResolver;\n    /**\n     * Cleanup functions for active features (hover/tap/exit etc)\n     */\n\n    this.features = {};\n    /**\n     * A map of every subscription that binds the provided or generated\n     * motion values onChange listeners to this visual element.\n     */\n\n    this.valueSubscriptions = new Map();\n    /**\n     * A reference to the previously-provided motion values as returned\n     * from scrapeMotionValuesFromProps. We use the keys in here to determine\n     * if any motion values need to be removed after props are updated.\n     */\n\n    this.prevMotionValues = {};\n    /**\n     * An object containing a SubscriptionManager for each active event.\n     */\n\n    this.events = {};\n    /**\n     * An object containing an unsubscribe function for each prop event subscription.\n     * For example, every \"Update\" event can have multiple subscribers via\n     * VisualElement.on(), but only one of those can be defined via the onUpdate prop.\n     */\n\n    this.propEventSubscriptions = {};\n\n    this.notifyUpdate = () => this.notify(\"Update\", this.latestValues);\n\n    this.render = () => {\n      if (!this.current) return;\n      this.triggerBuild();\n      this.renderInstance(this.current, this.renderState, this.props.style, this.projection);\n    };\n\n    this.renderScheduledAt = 0.0;\n\n    this.scheduleRender = () => {\n      const now = time.now();\n\n      if (this.renderScheduledAt < now) {\n        this.renderScheduledAt = now;\n        frame.render(this.render, false, true);\n      }\n    };\n\n    const {\n      latestValues,\n      renderState,\n      onUpdate\n    } = visualState;\n    this.onUpdate = onUpdate;\n    this.latestValues = latestValues;\n    this.baseTarget = { ...latestValues\n    };\n    this.initialValues = props.initial ? { ...latestValues\n    } : {};\n    this.renderState = renderState;\n    this.parent = parent;\n    this.props = props;\n    this.presenceContext = presenceContext;\n    this.depth = parent ? parent.depth + 1 : 0;\n    this.reducedMotionConfig = reducedMotionConfig;\n    this.options = options;\n    this.blockInitialAnimation = Boolean(blockInitialAnimation);\n    this.isControllingVariants = isControllingVariants(props);\n    this.isVariantNode = isVariantNode(props);\n\n    if (this.isVariantNode) {\n      this.variantChildren = new Set();\n    }\n\n    this.manuallyAnimateOnMount = Boolean(parent && parent.current);\n    /**\n     * Any motion values that are provided to the element when created\n     * aren't yet bound to the element, as this would technically be impure.\n     * However, we iterate through the motion values and set them to the\n     * initial values for this component.\n     *\n     * TODO: This is impure and we should look at changing this to run on mount.\n     * Doing so will break some tests but this isn't necessarily a breaking change,\n     * more a reflection of the test.\n     */\n\n    const {\n      willChange,\n      ...initialMotionValues\n    } = this.scrapeMotionValuesFromProps(props, {}, this);\n\n    for (const key in initialMotionValues) {\n      const value = initialMotionValues[key];\n\n      if (latestValues[key] !== undefined && isMotionValue(value)) {\n        value.set(latestValues[key], false);\n      }\n    }\n  }\n\n  mount(instance) {\n    this.current = instance;\n    visualElementStore.set(instance, this);\n\n    if (this.projection && !this.projection.instance) {\n      this.projection.mount(instance);\n    }\n\n    if (this.parent && this.isVariantNode && !this.isControllingVariants) {\n      this.removeFromVariantTree = this.parent.addVariantChild(this);\n    }\n\n    this.values.forEach((value, key) => this.bindToMotionValue(key, value));\n\n    if (!hasReducedMotionListener.current) {\n      initPrefersReducedMotion();\n    }\n\n    this.shouldReduceMotion = this.reducedMotionConfig === \"never\" ? false : this.reducedMotionConfig === \"always\" ? true : prefersReducedMotion.current;\n\n    if (process.env.NODE_ENV !== \"production\") {\n      warnOnce(this.shouldReduceMotion !== true, \"You have Reduced Motion enabled on your device. Animations may not appear as expected.\");\n    }\n\n    if (this.parent) this.parent.children.add(this);\n    this.update(this.props, this.presenceContext);\n  }\n\n  unmount() {\n    visualElementStore.delete(this.current);\n    this.projection && this.projection.unmount();\n    cancelFrame(this.notifyUpdate);\n    cancelFrame(this.render);\n    this.valueSubscriptions.forEach(remove => remove());\n    this.valueSubscriptions.clear();\n    this.removeFromVariantTree && this.removeFromVariantTree();\n    this.parent && this.parent.children.delete(this);\n\n    for (const key in this.events) {\n      this.events[key].clear();\n    }\n\n    for (const key in this.features) {\n      const feature = this.features[key];\n\n      if (feature) {\n        feature.unmount();\n        feature.isMounted = false;\n      }\n    }\n\n    this.current = null;\n  }\n\n  bindToMotionValue(key, value) {\n    if (this.valueSubscriptions.has(key)) {\n      this.valueSubscriptions.get(key)();\n    }\n\n    const valueIsTransform = transformProps.has(key);\n    const removeOnChange = value.on(\"change\", latestValue => {\n      this.latestValues[key] = latestValue;\n      this.props.onUpdate && frame.preRender(this.notifyUpdate);\n\n      if (valueIsTransform && this.projection) {\n        this.projection.isTransformDirty = true;\n      }\n    });\n    const removeOnRenderRequest = value.on(\"renderRequest\", this.scheduleRender);\n    let removeSyncCheck;\n\n    if (window.MotionCheckAppearSync) {\n      removeSyncCheck = window.MotionCheckAppearSync(this, key, value);\n    }\n\n    this.valueSubscriptions.set(key, () => {\n      removeOnChange();\n      removeOnRenderRequest();\n      if (removeSyncCheck) removeSyncCheck();\n      if (value.owner) value.stop();\n    });\n  }\n\n  sortNodePosition(other) {\n    /**\n     * If these nodes aren't even of the same type we can't compare their depth.\n     */\n    if (!this.current || !this.sortInstanceNodePosition || this.type !== other.type) {\n      return 0;\n    }\n\n    return this.sortInstanceNodePosition(this.current, other.current);\n  }\n\n  updateFeatures() {\n    let key = \"animation\";\n\n    for (key in featureDefinitions) {\n      const featureDefinition = featureDefinitions[key];\n      if (!featureDefinition) continue;\n      const {\n        isEnabled,\n        Feature: FeatureConstructor\n      } = featureDefinition;\n      /**\n       * If this feature is enabled but not active, make a new instance.\n       */\n\n      if (!this.features[key] && FeatureConstructor && isEnabled(this.props)) {\n        this.features[key] = new FeatureConstructor(this);\n      }\n      /**\n       * If we have a feature, mount or update it.\n       */\n\n\n      if (this.features[key]) {\n        const feature = this.features[key];\n\n        if (feature.isMounted) {\n          feature.update();\n        } else {\n          feature.mount();\n          feature.isMounted = true;\n        }\n      }\n    }\n  }\n\n  triggerBuild() {\n    this.build(this.renderState, this.latestValues, this.props);\n  }\n  /**\n   * Measure the current viewport box with or without transforms.\n   * Only measures axis-aligned boxes, rotate and skew must be manually\n   * removed with a re-render to work.\n   */\n\n\n  measureViewportBox() {\n    return this.current ? this.measureInstanceViewportBox(this.current, this.props) : createBox();\n  }\n\n  getStaticValue(key) {\n    return this.latestValues[key];\n  }\n\n  setStaticValue(key, value) {\n    this.latestValues[key] = value;\n  }\n  /**\n   * Update the provided props. Ensure any newly-added motion values are\n   * added to our map, old ones removed, and listeners updated.\n   */\n\n\n  update(props, presenceContext) {\n    if (props.transformTemplate || this.props.transformTemplate) {\n      this.scheduleRender();\n    }\n\n    this.prevProps = this.props;\n    this.props = props;\n    this.prevPresenceContext = this.presenceContext;\n    this.presenceContext = presenceContext;\n    /**\n     * Update prop event handlers ie onAnimationStart, onAnimationComplete\n     */\n\n    for (let i = 0; i < propEventHandlers.length; i++) {\n      const key = propEventHandlers[i];\n\n      if (this.propEventSubscriptions[key]) {\n        this.propEventSubscriptions[key]();\n        delete this.propEventSubscriptions[key];\n      }\n\n      const listenerName = \"on\" + key;\n      const listener = props[listenerName];\n\n      if (listener) {\n        this.propEventSubscriptions[key] = this.on(key, listener);\n      }\n    }\n\n    this.prevMotionValues = updateMotionValuesFromProps(this, this.scrapeMotionValuesFromProps(props, this.prevProps, this), this.prevMotionValues);\n\n    if (this.handleChildMotionValue) {\n      this.handleChildMotionValue();\n    }\n\n    this.onUpdate && this.onUpdate(this);\n  }\n\n  getProps() {\n    return this.props;\n  }\n  /**\n   * Returns the variant definition with a given name.\n   */\n\n\n  getVariant(name) {\n    return this.props.variants ? this.props.variants[name] : undefined;\n  }\n  /**\n   * Returns the defined default transition on this component.\n   */\n\n\n  getDefaultTransition() {\n    return this.props.transition;\n  }\n\n  getTransformPagePoint() {\n    return this.props.transformPagePoint;\n  }\n\n  getClosestVariantNode() {\n    return this.isVariantNode ? this : this.parent ? this.parent.getClosestVariantNode() : undefined;\n  }\n  /**\n   * Add a child visual element to our set of children.\n   */\n\n\n  addVariantChild(child) {\n    const closestVariantNode = this.getClosestVariantNode();\n\n    if (closestVariantNode) {\n      closestVariantNode.variantChildren && closestVariantNode.variantChildren.add(child);\n      return () => closestVariantNode.variantChildren.delete(child);\n    }\n  }\n  /**\n   * Add a motion value and bind it to this visual element.\n   */\n\n\n  addValue(key, value) {\n    // Remove existing value if it exists\n    const existingValue = this.values.get(key);\n\n    if (value !== existingValue) {\n      if (existingValue) this.removeValue(key);\n      this.bindToMotionValue(key, value);\n      this.values.set(key, value);\n      this.latestValues[key] = value.get();\n    }\n  }\n  /**\n   * Remove a motion value and unbind any active subscriptions.\n   */\n\n\n  removeValue(key) {\n    this.values.delete(key);\n    const unsubscribe = this.valueSubscriptions.get(key);\n\n    if (unsubscribe) {\n      unsubscribe();\n      this.valueSubscriptions.delete(key);\n    }\n\n    delete this.latestValues[key];\n    this.removeValueFromRenderState(key, this.renderState);\n  }\n  /**\n   * Check whether we have a motion value for this key\n   */\n\n\n  hasValue(key) {\n    return this.values.has(key);\n  }\n\n  getValue(key, defaultValue) {\n    if (this.props.values && this.props.values[key]) {\n      return this.props.values[key];\n    }\n\n    let value = this.values.get(key);\n\n    if (value === undefined && defaultValue !== undefined) {\n      value = motionValue(defaultValue === null ? undefined : defaultValue, {\n        owner: this\n      });\n      this.addValue(key, value);\n    }\n\n    return value;\n  }\n  /**\n   * If we're trying to animate to a previously unencountered value,\n   * we need to check for it in our state and as a last resort read it\n   * directly from the instance (which might have performance implications).\n   */\n\n\n  readValue(key, target) {\n    var _a;\n\n    let value = this.latestValues[key] !== undefined || !this.current ? this.latestValues[key] : (_a = this.getBaseTargetFromProps(this.props, key)) !== null && _a !== void 0 ? _a : this.readValueFromInstance(this.current, key, this.options);\n\n    if (value !== undefined && value !== null) {\n      if (typeof value === \"string\" && (isNumericalString(value) || isZeroValueString(value))) {\n        // If this is a number read as a string, ie \"0\" or \"200\", convert it to a number\n        value = parseFloat(value);\n      } else if (!findValueType(value) && complex.test(target)) {\n        value = getAnimatableNone(key, target);\n      }\n\n      this.setBaseTarget(key, isMotionValue(value) ? value.get() : value);\n    }\n\n    return isMotionValue(value) ? value.get() : value;\n  }\n  /**\n   * Set the base target to later animate back to. This is currently\n   * only hydrated on creation and when we first read a value.\n   */\n\n\n  setBaseTarget(key, value) {\n    this.baseTarget[key] = value;\n  }\n  /**\n   * Find the base target for a value thats been removed from all animation\n   * props.\n   */\n\n\n  getBaseTarget(key) {\n    var _a;\n\n    const {\n      initial\n    } = this.props;\n    let valueFromInitial;\n\n    if (typeof initial === \"string\" || typeof initial === \"object\") {\n      const variant = resolveVariantFromProps(this.props, initial, (_a = this.presenceContext) === null || _a === void 0 ? void 0 : _a.custom);\n\n      if (variant) {\n        valueFromInitial = variant[key];\n      }\n    }\n    /**\n     * If this value still exists in the current initial variant, read that.\n     */\n\n\n    if (initial && valueFromInitial !== undefined) {\n      return valueFromInitial;\n    }\n    /**\n     * Alternatively, if this VisualElement config has defined a getBaseTarget\n     * so we can read the value from an alternative source, try that.\n     */\n\n\n    const target = this.getBaseTargetFromProps(this.props, key);\n    if (target !== undefined && !isMotionValue(target)) return target;\n    /**\n     * If the value was initially defined on initial, but it doesn't any more,\n     * return undefined. Otherwise return the value as initially read from the DOM.\n     */\n\n    return this.initialValues[key] !== undefined && valueFromInitial === undefined ? undefined : this.baseTarget[key];\n  }\n\n  on(eventName, callback) {\n    if (!this.events[eventName]) {\n      this.events[eventName] = new SubscriptionManager();\n    }\n\n    return this.events[eventName].add(callback);\n  }\n\n  notify(eventName) {\n    if (this.events[eventName]) {\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      this.events[eventName].notify(...args);\n    }\n  }\n\n}\n\nexport { VisualElement };","map":{"version":3,"names":["time","featureDefinitions","createBox","isNumericalString","isZeroValueString","initPrefersReducedMotion","hasReducedMotionListener","prefersReducedMotion","SubscriptionManager","warnOnce","motionValue","complex","isMotionValue","getAnimatableNone","findValueType","transformProps","visualElementStore","isControllingVariants","isVariantNode","KeyframeResolver","updateMotionValuesFromProps","resolveVariantFromProps","frame","cancelFrame","propEventHandlers","VisualElement","scrapeMotionValuesFromProps","_props","_prevProps","_visualElement","constructor","parent","props","presenceContext","reducedMotionConfig","blockInitialAnimation","visualState","options","current","children","Set","shouldReduceMotion","values","Map","features","valueSubscriptions","prevMotionValues","events","propEventSubscriptions","notifyUpdate","notify","latestValues","render","triggerBuild","renderInstance","renderState","style","projection","renderScheduledAt","scheduleRender","now","onUpdate","baseTarget","initialValues","initial","depth","Boolean","variantChildren","manuallyAnimateOnMount","willChange","initialMotionValues","key","value","undefined","set","mount","instance","removeFromVariantTree","addVariantChild","forEach","bindToMotionValue","process","env","NODE_ENV","add","update","unmount","delete","remove","clear","feature","isMounted","has","get","valueIsTransform","removeOnChange","on","latestValue","preRender","isTransformDirty","removeOnRenderRequest","removeSyncCheck","window","MotionCheckAppearSync","owner","stop","sortNodePosition","other","sortInstanceNodePosition","type","updateFeatures","featureDefinition","isEnabled","Feature","FeatureConstructor","build","measureViewportBox","measureInstanceViewportBox","getStaticValue","setStaticValue","transformTemplate","prevProps","prevPresenceContext","i","length","listenerName","listener","handleChildMotionValue","getProps","getVariant","name","variants","getDefaultTransition","transition","getTransformPagePoint","transformPagePoint","getClosestVariantNode","child","closestVariantNode","addValue","existingValue","removeValue","unsubscribe","removeValueFromRenderState","hasValue","getValue","defaultValue","readValue","target","_a","getBaseTargetFromProps","readValueFromInstance","parseFloat","test","setBaseTarget","getBaseTarget","valueFromInitial","variant","custom","eventName","callback","args"],"sources":["C:/Users/samih/OneDrive/Desktop/school/website/PERNWebsite/node_modules/framer-motion/dist/es/render/VisualElement.mjs"],"sourcesContent":["import { time } from '../frameloop/sync-time.mjs';\nimport { featureDefinitions } from '../motion/features/definitions.mjs';\nimport { createBox } from '../projection/geometry/models.mjs';\nimport { isNumericalString } from '../utils/is-numerical-string.mjs';\nimport { isZeroValueString } from '../utils/is-zero-value-string.mjs';\nimport { initPrefersReducedMotion } from '../utils/reduced-motion/index.mjs';\nimport { hasReducedMotionListener, prefersReducedMotion } from '../utils/reduced-motion/state.mjs';\nimport { SubscriptionManager } from '../utils/subscription-manager.mjs';\nimport { warnOnce } from '../utils/warn-once.mjs';\nimport { motionValue } from '../value/index.mjs';\nimport { complex } from '../value/types/complex/index.mjs';\nimport { isMotionValue } from '../value/utils/is-motion-value.mjs';\nimport { getAnimatableNone } from './dom/value-types/animatable-none.mjs';\nimport { findValueType } from './dom/value-types/find.mjs';\nimport { transformProps } from './html/utils/keys-transform.mjs';\nimport { visualElementStore } from './store.mjs';\nimport { isControllingVariants, isVariantNode } from './utils/is-controlling-variants.mjs';\nimport { KeyframeResolver } from './utils/KeyframesResolver.mjs';\nimport { updateMotionValuesFromProps } from './utils/motion-values.mjs';\nimport { resolveVariantFromProps } from './utils/resolve-variants.mjs';\nimport { frame, cancelFrame } from '../frameloop/frame.mjs';\n\nconst propEventHandlers = [\n    \"AnimationStart\",\n    \"AnimationComplete\",\n    \"Update\",\n    \"BeforeLayoutMeasure\",\n    \"LayoutMeasure\",\n    \"LayoutAnimationStart\",\n    \"LayoutAnimationComplete\",\n];\n/**\n * A VisualElement is an imperative abstraction around UI elements such as\n * HTMLElement, SVGElement, Three.Object3D etc.\n */\nclass VisualElement {\n    /**\n     * This method takes React props and returns found MotionValues. For example, HTML\n     * MotionValues will be found within the style prop, whereas for Three.js within attribute arrays.\n     *\n     * This isn't an abstract method as it needs calling in the constructor, but it is\n     * intended to be one.\n     */\n    scrapeMotionValuesFromProps(_props, _prevProps, _visualElement) {\n        return {};\n    }\n    constructor({ parent, props, presenceContext, reducedMotionConfig, blockInitialAnimation, visualState, }, options = {}) {\n        /**\n         * A reference to the current underlying Instance, e.g. a HTMLElement\n         * or Three.Mesh etc.\n         */\n        this.current = null;\n        /**\n         * A set containing references to this VisualElement's children.\n         */\n        this.children = new Set();\n        /**\n         * Determine what role this visual element should take in the variant tree.\n         */\n        this.isVariantNode = false;\n        this.isControllingVariants = false;\n        /**\n         * Decides whether this VisualElement should animate in reduced motion\n         * mode.\n         *\n         * TODO: This is currently set on every individual VisualElement but feels\n         * like it could be set globally.\n         */\n        this.shouldReduceMotion = null;\n        /**\n         * A map of all motion values attached to this visual element. Motion\n         * values are source of truth for any given animated value. A motion\n         * value might be provided externally by the component via props.\n         */\n        this.values = new Map();\n        this.KeyframeResolver = KeyframeResolver;\n        /**\n         * Cleanup functions for active features (hover/tap/exit etc)\n         */\n        this.features = {};\n        /**\n         * A map of every subscription that binds the provided or generated\n         * motion values onChange listeners to this visual element.\n         */\n        this.valueSubscriptions = new Map();\n        /**\n         * A reference to the previously-provided motion values as returned\n         * from scrapeMotionValuesFromProps. We use the keys in here to determine\n         * if any motion values need to be removed after props are updated.\n         */\n        this.prevMotionValues = {};\n        /**\n         * An object containing a SubscriptionManager for each active event.\n         */\n        this.events = {};\n        /**\n         * An object containing an unsubscribe function for each prop event subscription.\n         * For example, every \"Update\" event can have multiple subscribers via\n         * VisualElement.on(), but only one of those can be defined via the onUpdate prop.\n         */\n        this.propEventSubscriptions = {};\n        this.notifyUpdate = () => this.notify(\"Update\", this.latestValues);\n        this.render = () => {\n            if (!this.current)\n                return;\n            this.triggerBuild();\n            this.renderInstance(this.current, this.renderState, this.props.style, this.projection);\n        };\n        this.renderScheduledAt = 0.0;\n        this.scheduleRender = () => {\n            const now = time.now();\n            if (this.renderScheduledAt < now) {\n                this.renderScheduledAt = now;\n                frame.render(this.render, false, true);\n            }\n        };\n        const { latestValues, renderState, onUpdate } = visualState;\n        this.onUpdate = onUpdate;\n        this.latestValues = latestValues;\n        this.baseTarget = { ...latestValues };\n        this.initialValues = props.initial ? { ...latestValues } : {};\n        this.renderState = renderState;\n        this.parent = parent;\n        this.props = props;\n        this.presenceContext = presenceContext;\n        this.depth = parent ? parent.depth + 1 : 0;\n        this.reducedMotionConfig = reducedMotionConfig;\n        this.options = options;\n        this.blockInitialAnimation = Boolean(blockInitialAnimation);\n        this.isControllingVariants = isControllingVariants(props);\n        this.isVariantNode = isVariantNode(props);\n        if (this.isVariantNode) {\n            this.variantChildren = new Set();\n        }\n        this.manuallyAnimateOnMount = Boolean(parent && parent.current);\n        /**\n         * Any motion values that are provided to the element when created\n         * aren't yet bound to the element, as this would technically be impure.\n         * However, we iterate through the motion values and set them to the\n         * initial values for this component.\n         *\n         * TODO: This is impure and we should look at changing this to run on mount.\n         * Doing so will break some tests but this isn't necessarily a breaking change,\n         * more a reflection of the test.\n         */\n        const { willChange, ...initialMotionValues } = this.scrapeMotionValuesFromProps(props, {}, this);\n        for (const key in initialMotionValues) {\n            const value = initialMotionValues[key];\n            if (latestValues[key] !== undefined && isMotionValue(value)) {\n                value.set(latestValues[key], false);\n            }\n        }\n    }\n    mount(instance) {\n        this.current = instance;\n        visualElementStore.set(instance, this);\n        if (this.projection && !this.projection.instance) {\n            this.projection.mount(instance);\n        }\n        if (this.parent && this.isVariantNode && !this.isControllingVariants) {\n            this.removeFromVariantTree = this.parent.addVariantChild(this);\n        }\n        this.values.forEach((value, key) => this.bindToMotionValue(key, value));\n        if (!hasReducedMotionListener.current) {\n            initPrefersReducedMotion();\n        }\n        this.shouldReduceMotion =\n            this.reducedMotionConfig === \"never\"\n                ? false\n                : this.reducedMotionConfig === \"always\"\n                    ? true\n                    : prefersReducedMotion.current;\n        if (process.env.NODE_ENV !== \"production\") {\n            warnOnce(this.shouldReduceMotion !== true, \"You have Reduced Motion enabled on your device. Animations may not appear as expected.\");\n        }\n        if (this.parent)\n            this.parent.children.add(this);\n        this.update(this.props, this.presenceContext);\n    }\n    unmount() {\n        visualElementStore.delete(this.current);\n        this.projection && this.projection.unmount();\n        cancelFrame(this.notifyUpdate);\n        cancelFrame(this.render);\n        this.valueSubscriptions.forEach((remove) => remove());\n        this.valueSubscriptions.clear();\n        this.removeFromVariantTree && this.removeFromVariantTree();\n        this.parent && this.parent.children.delete(this);\n        for (const key in this.events) {\n            this.events[key].clear();\n        }\n        for (const key in this.features) {\n            const feature = this.features[key];\n            if (feature) {\n                feature.unmount();\n                feature.isMounted = false;\n            }\n        }\n        this.current = null;\n    }\n    bindToMotionValue(key, value) {\n        if (this.valueSubscriptions.has(key)) {\n            this.valueSubscriptions.get(key)();\n        }\n        const valueIsTransform = transformProps.has(key);\n        const removeOnChange = value.on(\"change\", (latestValue) => {\n            this.latestValues[key] = latestValue;\n            this.props.onUpdate && frame.preRender(this.notifyUpdate);\n            if (valueIsTransform && this.projection) {\n                this.projection.isTransformDirty = true;\n            }\n        });\n        const removeOnRenderRequest = value.on(\"renderRequest\", this.scheduleRender);\n        let removeSyncCheck;\n        if (window.MotionCheckAppearSync) {\n            removeSyncCheck = window.MotionCheckAppearSync(this, key, value);\n        }\n        this.valueSubscriptions.set(key, () => {\n            removeOnChange();\n            removeOnRenderRequest();\n            if (removeSyncCheck)\n                removeSyncCheck();\n            if (value.owner)\n                value.stop();\n        });\n    }\n    sortNodePosition(other) {\n        /**\n         * If these nodes aren't even of the same type we can't compare their depth.\n         */\n        if (!this.current ||\n            !this.sortInstanceNodePosition ||\n            this.type !== other.type) {\n            return 0;\n        }\n        return this.sortInstanceNodePosition(this.current, other.current);\n    }\n    updateFeatures() {\n        let key = \"animation\";\n        for (key in featureDefinitions) {\n            const featureDefinition = featureDefinitions[key];\n            if (!featureDefinition)\n                continue;\n            const { isEnabled, Feature: FeatureConstructor } = featureDefinition;\n            /**\n             * If this feature is enabled but not active, make a new instance.\n             */\n            if (!this.features[key] &&\n                FeatureConstructor &&\n                isEnabled(this.props)) {\n                this.features[key] = new FeatureConstructor(this);\n            }\n            /**\n             * If we have a feature, mount or update it.\n             */\n            if (this.features[key]) {\n                const feature = this.features[key];\n                if (feature.isMounted) {\n                    feature.update();\n                }\n                else {\n                    feature.mount();\n                    feature.isMounted = true;\n                }\n            }\n        }\n    }\n    triggerBuild() {\n        this.build(this.renderState, this.latestValues, this.props);\n    }\n    /**\n     * Measure the current viewport box with or without transforms.\n     * Only measures axis-aligned boxes, rotate and skew must be manually\n     * removed with a re-render to work.\n     */\n    measureViewportBox() {\n        return this.current\n            ? this.measureInstanceViewportBox(this.current, this.props)\n            : createBox();\n    }\n    getStaticValue(key) {\n        return this.latestValues[key];\n    }\n    setStaticValue(key, value) {\n        this.latestValues[key] = value;\n    }\n    /**\n     * Update the provided props. Ensure any newly-added motion values are\n     * added to our map, old ones removed, and listeners updated.\n     */\n    update(props, presenceContext) {\n        if (props.transformTemplate || this.props.transformTemplate) {\n            this.scheduleRender();\n        }\n        this.prevProps = this.props;\n        this.props = props;\n        this.prevPresenceContext = this.presenceContext;\n        this.presenceContext = presenceContext;\n        /**\n         * Update prop event handlers ie onAnimationStart, onAnimationComplete\n         */\n        for (let i = 0; i < propEventHandlers.length; i++) {\n            const key = propEventHandlers[i];\n            if (this.propEventSubscriptions[key]) {\n                this.propEventSubscriptions[key]();\n                delete this.propEventSubscriptions[key];\n            }\n            const listenerName = (\"on\" + key);\n            const listener = props[listenerName];\n            if (listener) {\n                this.propEventSubscriptions[key] = this.on(key, listener);\n            }\n        }\n        this.prevMotionValues = updateMotionValuesFromProps(this, this.scrapeMotionValuesFromProps(props, this.prevProps, this), this.prevMotionValues);\n        if (this.handleChildMotionValue) {\n            this.handleChildMotionValue();\n        }\n        this.onUpdate && this.onUpdate(this);\n    }\n    getProps() {\n        return this.props;\n    }\n    /**\n     * Returns the variant definition with a given name.\n     */\n    getVariant(name) {\n        return this.props.variants ? this.props.variants[name] : undefined;\n    }\n    /**\n     * Returns the defined default transition on this component.\n     */\n    getDefaultTransition() {\n        return this.props.transition;\n    }\n    getTransformPagePoint() {\n        return this.props.transformPagePoint;\n    }\n    getClosestVariantNode() {\n        return this.isVariantNode\n            ? this\n            : this.parent\n                ? this.parent.getClosestVariantNode()\n                : undefined;\n    }\n    /**\n     * Add a child visual element to our set of children.\n     */\n    addVariantChild(child) {\n        const closestVariantNode = this.getClosestVariantNode();\n        if (closestVariantNode) {\n            closestVariantNode.variantChildren &&\n                closestVariantNode.variantChildren.add(child);\n            return () => closestVariantNode.variantChildren.delete(child);\n        }\n    }\n    /**\n     * Add a motion value and bind it to this visual element.\n     */\n    addValue(key, value) {\n        // Remove existing value if it exists\n        const existingValue = this.values.get(key);\n        if (value !== existingValue) {\n            if (existingValue)\n                this.removeValue(key);\n            this.bindToMotionValue(key, value);\n            this.values.set(key, value);\n            this.latestValues[key] = value.get();\n        }\n    }\n    /**\n     * Remove a motion value and unbind any active subscriptions.\n     */\n    removeValue(key) {\n        this.values.delete(key);\n        const unsubscribe = this.valueSubscriptions.get(key);\n        if (unsubscribe) {\n            unsubscribe();\n            this.valueSubscriptions.delete(key);\n        }\n        delete this.latestValues[key];\n        this.removeValueFromRenderState(key, this.renderState);\n    }\n    /**\n     * Check whether we have a motion value for this key\n     */\n    hasValue(key) {\n        return this.values.has(key);\n    }\n    getValue(key, defaultValue) {\n        if (this.props.values && this.props.values[key]) {\n            return this.props.values[key];\n        }\n        let value = this.values.get(key);\n        if (value === undefined && defaultValue !== undefined) {\n            value = motionValue(defaultValue === null ? undefined : defaultValue, { owner: this });\n            this.addValue(key, value);\n        }\n        return value;\n    }\n    /**\n     * If we're trying to animate to a previously unencountered value,\n     * we need to check for it in our state and as a last resort read it\n     * directly from the instance (which might have performance implications).\n     */\n    readValue(key, target) {\n        var _a;\n        let value = this.latestValues[key] !== undefined || !this.current\n            ? this.latestValues[key]\n            : (_a = this.getBaseTargetFromProps(this.props, key)) !== null && _a !== void 0 ? _a : this.readValueFromInstance(this.current, key, this.options);\n        if (value !== undefined && value !== null) {\n            if (typeof value === \"string\" &&\n                (isNumericalString(value) || isZeroValueString(value))) {\n                // If this is a number read as a string, ie \"0\" or \"200\", convert it to a number\n                value = parseFloat(value);\n            }\n            else if (!findValueType(value) && complex.test(target)) {\n                value = getAnimatableNone(key, target);\n            }\n            this.setBaseTarget(key, isMotionValue(value) ? value.get() : value);\n        }\n        return isMotionValue(value) ? value.get() : value;\n    }\n    /**\n     * Set the base target to later animate back to. This is currently\n     * only hydrated on creation and when we first read a value.\n     */\n    setBaseTarget(key, value) {\n        this.baseTarget[key] = value;\n    }\n    /**\n     * Find the base target for a value thats been removed from all animation\n     * props.\n     */\n    getBaseTarget(key) {\n        var _a;\n        const { initial } = this.props;\n        let valueFromInitial;\n        if (typeof initial === \"string\" || typeof initial === \"object\") {\n            const variant = resolveVariantFromProps(this.props, initial, (_a = this.presenceContext) === null || _a === void 0 ? void 0 : _a.custom);\n            if (variant) {\n                valueFromInitial = variant[key];\n            }\n        }\n        /**\n         * If this value still exists in the current initial variant, read that.\n         */\n        if (initial && valueFromInitial !== undefined) {\n            return valueFromInitial;\n        }\n        /**\n         * Alternatively, if this VisualElement config has defined a getBaseTarget\n         * so we can read the value from an alternative source, try that.\n         */\n        const target = this.getBaseTargetFromProps(this.props, key);\n        if (target !== undefined && !isMotionValue(target))\n            return target;\n        /**\n         * If the value was initially defined on initial, but it doesn't any more,\n         * return undefined. Otherwise return the value as initially read from the DOM.\n         */\n        return this.initialValues[key] !== undefined &&\n            valueFromInitial === undefined\n            ? undefined\n            : this.baseTarget[key];\n    }\n    on(eventName, callback) {\n        if (!this.events[eventName]) {\n            this.events[eventName] = new SubscriptionManager();\n        }\n        return this.events[eventName].add(callback);\n    }\n    notify(eventName, ...args) {\n        if (this.events[eventName]) {\n            this.events[eventName].notify(...args);\n        }\n    }\n}\n\nexport { VisualElement };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}