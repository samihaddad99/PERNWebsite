{"ast":null,"code":"import { color } from '../color/index.mjs';\nimport { colorRegex } from '../utils/color-regex.mjs';\nimport { floatRegex } from '../utils/float-regex.mjs';\nimport { sanitize } from '../utils/sanitize.mjs';\n\nfunction test(v) {\n  var _a, _b;\n\n  return isNaN(v) && typeof v === \"string\" && (((_a = v.match(floatRegex)) === null || _a === void 0 ? void 0 : _a.length) || 0) + (((_b = v.match(colorRegex)) === null || _b === void 0 ? void 0 : _b.length) || 0) > 0;\n}\n\nconst NUMBER_TOKEN = \"number\";\nconst COLOR_TOKEN = \"color\";\nconst VAR_TOKEN = \"var\";\nconst VAR_FUNCTION_TOKEN = \"var(\";\nconst SPLIT_TOKEN = \"${}\"; // this regex consists of the `singleCssVariableRegex|rgbHSLValueRegex|digitRegex`\n\nconst complexRegex = /var\\s*\\(\\s*--(?:[\\w-]+\\s*|[\\w-]+\\s*,(?:\\s*[^)(\\s]|\\s*\\((?:[^)(]|\\([^)(]*\\))*\\))+\\s*)\\)|#[\\da-f]{3,8}|(?:rgb|hsl)a?\\((?:-?[\\d.]+%?[,\\s]+){2}-?[\\d.]+%?\\s*(?:[,/]\\s*)?(?:\\b\\d+(?:\\.\\d+)?|\\.\\d+)?%?\\)|-?(?:\\d+(?:\\.\\d+)?|\\.\\d+)/giu;\n\nfunction analyseComplexValue(value) {\n  const originalValue = value.toString();\n  const values = [];\n  const indexes = {\n    color: [],\n    number: [],\n    var: []\n  };\n  const types = [];\n  let i = 0;\n  const tokenised = originalValue.replace(complexRegex, parsedValue => {\n    if (color.test(parsedValue)) {\n      indexes.color.push(i);\n      types.push(COLOR_TOKEN);\n      values.push(color.parse(parsedValue));\n    } else if (parsedValue.startsWith(VAR_FUNCTION_TOKEN)) {\n      indexes.var.push(i);\n      types.push(VAR_TOKEN);\n      values.push(parsedValue);\n    } else {\n      indexes.number.push(i);\n      types.push(NUMBER_TOKEN);\n      values.push(parseFloat(parsedValue));\n    }\n\n    ++i;\n    return SPLIT_TOKEN;\n  });\n  const split = tokenised.split(SPLIT_TOKEN);\n  return {\n    values,\n    split,\n    indexes,\n    types\n  };\n}\n\nfunction parseComplexValue(v) {\n  return analyseComplexValue(v).values;\n}\n\nfunction createTransformer(source) {\n  const {\n    split,\n    types\n  } = analyseComplexValue(source);\n  const numSections = split.length;\n  return v => {\n    let output = \"\";\n\n    for (let i = 0; i < numSections; i++) {\n      output += split[i];\n\n      if (v[i] !== undefined) {\n        const type = types[i];\n\n        if (type === NUMBER_TOKEN) {\n          output += sanitize(v[i]);\n        } else if (type === COLOR_TOKEN) {\n          output += color.transform(v[i]);\n        } else {\n          output += v[i];\n        }\n      }\n    }\n\n    return output;\n  };\n}\n\nconst convertNumbersToZero = v => typeof v === \"number\" ? 0 : v;\n\nfunction getAnimatableNone(v) {\n  const parsed = parseComplexValue(v);\n  const transformer = createTransformer(v);\n  return transformer(parsed.map(convertNumbersToZero));\n}\n\nconst complex = {\n  test,\n  parse: parseComplexValue,\n  createTransformer,\n  getAnimatableNone\n};\nexport { analyseComplexValue, complex };","map":{"version":3,"names":["color","colorRegex","floatRegex","sanitize","test","v","_a","_b","isNaN","match","length","NUMBER_TOKEN","COLOR_TOKEN","VAR_TOKEN","VAR_FUNCTION_TOKEN","SPLIT_TOKEN","complexRegex","analyseComplexValue","value","originalValue","toString","values","indexes","number","var","types","i","tokenised","replace","parsedValue","push","parse","startsWith","parseFloat","split","parseComplexValue","createTransformer","source","numSections","output","undefined","type","transform","convertNumbersToZero","getAnimatableNone","parsed","transformer","map","complex"],"sources":["C:/Users/samih/OneDrive/Desktop/school/website/PERNWebsite/node_modules/framer-motion/dist/es/value/types/complex/index.mjs"],"sourcesContent":["import { color } from '../color/index.mjs';\nimport { colorRegex } from '../utils/color-regex.mjs';\nimport { floatRegex } from '../utils/float-regex.mjs';\nimport { sanitize } from '../utils/sanitize.mjs';\n\nfunction test(v) {\n    var _a, _b;\n    return (isNaN(v) &&\n        typeof v === \"string\" &&\n        (((_a = v.match(floatRegex)) === null || _a === void 0 ? void 0 : _a.length) || 0) +\n            (((_b = v.match(colorRegex)) === null || _b === void 0 ? void 0 : _b.length) || 0) >\n            0);\n}\nconst NUMBER_TOKEN = \"number\";\nconst COLOR_TOKEN = \"color\";\nconst VAR_TOKEN = \"var\";\nconst VAR_FUNCTION_TOKEN = \"var(\";\nconst SPLIT_TOKEN = \"${}\";\n// this regex consists of the `singleCssVariableRegex|rgbHSLValueRegex|digitRegex`\nconst complexRegex = /var\\s*\\(\\s*--(?:[\\w-]+\\s*|[\\w-]+\\s*,(?:\\s*[^)(\\s]|\\s*\\((?:[^)(]|\\([^)(]*\\))*\\))+\\s*)\\)|#[\\da-f]{3,8}|(?:rgb|hsl)a?\\((?:-?[\\d.]+%?[,\\s]+){2}-?[\\d.]+%?\\s*(?:[,/]\\s*)?(?:\\b\\d+(?:\\.\\d+)?|\\.\\d+)?%?\\)|-?(?:\\d+(?:\\.\\d+)?|\\.\\d+)/giu;\nfunction analyseComplexValue(value) {\n    const originalValue = value.toString();\n    const values = [];\n    const indexes = {\n        color: [],\n        number: [],\n        var: [],\n    };\n    const types = [];\n    let i = 0;\n    const tokenised = originalValue.replace(complexRegex, (parsedValue) => {\n        if (color.test(parsedValue)) {\n            indexes.color.push(i);\n            types.push(COLOR_TOKEN);\n            values.push(color.parse(parsedValue));\n        }\n        else if (parsedValue.startsWith(VAR_FUNCTION_TOKEN)) {\n            indexes.var.push(i);\n            types.push(VAR_TOKEN);\n            values.push(parsedValue);\n        }\n        else {\n            indexes.number.push(i);\n            types.push(NUMBER_TOKEN);\n            values.push(parseFloat(parsedValue));\n        }\n        ++i;\n        return SPLIT_TOKEN;\n    });\n    const split = tokenised.split(SPLIT_TOKEN);\n    return { values, split, indexes, types };\n}\nfunction parseComplexValue(v) {\n    return analyseComplexValue(v).values;\n}\nfunction createTransformer(source) {\n    const { split, types } = analyseComplexValue(source);\n    const numSections = split.length;\n    return (v) => {\n        let output = \"\";\n        for (let i = 0; i < numSections; i++) {\n            output += split[i];\n            if (v[i] !== undefined) {\n                const type = types[i];\n                if (type === NUMBER_TOKEN) {\n                    output += sanitize(v[i]);\n                }\n                else if (type === COLOR_TOKEN) {\n                    output += color.transform(v[i]);\n                }\n                else {\n                    output += v[i];\n                }\n            }\n        }\n        return output;\n    };\n}\nconst convertNumbersToZero = (v) => typeof v === \"number\" ? 0 : v;\nfunction getAnimatableNone(v) {\n    const parsed = parseComplexValue(v);\n    const transformer = createTransformer(v);\n    return transformer(parsed.map(convertNumbersToZero));\n}\nconst complex = {\n    test,\n    parse: parseComplexValue,\n    createTransformer,\n    getAnimatableNone,\n};\n\nexport { analyseComplexValue, complex };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}