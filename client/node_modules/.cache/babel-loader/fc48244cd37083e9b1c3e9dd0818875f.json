{"ast":null,"code":"import { invariant } from 'motion-utils';\nimport { setDragLock } from 'motion-dom';\nimport { PanSession } from '../pan/PanSession.mjs';\nimport { isRefObject } from '../../utils/is-ref-object.mjs';\nimport { addPointerEvent } from '../../events/add-pointer-event.mjs';\nimport { applyConstraints, calcRelativeConstraints, resolveDragElastic, rebaseAxisConstraints, calcViewportConstraints, calcOrigin, defaultElastic } from './utils/constraints.mjs';\nimport { createBox } from '../../projection/geometry/models.mjs';\nimport { eachAxis } from '../../projection/utils/each-axis.mjs';\nimport { measurePageBox } from '../../projection/utils/measure.mjs';\nimport { extractEventInfo } from '../../events/event-info.mjs';\nimport { convertBoxToBoundingBox, convertBoundingBoxToBox } from '../../projection/geometry/conversion.mjs';\nimport { addDomEvent } from '../../events/add-dom-event.mjs';\nimport { calcLength } from '../../projection/geometry/delta-calc.mjs';\nimport { mixNumber } from '../../utils/mix/number.mjs';\nimport { percent } from '../../value/types/numbers/units.mjs';\nimport { animateMotionValue } from '../../animation/interfaces/motion-value.mjs';\nimport { getContextWindow } from '../../utils/get-context-window.mjs';\nimport { addValueToWillChange } from '../../value/use-will-change/add-will-change.mjs';\nimport { frame } from '../../frameloop/frame.mjs';\nconst elementDragControls = new WeakMap();\n/**\n *\n */\n// let latestPointerEvent: PointerEvent\n\nclass VisualElementDragControls {\n  constructor(visualElement) {\n    this.openDragLock = null;\n    this.isDragging = false;\n    this.currentDirection = null;\n    this.originPoint = {\n      x: 0,\n      y: 0\n    };\n    /**\n     * The permitted boundaries of travel, in pixels.\n     */\n\n    this.constraints = false;\n    this.hasMutatedConstraints = false;\n    /**\n     * The per-axis resolved elastic values.\n     */\n\n    this.elastic = createBox();\n    this.visualElement = visualElement;\n  }\n\n  start(originEvent) {\n    let {\n      snapToCursor = false\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    /**\n     * Don't start dragging if this component is exiting\n     */\n    const {\n      presenceContext\n    } = this.visualElement;\n    if (presenceContext && presenceContext.isPresent === false) return;\n\n    const onSessionStart = event => {\n      const {\n        dragSnapToOrigin\n      } = this.getProps(); // Stop or pause any animations on both axis values immediately. This allows the user to throw and catch\n      // the component.\n\n      dragSnapToOrigin ? this.pauseAnimation() : this.stopAnimation();\n\n      if (snapToCursor) {\n        this.snapToCursor(extractEventInfo(event).point);\n      }\n    };\n\n    const onStart = (event, info) => {\n      // Attempt to grab the global drag gesture lock - maybe make this part of PanSession\n      const {\n        drag,\n        dragPropagation,\n        onDragStart\n      } = this.getProps();\n\n      if (drag && !dragPropagation) {\n        if (this.openDragLock) this.openDragLock();\n        this.openDragLock = setDragLock(drag); // If we don 't have the lock, don't start dragging\n\n        if (!this.openDragLock) return;\n      }\n\n      this.isDragging = true;\n      this.currentDirection = null;\n      this.resolveConstraints();\n\n      if (this.visualElement.projection) {\n        this.visualElement.projection.isAnimationBlocked = true;\n        this.visualElement.projection.target = undefined;\n      }\n      /**\n       * Record gesture origin\n       */\n\n\n      eachAxis(axis => {\n        let current = this.getAxisMotionValue(axis).get() || 0;\n        /**\n         * If the MotionValue is a percentage value convert to px\n         */\n\n        if (percent.test(current)) {\n          const {\n            projection\n          } = this.visualElement;\n\n          if (projection && projection.layout) {\n            const measuredAxis = projection.layout.layoutBox[axis];\n\n            if (measuredAxis) {\n              const length = calcLength(measuredAxis);\n              current = length * (parseFloat(current) / 100);\n            }\n          }\n        }\n\n        this.originPoint[axis] = current;\n      }); // Fire onDragStart event\n\n      if (onDragStart) {\n        frame.postRender(() => onDragStart(event, info));\n      }\n\n      addValueToWillChange(this.visualElement, \"transform\");\n      const {\n        animationState\n      } = this.visualElement;\n      animationState && animationState.setActive(\"whileDrag\", true);\n    };\n\n    const onMove = (event, info) => {\n      // latestPointerEvent = event\n      const {\n        dragPropagation,\n        dragDirectionLock,\n        onDirectionLock,\n        onDrag\n      } = this.getProps(); // If we didn't successfully receive the gesture lock, early return.\n\n      if (!dragPropagation && !this.openDragLock) return;\n      const {\n        offset\n      } = info; // Attempt to detect drag direction if directionLock is true\n\n      if (dragDirectionLock && this.currentDirection === null) {\n        this.currentDirection = getCurrentDirection(offset); // If we've successfully set a direction, notify listener\n\n        if (this.currentDirection !== null) {\n          onDirectionLock && onDirectionLock(this.currentDirection);\n        }\n\n        return;\n      } // Update each point with the latest position\n\n\n      this.updateAxis(\"x\", info.point, offset);\n      this.updateAxis(\"y\", info.point, offset);\n      /**\n       * Ideally we would leave the renderer to fire naturally at the end of\n       * this frame but if the element is about to change layout as the result\n       * of a re-render we want to ensure the browser can read the latest\n       * bounding box to ensure the pointer and element don't fall out of sync.\n       */\n\n      this.visualElement.render();\n      /**\n       * This must fire after the render call as it might trigger a state\n       * change which itself might trigger a layout update.\n       */\n\n      onDrag && onDrag(event, info);\n    };\n\n    const onSessionEnd = (event, info) => this.stop(event, info);\n\n    const resumeAnimation = () => eachAxis(axis => {\n      var _a;\n\n      return this.getAnimationState(axis) === \"paused\" && ((_a = this.getAxisMotionValue(axis).animation) === null || _a === void 0 ? void 0 : _a.play());\n    });\n\n    const {\n      dragSnapToOrigin\n    } = this.getProps();\n    this.panSession = new PanSession(originEvent, {\n      onSessionStart,\n      onStart,\n      onMove,\n      onSessionEnd,\n      resumeAnimation\n    }, {\n      transformPagePoint: this.visualElement.getTransformPagePoint(),\n      dragSnapToOrigin,\n      contextWindow: getContextWindow(this.visualElement)\n    });\n  }\n\n  stop(event, info) {\n    const isDragging = this.isDragging;\n    this.cancel();\n    if (!isDragging) return;\n    const {\n      velocity\n    } = info;\n    this.startAnimation(velocity);\n    const {\n      onDragEnd\n    } = this.getProps();\n\n    if (onDragEnd) {\n      frame.postRender(() => onDragEnd(event, info));\n    }\n  }\n\n  cancel() {\n    this.isDragging = false;\n    const {\n      projection,\n      animationState\n    } = this.visualElement;\n\n    if (projection) {\n      projection.isAnimationBlocked = false;\n    }\n\n    this.panSession && this.panSession.end();\n    this.panSession = undefined;\n    const {\n      dragPropagation\n    } = this.getProps();\n\n    if (!dragPropagation && this.openDragLock) {\n      this.openDragLock();\n      this.openDragLock = null;\n    }\n\n    animationState && animationState.setActive(\"whileDrag\", false);\n  }\n\n  updateAxis(axis, _point, offset) {\n    const {\n      drag\n    } = this.getProps(); // If we're not dragging this axis, do an early return.\n\n    if (!offset || !shouldDrag(axis, drag, this.currentDirection)) return;\n    const axisValue = this.getAxisMotionValue(axis);\n    let next = this.originPoint[axis] + offset[axis]; // Apply constraints\n\n    if (this.constraints && this.constraints[axis]) {\n      next = applyConstraints(next, this.constraints[axis], this.elastic[axis]);\n    }\n\n    axisValue.set(next);\n  }\n\n  resolveConstraints() {\n    var _a;\n\n    const {\n      dragConstraints,\n      dragElastic\n    } = this.getProps();\n    const layout = this.visualElement.projection && !this.visualElement.projection.layout ? this.visualElement.projection.measure(false) : (_a = this.visualElement.projection) === null || _a === void 0 ? void 0 : _a.layout;\n    const prevConstraints = this.constraints;\n\n    if (dragConstraints && isRefObject(dragConstraints)) {\n      if (!this.constraints) {\n        this.constraints = this.resolveRefConstraints();\n      }\n    } else {\n      if (dragConstraints && layout) {\n        this.constraints = calcRelativeConstraints(layout.layoutBox, dragConstraints);\n      } else {\n        this.constraints = false;\n      }\n    }\n\n    this.elastic = resolveDragElastic(dragElastic);\n    /**\n     * If we're outputting to external MotionValues, we want to rebase the measured constraints\n     * from viewport-relative to component-relative.\n     */\n\n    if (prevConstraints !== this.constraints && layout && this.constraints && !this.hasMutatedConstraints) {\n      eachAxis(axis => {\n        if (this.constraints !== false && this.getAxisMotionValue(axis)) {\n          this.constraints[axis] = rebaseAxisConstraints(layout.layoutBox[axis], this.constraints[axis]);\n        }\n      });\n    }\n  }\n\n  resolveRefConstraints() {\n    const {\n      dragConstraints: constraints,\n      onMeasureDragConstraints\n    } = this.getProps();\n    if (!constraints || !isRefObject(constraints)) return false;\n    const constraintsElement = constraints.current;\n    invariant(constraintsElement !== null, \"If `dragConstraints` is set as a React ref, that ref must be passed to another component's `ref` prop.\");\n    const {\n      projection\n    } = this.visualElement; // TODO\n\n    if (!projection || !projection.layout) return false;\n    const constraintsBox = measurePageBox(constraintsElement, projection.root, this.visualElement.getTransformPagePoint());\n    let measuredConstraints = calcViewportConstraints(projection.layout.layoutBox, constraintsBox);\n    /**\n     * If there's an onMeasureDragConstraints listener we call it and\n     * if different constraints are returned, set constraints to that\n     */\n\n    if (onMeasureDragConstraints) {\n      const userConstraints = onMeasureDragConstraints(convertBoxToBoundingBox(measuredConstraints));\n      this.hasMutatedConstraints = !!userConstraints;\n\n      if (userConstraints) {\n        measuredConstraints = convertBoundingBoxToBox(userConstraints);\n      }\n    }\n\n    return measuredConstraints;\n  }\n\n  startAnimation(velocity) {\n    const {\n      drag,\n      dragMomentum,\n      dragElastic,\n      dragTransition,\n      dragSnapToOrigin,\n      onDragTransitionEnd\n    } = this.getProps();\n    const constraints = this.constraints || {};\n    const momentumAnimations = eachAxis(axis => {\n      if (!shouldDrag(axis, drag, this.currentDirection)) {\n        return;\n      }\n\n      let transition = constraints && constraints[axis] || {};\n      if (dragSnapToOrigin) transition = {\n        min: 0,\n        max: 0\n      };\n      /**\n       * Overdamp the boundary spring if `dragElastic` is disabled. There's still a frame\n       * of spring animations so we should look into adding a disable spring option to `inertia`.\n       * We could do something here where we affect the `bounceStiffness` and `bounceDamping`\n       * using the value of `dragElastic`.\n       */\n\n      const bounceStiffness = dragElastic ? 200 : 1000000;\n      const bounceDamping = dragElastic ? 40 : 10000000;\n      const inertia = {\n        type: \"inertia\",\n        velocity: dragMomentum ? velocity[axis] : 0,\n        bounceStiffness,\n        bounceDamping,\n        timeConstant: 750,\n        restDelta: 1,\n        restSpeed: 10,\n        ...dragTransition,\n        ...transition\n      }; // If we're not animating on an externally-provided `MotionValue` we can use the\n      // component's animation controls which will handle interactions with whileHover (etc),\n      // otherwise we just have to animate the `MotionValue` itself.\n\n      return this.startAxisValueAnimation(axis, inertia);\n    }); // Run all animations and then resolve the new drag constraints.\n\n    return Promise.all(momentumAnimations).then(onDragTransitionEnd);\n  }\n\n  startAxisValueAnimation(axis, transition) {\n    const axisValue = this.getAxisMotionValue(axis);\n    addValueToWillChange(this.visualElement, axis);\n    return axisValue.start(animateMotionValue(axis, axisValue, 0, transition, this.visualElement, false));\n  }\n\n  stopAnimation() {\n    eachAxis(axis => this.getAxisMotionValue(axis).stop());\n  }\n\n  pauseAnimation() {\n    eachAxis(axis => {\n      var _a;\n\n      return (_a = this.getAxisMotionValue(axis).animation) === null || _a === void 0 ? void 0 : _a.pause();\n    });\n  }\n\n  getAnimationState(axis) {\n    var _a;\n\n    return (_a = this.getAxisMotionValue(axis).animation) === null || _a === void 0 ? void 0 : _a.state;\n  }\n  /**\n   * Drag works differently depending on which props are provided.\n   *\n   * - If _dragX and _dragY are provided, we output the gesture delta directly to those motion values.\n   * - Otherwise, we apply the delta to the x/y motion values.\n   */\n\n\n  getAxisMotionValue(axis) {\n    const dragKey = `_drag${axis.toUpperCase()}`;\n    const props = this.visualElement.getProps();\n    const externalMotionValue = props[dragKey];\n    return externalMotionValue ? externalMotionValue : this.visualElement.getValue(axis, (props.initial ? props.initial[axis] : undefined) || 0);\n  }\n\n  snapToCursor(point) {\n    eachAxis(axis => {\n      const {\n        drag\n      } = this.getProps(); // If we're not dragging this axis, do an early return.\n\n      if (!shouldDrag(axis, drag, this.currentDirection)) return;\n      const {\n        projection\n      } = this.visualElement;\n      const axisValue = this.getAxisMotionValue(axis);\n\n      if (projection && projection.layout) {\n        const {\n          min,\n          max\n        } = projection.layout.layoutBox[axis];\n        axisValue.set(point[axis] - mixNumber(min, max, 0.5));\n      }\n    });\n  }\n  /**\n   * When the viewport resizes we want to check if the measured constraints\n   * have changed and, if so, reposition the element within those new constraints\n   * relative to where it was before the resize.\n   */\n\n\n  scalePositionWithinConstraints() {\n    if (!this.visualElement.current) return;\n    const {\n      drag,\n      dragConstraints\n    } = this.getProps();\n    const {\n      projection\n    } = this.visualElement;\n    if (!isRefObject(dragConstraints) || !projection || !this.constraints) return;\n    /**\n     * Stop current animations as there can be visual glitching if we try to do\n     * this mid-animation\n     */\n\n    this.stopAnimation();\n    /**\n     * Record the relative position of the dragged element relative to the\n     * constraints box and save as a progress value.\n     */\n\n    const boxProgress = {\n      x: 0,\n      y: 0\n    };\n    eachAxis(axis => {\n      const axisValue = this.getAxisMotionValue(axis);\n\n      if (axisValue && this.constraints !== false) {\n        const latest = axisValue.get();\n        boxProgress[axis] = calcOrigin({\n          min: latest,\n          max: latest\n        }, this.constraints[axis]);\n      }\n    });\n    /**\n     * Update the layout of this element and resolve the latest drag constraints\n     */\n\n    const {\n      transformTemplate\n    } = this.visualElement.getProps();\n    this.visualElement.current.style.transform = transformTemplate ? transformTemplate({}, \"\") : \"none\";\n    projection.root && projection.root.updateScroll();\n    projection.updateLayout();\n    this.resolveConstraints();\n    /**\n     * For each axis, calculate the current progress of the layout axis\n     * within the new constraints.\n     */\n\n    eachAxis(axis => {\n      if (!shouldDrag(axis, drag, null)) return;\n      /**\n       * Calculate a new transform based on the previous box progress\n       */\n\n      const axisValue = this.getAxisMotionValue(axis);\n      const {\n        min,\n        max\n      } = this.constraints[axis];\n      axisValue.set(mixNumber(min, max, boxProgress[axis]));\n    });\n  }\n\n  addListeners() {\n    if (!this.visualElement.current) return;\n    elementDragControls.set(this.visualElement, this);\n    const element = this.visualElement.current;\n    /**\n     * Attach a pointerdown event listener on this DOM element to initiate drag tracking.\n     */\n\n    const stopPointerListener = addPointerEvent(element, \"pointerdown\", event => {\n      const {\n        drag,\n        dragListener = true\n      } = this.getProps();\n      drag && dragListener && this.start(event);\n    });\n\n    const measureDragConstraints = () => {\n      const {\n        dragConstraints\n      } = this.getProps();\n\n      if (isRefObject(dragConstraints) && dragConstraints.current) {\n        this.constraints = this.resolveRefConstraints();\n      }\n    };\n\n    const {\n      projection\n    } = this.visualElement;\n    const stopMeasureLayoutListener = projection.addEventListener(\"measure\", measureDragConstraints);\n\n    if (projection && !projection.layout) {\n      projection.root && projection.root.updateScroll();\n      projection.updateLayout();\n    }\n\n    frame.read(measureDragConstraints);\n    /**\n     * Attach a window resize listener to scale the draggable target within its defined\n     * constraints as the window resizes.\n     */\n\n    const stopResizeListener = addDomEvent(window, \"resize\", () => this.scalePositionWithinConstraints());\n    /**\n     * If the element's layout changes, calculate the delta and apply that to\n     * the drag gesture's origin point.\n     */\n\n    const stopLayoutUpdateListener = projection.addEventListener(\"didUpdate\", _ref => {\n      let {\n        delta,\n        hasLayoutChanged\n      } = _ref;\n\n      if (this.isDragging && hasLayoutChanged) {\n        eachAxis(axis => {\n          const motionValue = this.getAxisMotionValue(axis);\n          if (!motionValue) return;\n          this.originPoint[axis] += delta[axis].translate;\n          motionValue.set(motionValue.get() + delta[axis].translate);\n        });\n        this.visualElement.render();\n      }\n    });\n    return () => {\n      stopResizeListener();\n      stopPointerListener();\n      stopMeasureLayoutListener();\n      stopLayoutUpdateListener && stopLayoutUpdateListener();\n    };\n  }\n\n  getProps() {\n    const props = this.visualElement.getProps();\n    const {\n      drag = false,\n      dragDirectionLock = false,\n      dragPropagation = false,\n      dragConstraints = false,\n      dragElastic = defaultElastic,\n      dragMomentum = true\n    } = props;\n    return { ...props,\n      drag,\n      dragDirectionLock,\n      dragPropagation,\n      dragConstraints,\n      dragElastic,\n      dragMomentum\n    };\n  }\n\n}\n\nfunction shouldDrag(direction, drag, currentDirection) {\n  return (drag === true || drag === direction) && (currentDirection === null || currentDirection === direction);\n}\n/**\n * Based on an x/y offset determine the current drag direction. If both axis' offsets are lower\n * than the provided threshold, return `null`.\n *\n * @param offset - The x/y offset from origin.\n * @param lockThreshold - (Optional) - the minimum absolute offset before we can determine a drag direction.\n */\n\n\nfunction getCurrentDirection(offset) {\n  let lockThreshold = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 10;\n  let direction = null;\n\n  if (Math.abs(offset.y) > lockThreshold) {\n    direction = \"y\";\n  } else if (Math.abs(offset.x) > lockThreshold) {\n    direction = \"x\";\n  }\n\n  return direction;\n}\n\nexport { VisualElementDragControls, elementDragControls };","map":{"version":3,"names":["invariant","setDragLock","PanSession","isRefObject","addPointerEvent","applyConstraints","calcRelativeConstraints","resolveDragElastic","rebaseAxisConstraints","calcViewportConstraints","calcOrigin","defaultElastic","createBox","eachAxis","measurePageBox","extractEventInfo","convertBoxToBoundingBox","convertBoundingBoxToBox","addDomEvent","calcLength","mixNumber","percent","animateMotionValue","getContextWindow","addValueToWillChange","frame","elementDragControls","WeakMap","VisualElementDragControls","constructor","visualElement","openDragLock","isDragging","currentDirection","originPoint","x","y","constraints","hasMutatedConstraints","elastic","start","originEvent","snapToCursor","presenceContext","isPresent","onSessionStart","event","dragSnapToOrigin","getProps","pauseAnimation","stopAnimation","point","onStart","info","drag","dragPropagation","onDragStart","resolveConstraints","projection","isAnimationBlocked","target","undefined","axis","current","getAxisMotionValue","get","test","layout","measuredAxis","layoutBox","length","parseFloat","postRender","animationState","setActive","onMove","dragDirectionLock","onDirectionLock","onDrag","offset","getCurrentDirection","updateAxis","render","onSessionEnd","stop","resumeAnimation","_a","getAnimationState","animation","play","panSession","transformPagePoint","getTransformPagePoint","contextWindow","cancel","velocity","startAnimation","onDragEnd","end","_point","shouldDrag","axisValue","next","set","dragConstraints","dragElastic","measure","prevConstraints","resolveRefConstraints","onMeasureDragConstraints","constraintsElement","constraintsBox","root","measuredConstraints","userConstraints","dragMomentum","dragTransition","onDragTransitionEnd","momentumAnimations","transition","min","max","bounceStiffness","bounceDamping","inertia","type","timeConstant","restDelta","restSpeed","startAxisValueAnimation","Promise","all","then","pause","state","dragKey","toUpperCase","props","externalMotionValue","getValue","initial","scalePositionWithinConstraints","boxProgress","latest","transformTemplate","style","transform","updateScroll","updateLayout","addListeners","element","stopPointerListener","dragListener","measureDragConstraints","stopMeasureLayoutListener","addEventListener","read","stopResizeListener","window","stopLayoutUpdateListener","delta","hasLayoutChanged","motionValue","translate","direction","lockThreshold","Math","abs"],"sources":["C:/Users/samih/OneDrive/Desktop/school/website/PERNWebsite/node_modules/framer-motion/dist/es/gestures/drag/VisualElementDragControls.mjs"],"sourcesContent":["import { invariant } from 'motion-utils';\nimport { setDragLock } from 'motion-dom';\nimport { PanSession } from '../pan/PanSession.mjs';\nimport { isRefObject } from '../../utils/is-ref-object.mjs';\nimport { addPointerEvent } from '../../events/add-pointer-event.mjs';\nimport { applyConstraints, calcRelativeConstraints, resolveDragElastic, rebaseAxisConstraints, calcViewportConstraints, calcOrigin, defaultElastic } from './utils/constraints.mjs';\nimport { createBox } from '../../projection/geometry/models.mjs';\nimport { eachAxis } from '../../projection/utils/each-axis.mjs';\nimport { measurePageBox } from '../../projection/utils/measure.mjs';\nimport { extractEventInfo } from '../../events/event-info.mjs';\nimport { convertBoxToBoundingBox, convertBoundingBoxToBox } from '../../projection/geometry/conversion.mjs';\nimport { addDomEvent } from '../../events/add-dom-event.mjs';\nimport { calcLength } from '../../projection/geometry/delta-calc.mjs';\nimport { mixNumber } from '../../utils/mix/number.mjs';\nimport { percent } from '../../value/types/numbers/units.mjs';\nimport { animateMotionValue } from '../../animation/interfaces/motion-value.mjs';\nimport { getContextWindow } from '../../utils/get-context-window.mjs';\nimport { addValueToWillChange } from '../../value/use-will-change/add-will-change.mjs';\nimport { frame } from '../../frameloop/frame.mjs';\n\nconst elementDragControls = new WeakMap();\n/**\n *\n */\n// let latestPointerEvent: PointerEvent\nclass VisualElementDragControls {\n    constructor(visualElement) {\n        this.openDragLock = null;\n        this.isDragging = false;\n        this.currentDirection = null;\n        this.originPoint = { x: 0, y: 0 };\n        /**\n         * The permitted boundaries of travel, in pixels.\n         */\n        this.constraints = false;\n        this.hasMutatedConstraints = false;\n        /**\n         * The per-axis resolved elastic values.\n         */\n        this.elastic = createBox();\n        this.visualElement = visualElement;\n    }\n    start(originEvent, { snapToCursor = false } = {}) {\n        /**\n         * Don't start dragging if this component is exiting\n         */\n        const { presenceContext } = this.visualElement;\n        if (presenceContext && presenceContext.isPresent === false)\n            return;\n        const onSessionStart = (event) => {\n            const { dragSnapToOrigin } = this.getProps();\n            // Stop or pause any animations on both axis values immediately. This allows the user to throw and catch\n            // the component.\n            dragSnapToOrigin ? this.pauseAnimation() : this.stopAnimation();\n            if (snapToCursor) {\n                this.snapToCursor(extractEventInfo(event).point);\n            }\n        };\n        const onStart = (event, info) => {\n            // Attempt to grab the global drag gesture lock - maybe make this part of PanSession\n            const { drag, dragPropagation, onDragStart } = this.getProps();\n            if (drag && !dragPropagation) {\n                if (this.openDragLock)\n                    this.openDragLock();\n                this.openDragLock = setDragLock(drag);\n                // If we don 't have the lock, don't start dragging\n                if (!this.openDragLock)\n                    return;\n            }\n            this.isDragging = true;\n            this.currentDirection = null;\n            this.resolveConstraints();\n            if (this.visualElement.projection) {\n                this.visualElement.projection.isAnimationBlocked = true;\n                this.visualElement.projection.target = undefined;\n            }\n            /**\n             * Record gesture origin\n             */\n            eachAxis((axis) => {\n                let current = this.getAxisMotionValue(axis).get() || 0;\n                /**\n                 * If the MotionValue is a percentage value convert to px\n                 */\n                if (percent.test(current)) {\n                    const { projection } = this.visualElement;\n                    if (projection && projection.layout) {\n                        const measuredAxis = projection.layout.layoutBox[axis];\n                        if (measuredAxis) {\n                            const length = calcLength(measuredAxis);\n                            current = length * (parseFloat(current) / 100);\n                        }\n                    }\n                }\n                this.originPoint[axis] = current;\n            });\n            // Fire onDragStart event\n            if (onDragStart) {\n                frame.postRender(() => onDragStart(event, info));\n            }\n            addValueToWillChange(this.visualElement, \"transform\");\n            const { animationState } = this.visualElement;\n            animationState && animationState.setActive(\"whileDrag\", true);\n        };\n        const onMove = (event, info) => {\n            // latestPointerEvent = event\n            const { dragPropagation, dragDirectionLock, onDirectionLock, onDrag, } = this.getProps();\n            // If we didn't successfully receive the gesture lock, early return.\n            if (!dragPropagation && !this.openDragLock)\n                return;\n            const { offset } = info;\n            // Attempt to detect drag direction if directionLock is true\n            if (dragDirectionLock && this.currentDirection === null) {\n                this.currentDirection = getCurrentDirection(offset);\n                // If we've successfully set a direction, notify listener\n                if (this.currentDirection !== null) {\n                    onDirectionLock && onDirectionLock(this.currentDirection);\n                }\n                return;\n            }\n            // Update each point with the latest position\n            this.updateAxis(\"x\", info.point, offset);\n            this.updateAxis(\"y\", info.point, offset);\n            /**\n             * Ideally we would leave the renderer to fire naturally at the end of\n             * this frame but if the element is about to change layout as the result\n             * of a re-render we want to ensure the browser can read the latest\n             * bounding box to ensure the pointer and element don't fall out of sync.\n             */\n            this.visualElement.render();\n            /**\n             * This must fire after the render call as it might trigger a state\n             * change which itself might trigger a layout update.\n             */\n            onDrag && onDrag(event, info);\n        };\n        const onSessionEnd = (event, info) => this.stop(event, info);\n        const resumeAnimation = () => eachAxis((axis) => {\n            var _a;\n            return this.getAnimationState(axis) === \"paused\" &&\n                ((_a = this.getAxisMotionValue(axis).animation) === null || _a === void 0 ? void 0 : _a.play());\n        });\n        const { dragSnapToOrigin } = this.getProps();\n        this.panSession = new PanSession(originEvent, {\n            onSessionStart,\n            onStart,\n            onMove,\n            onSessionEnd,\n            resumeAnimation,\n        }, {\n            transformPagePoint: this.visualElement.getTransformPagePoint(),\n            dragSnapToOrigin,\n            contextWindow: getContextWindow(this.visualElement),\n        });\n    }\n    stop(event, info) {\n        const isDragging = this.isDragging;\n        this.cancel();\n        if (!isDragging)\n            return;\n        const { velocity } = info;\n        this.startAnimation(velocity);\n        const { onDragEnd } = this.getProps();\n        if (onDragEnd) {\n            frame.postRender(() => onDragEnd(event, info));\n        }\n    }\n    cancel() {\n        this.isDragging = false;\n        const { projection, animationState } = this.visualElement;\n        if (projection) {\n            projection.isAnimationBlocked = false;\n        }\n        this.panSession && this.panSession.end();\n        this.panSession = undefined;\n        const { dragPropagation } = this.getProps();\n        if (!dragPropagation && this.openDragLock) {\n            this.openDragLock();\n            this.openDragLock = null;\n        }\n        animationState && animationState.setActive(\"whileDrag\", false);\n    }\n    updateAxis(axis, _point, offset) {\n        const { drag } = this.getProps();\n        // If we're not dragging this axis, do an early return.\n        if (!offset || !shouldDrag(axis, drag, this.currentDirection))\n            return;\n        const axisValue = this.getAxisMotionValue(axis);\n        let next = this.originPoint[axis] + offset[axis];\n        // Apply constraints\n        if (this.constraints && this.constraints[axis]) {\n            next = applyConstraints(next, this.constraints[axis], this.elastic[axis]);\n        }\n        axisValue.set(next);\n    }\n    resolveConstraints() {\n        var _a;\n        const { dragConstraints, dragElastic } = this.getProps();\n        const layout = this.visualElement.projection &&\n            !this.visualElement.projection.layout\n            ? this.visualElement.projection.measure(false)\n            : (_a = this.visualElement.projection) === null || _a === void 0 ? void 0 : _a.layout;\n        const prevConstraints = this.constraints;\n        if (dragConstraints && isRefObject(dragConstraints)) {\n            if (!this.constraints) {\n                this.constraints = this.resolveRefConstraints();\n            }\n        }\n        else {\n            if (dragConstraints && layout) {\n                this.constraints = calcRelativeConstraints(layout.layoutBox, dragConstraints);\n            }\n            else {\n                this.constraints = false;\n            }\n        }\n        this.elastic = resolveDragElastic(dragElastic);\n        /**\n         * If we're outputting to external MotionValues, we want to rebase the measured constraints\n         * from viewport-relative to component-relative.\n         */\n        if (prevConstraints !== this.constraints &&\n            layout &&\n            this.constraints &&\n            !this.hasMutatedConstraints) {\n            eachAxis((axis) => {\n                if (this.constraints !== false &&\n                    this.getAxisMotionValue(axis)) {\n                    this.constraints[axis] = rebaseAxisConstraints(layout.layoutBox[axis], this.constraints[axis]);\n                }\n            });\n        }\n    }\n    resolveRefConstraints() {\n        const { dragConstraints: constraints, onMeasureDragConstraints } = this.getProps();\n        if (!constraints || !isRefObject(constraints))\n            return false;\n        const constraintsElement = constraints.current;\n        invariant(constraintsElement !== null, \"If `dragConstraints` is set as a React ref, that ref must be passed to another component's `ref` prop.\");\n        const { projection } = this.visualElement;\n        // TODO\n        if (!projection || !projection.layout)\n            return false;\n        const constraintsBox = measurePageBox(constraintsElement, projection.root, this.visualElement.getTransformPagePoint());\n        let measuredConstraints = calcViewportConstraints(projection.layout.layoutBox, constraintsBox);\n        /**\n         * If there's an onMeasureDragConstraints listener we call it and\n         * if different constraints are returned, set constraints to that\n         */\n        if (onMeasureDragConstraints) {\n            const userConstraints = onMeasureDragConstraints(convertBoxToBoundingBox(measuredConstraints));\n            this.hasMutatedConstraints = !!userConstraints;\n            if (userConstraints) {\n                measuredConstraints = convertBoundingBoxToBox(userConstraints);\n            }\n        }\n        return measuredConstraints;\n    }\n    startAnimation(velocity) {\n        const { drag, dragMomentum, dragElastic, dragTransition, dragSnapToOrigin, onDragTransitionEnd, } = this.getProps();\n        const constraints = this.constraints || {};\n        const momentumAnimations = eachAxis((axis) => {\n            if (!shouldDrag(axis, drag, this.currentDirection)) {\n                return;\n            }\n            let transition = (constraints && constraints[axis]) || {};\n            if (dragSnapToOrigin)\n                transition = { min: 0, max: 0 };\n            /**\n             * Overdamp the boundary spring if `dragElastic` is disabled. There's still a frame\n             * of spring animations so we should look into adding a disable spring option to `inertia`.\n             * We could do something here where we affect the `bounceStiffness` and `bounceDamping`\n             * using the value of `dragElastic`.\n             */\n            const bounceStiffness = dragElastic ? 200 : 1000000;\n            const bounceDamping = dragElastic ? 40 : 10000000;\n            const inertia = {\n                type: \"inertia\",\n                velocity: dragMomentum ? velocity[axis] : 0,\n                bounceStiffness,\n                bounceDamping,\n                timeConstant: 750,\n                restDelta: 1,\n                restSpeed: 10,\n                ...dragTransition,\n                ...transition,\n            };\n            // If we're not animating on an externally-provided `MotionValue` we can use the\n            // component's animation controls which will handle interactions with whileHover (etc),\n            // otherwise we just have to animate the `MotionValue` itself.\n            return this.startAxisValueAnimation(axis, inertia);\n        });\n        // Run all animations and then resolve the new drag constraints.\n        return Promise.all(momentumAnimations).then(onDragTransitionEnd);\n    }\n    startAxisValueAnimation(axis, transition) {\n        const axisValue = this.getAxisMotionValue(axis);\n        addValueToWillChange(this.visualElement, axis);\n        return axisValue.start(animateMotionValue(axis, axisValue, 0, transition, this.visualElement, false));\n    }\n    stopAnimation() {\n        eachAxis((axis) => this.getAxisMotionValue(axis).stop());\n    }\n    pauseAnimation() {\n        eachAxis((axis) => { var _a; return (_a = this.getAxisMotionValue(axis).animation) === null || _a === void 0 ? void 0 : _a.pause(); });\n    }\n    getAnimationState(axis) {\n        var _a;\n        return (_a = this.getAxisMotionValue(axis).animation) === null || _a === void 0 ? void 0 : _a.state;\n    }\n    /**\n     * Drag works differently depending on which props are provided.\n     *\n     * - If _dragX and _dragY are provided, we output the gesture delta directly to those motion values.\n     * - Otherwise, we apply the delta to the x/y motion values.\n     */\n    getAxisMotionValue(axis) {\n        const dragKey = `_drag${axis.toUpperCase()}`;\n        const props = this.visualElement.getProps();\n        const externalMotionValue = props[dragKey];\n        return externalMotionValue\n            ? externalMotionValue\n            : this.visualElement.getValue(axis, (props.initial\n                ? props.initial[axis]\n                : undefined) || 0);\n    }\n    snapToCursor(point) {\n        eachAxis((axis) => {\n            const { drag } = this.getProps();\n            // If we're not dragging this axis, do an early return.\n            if (!shouldDrag(axis, drag, this.currentDirection))\n                return;\n            const { projection } = this.visualElement;\n            const axisValue = this.getAxisMotionValue(axis);\n            if (projection && projection.layout) {\n                const { min, max } = projection.layout.layoutBox[axis];\n                axisValue.set(point[axis] - mixNumber(min, max, 0.5));\n            }\n        });\n    }\n    /**\n     * When the viewport resizes we want to check if the measured constraints\n     * have changed and, if so, reposition the element within those new constraints\n     * relative to where it was before the resize.\n     */\n    scalePositionWithinConstraints() {\n        if (!this.visualElement.current)\n            return;\n        const { drag, dragConstraints } = this.getProps();\n        const { projection } = this.visualElement;\n        if (!isRefObject(dragConstraints) || !projection || !this.constraints)\n            return;\n        /**\n         * Stop current animations as there can be visual glitching if we try to do\n         * this mid-animation\n         */\n        this.stopAnimation();\n        /**\n         * Record the relative position of the dragged element relative to the\n         * constraints box and save as a progress value.\n         */\n        const boxProgress = { x: 0, y: 0 };\n        eachAxis((axis) => {\n            const axisValue = this.getAxisMotionValue(axis);\n            if (axisValue && this.constraints !== false) {\n                const latest = axisValue.get();\n                boxProgress[axis] = calcOrigin({ min: latest, max: latest }, this.constraints[axis]);\n            }\n        });\n        /**\n         * Update the layout of this element and resolve the latest drag constraints\n         */\n        const { transformTemplate } = this.visualElement.getProps();\n        this.visualElement.current.style.transform = transformTemplate\n            ? transformTemplate({}, \"\")\n            : \"none\";\n        projection.root && projection.root.updateScroll();\n        projection.updateLayout();\n        this.resolveConstraints();\n        /**\n         * For each axis, calculate the current progress of the layout axis\n         * within the new constraints.\n         */\n        eachAxis((axis) => {\n            if (!shouldDrag(axis, drag, null))\n                return;\n            /**\n             * Calculate a new transform based on the previous box progress\n             */\n            const axisValue = this.getAxisMotionValue(axis);\n            const { min, max } = this.constraints[axis];\n            axisValue.set(mixNumber(min, max, boxProgress[axis]));\n        });\n    }\n    addListeners() {\n        if (!this.visualElement.current)\n            return;\n        elementDragControls.set(this.visualElement, this);\n        const element = this.visualElement.current;\n        /**\n         * Attach a pointerdown event listener on this DOM element to initiate drag tracking.\n         */\n        const stopPointerListener = addPointerEvent(element, \"pointerdown\", (event) => {\n            const { drag, dragListener = true } = this.getProps();\n            drag && dragListener && this.start(event);\n        });\n        const measureDragConstraints = () => {\n            const { dragConstraints } = this.getProps();\n            if (isRefObject(dragConstraints) && dragConstraints.current) {\n                this.constraints = this.resolveRefConstraints();\n            }\n        };\n        const { projection } = this.visualElement;\n        const stopMeasureLayoutListener = projection.addEventListener(\"measure\", measureDragConstraints);\n        if (projection && !projection.layout) {\n            projection.root && projection.root.updateScroll();\n            projection.updateLayout();\n        }\n        frame.read(measureDragConstraints);\n        /**\n         * Attach a window resize listener to scale the draggable target within its defined\n         * constraints as the window resizes.\n         */\n        const stopResizeListener = addDomEvent(window, \"resize\", () => this.scalePositionWithinConstraints());\n        /**\n         * If the element's layout changes, calculate the delta and apply that to\n         * the drag gesture's origin point.\n         */\n        const stopLayoutUpdateListener = projection.addEventListener(\"didUpdate\", (({ delta, hasLayoutChanged }) => {\n            if (this.isDragging && hasLayoutChanged) {\n                eachAxis((axis) => {\n                    const motionValue = this.getAxisMotionValue(axis);\n                    if (!motionValue)\n                        return;\n                    this.originPoint[axis] += delta[axis].translate;\n                    motionValue.set(motionValue.get() + delta[axis].translate);\n                });\n                this.visualElement.render();\n            }\n        }));\n        return () => {\n            stopResizeListener();\n            stopPointerListener();\n            stopMeasureLayoutListener();\n            stopLayoutUpdateListener && stopLayoutUpdateListener();\n        };\n    }\n    getProps() {\n        const props = this.visualElement.getProps();\n        const { drag = false, dragDirectionLock = false, dragPropagation = false, dragConstraints = false, dragElastic = defaultElastic, dragMomentum = true, } = props;\n        return {\n            ...props,\n            drag,\n            dragDirectionLock,\n            dragPropagation,\n            dragConstraints,\n            dragElastic,\n            dragMomentum,\n        };\n    }\n}\nfunction shouldDrag(direction, drag, currentDirection) {\n    return ((drag === true || drag === direction) &&\n        (currentDirection === null || currentDirection === direction));\n}\n/**\n * Based on an x/y offset determine the current drag direction. If both axis' offsets are lower\n * than the provided threshold, return `null`.\n *\n * @param offset - The x/y offset from origin.\n * @param lockThreshold - (Optional) - the minimum absolute offset before we can determine a drag direction.\n */\nfunction getCurrentDirection(offset, lockThreshold = 10) {\n    let direction = null;\n    if (Math.abs(offset.y) > lockThreshold) {\n        direction = \"y\";\n    }\n    else if (Math.abs(offset.x) > lockThreshold) {\n        direction = \"x\";\n    }\n    return direction;\n}\n\nexport { VisualElementDragControls, elementDragControls };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}