{"ast":null,"code":"import { measureViewportBox } from '../../projection/utils/measure.mjs';\nimport { DOMVisualElement } from '../dom/DOMVisualElement.mjs';\nimport { isCSSVariableName } from '../dom/utils/is-css-variable.mjs';\nimport { getDefaultValueType } from '../dom/value-types/defaults.mjs';\nimport { buildHTMLStyles } from './utils/build-styles.mjs';\nimport { transformProps } from './utils/keys-transform.mjs';\nimport { renderHTML } from './utils/render.mjs';\nimport { scrapeMotionValuesFromProps } from './utils/scrape-motion-values.mjs';\n\nfunction getComputedStyle(element) {\n  return window.getComputedStyle(element);\n}\n\nclass HTMLVisualElement extends DOMVisualElement {\n  constructor() {\n    super(...arguments);\n    this.type = \"html\";\n    this.renderInstance = renderHTML;\n  }\n\n  readValueFromInstance(instance, key) {\n    if (transformProps.has(key)) {\n      const defaultType = getDefaultValueType(key);\n      return defaultType ? defaultType.default || 0 : 0;\n    } else {\n      const computedStyle = getComputedStyle(instance);\n      const value = (isCSSVariableName(key) ? computedStyle.getPropertyValue(key) : computedStyle[key]) || 0;\n      return typeof value === \"string\" ? value.trim() : value;\n    }\n  }\n\n  measureInstanceViewportBox(instance, _ref) {\n    let {\n      transformPagePoint\n    } = _ref;\n    return measureViewportBox(instance, transformPagePoint);\n  }\n\n  build(renderState, latestValues, props) {\n    buildHTMLStyles(renderState, latestValues, props.transformTemplate);\n  }\n\n  scrapeMotionValuesFromProps(props, prevProps, visualElement) {\n    return scrapeMotionValuesFromProps(props, prevProps, visualElement);\n  }\n\n}\n\nexport { HTMLVisualElement, getComputedStyle };","map":{"version":3,"names":["measureViewportBox","DOMVisualElement","isCSSVariableName","getDefaultValueType","buildHTMLStyles","transformProps","renderHTML","scrapeMotionValuesFromProps","getComputedStyle","element","window","HTMLVisualElement","constructor","arguments","type","renderInstance","readValueFromInstance","instance","key","has","defaultType","default","computedStyle","value","getPropertyValue","trim","measureInstanceViewportBox","transformPagePoint","build","renderState","latestValues","props","transformTemplate","prevProps","visualElement"],"sources":["C:/Users/samih/OneDrive/Desktop/school/website/PERNWebsite/node_modules/framer-motion/dist/es/render/html/HTMLVisualElement.mjs"],"sourcesContent":["import { measureViewportBox } from '../../projection/utils/measure.mjs';\nimport { DOMVisualElement } from '../dom/DOMVisualElement.mjs';\nimport { isCSSVariableName } from '../dom/utils/is-css-variable.mjs';\nimport { getDefaultValueType } from '../dom/value-types/defaults.mjs';\nimport { buildHTMLStyles } from './utils/build-styles.mjs';\nimport { transformProps } from './utils/keys-transform.mjs';\nimport { renderHTML } from './utils/render.mjs';\nimport { scrapeMotionValuesFromProps } from './utils/scrape-motion-values.mjs';\n\nfunction getComputedStyle(element) {\n    return window.getComputedStyle(element);\n}\nclass HTMLVisualElement extends DOMVisualElement {\n    constructor() {\n        super(...arguments);\n        this.type = \"html\";\n        this.renderInstance = renderHTML;\n    }\n    readValueFromInstance(instance, key) {\n        if (transformProps.has(key)) {\n            const defaultType = getDefaultValueType(key);\n            return defaultType ? defaultType.default || 0 : 0;\n        }\n        else {\n            const computedStyle = getComputedStyle(instance);\n            const value = (isCSSVariableName(key)\n                ? computedStyle.getPropertyValue(key)\n                : computedStyle[key]) || 0;\n            return typeof value === \"string\" ? value.trim() : value;\n        }\n    }\n    measureInstanceViewportBox(instance, { transformPagePoint }) {\n        return measureViewportBox(instance, transformPagePoint);\n    }\n    build(renderState, latestValues, props) {\n        buildHTMLStyles(renderState, latestValues, props.transformTemplate);\n    }\n    scrapeMotionValuesFromProps(props, prevProps, visualElement) {\n        return scrapeMotionValuesFromProps(props, prevProps, visualElement);\n    }\n}\n\nexport { HTMLVisualElement, getComputedStyle };\n"],"mappings":"AAAA,SAASA,kBAAT,QAAmC,oCAAnC;AACA,SAASC,gBAAT,QAAiC,6BAAjC;AACA,SAASC,iBAAT,QAAkC,kCAAlC;AACA,SAASC,mBAAT,QAAoC,iCAApC;AACA,SAASC,eAAT,QAAgC,0BAAhC;AACA,SAASC,cAAT,QAA+B,4BAA/B;AACA,SAASC,UAAT,QAA2B,oBAA3B;AACA,SAASC,2BAAT,QAA4C,kCAA5C;;AAEA,SAASC,gBAAT,CAA0BC,OAA1B,EAAmC;EAC/B,OAAOC,MAAM,CAACF,gBAAP,CAAwBC,OAAxB,CAAP;AACH;;AACD,MAAME,iBAAN,SAAgCV,gBAAhC,CAAiD;EAC7CW,WAAW,GAAG;IACV,MAAM,GAAGC,SAAT;IACA,KAAKC,IAAL,GAAY,MAAZ;IACA,KAAKC,cAAL,GAAsBT,UAAtB;EACH;;EACDU,qBAAqB,CAACC,QAAD,EAAWC,GAAX,EAAgB;IACjC,IAAIb,cAAc,CAACc,GAAf,CAAmBD,GAAnB,CAAJ,EAA6B;MACzB,MAAME,WAAW,GAAGjB,mBAAmB,CAACe,GAAD,CAAvC;MACA,OAAOE,WAAW,GAAGA,WAAW,CAACC,OAAZ,IAAuB,CAA1B,GAA8B,CAAhD;IACH,CAHD,MAIK;MACD,MAAMC,aAAa,GAAGd,gBAAgB,CAACS,QAAD,CAAtC;MACA,MAAMM,KAAK,GAAG,CAACrB,iBAAiB,CAACgB,GAAD,CAAjB,GACTI,aAAa,CAACE,gBAAd,CAA+BN,GAA/B,CADS,GAETI,aAAa,CAACJ,GAAD,CAFL,KAEe,CAF7B;MAGA,OAAO,OAAOK,KAAP,KAAiB,QAAjB,GAA4BA,KAAK,CAACE,IAAN,EAA5B,GAA2CF,KAAlD;IACH;EACJ;;EACDG,0BAA0B,CAACT,QAAD,QAAmC;IAAA,IAAxB;MAAEU;IAAF,CAAwB;IACzD,OAAO3B,kBAAkB,CAACiB,QAAD,EAAWU,kBAAX,CAAzB;EACH;;EACDC,KAAK,CAACC,WAAD,EAAcC,YAAd,EAA4BC,KAA5B,EAAmC;IACpC3B,eAAe,CAACyB,WAAD,EAAcC,YAAd,EAA4BC,KAAK,CAACC,iBAAlC,CAAf;EACH;;EACDzB,2BAA2B,CAACwB,KAAD,EAAQE,SAAR,EAAmBC,aAAnB,EAAkC;IACzD,OAAO3B,2BAA2B,CAACwB,KAAD,EAAQE,SAAR,EAAmBC,aAAnB,CAAlC;EACH;;AA3B4C;;AA8BjD,SAASvB,iBAAT,EAA4BH,gBAA5B"},"metadata":{},"sourceType":"module"}