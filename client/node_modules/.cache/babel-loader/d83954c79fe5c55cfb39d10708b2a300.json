{"ast":null,"code":"import { time } from '../frameloop/sync-time.mjs';\nimport { SubscriptionManager } from '../utils/subscription-manager.mjs';\nimport { velocityPerSecond } from '../utils/velocity-per-second.mjs';\nimport { warnOnce } from '../utils/warn-once.mjs';\nimport { frame } from '../frameloop/frame.mjs';\n/**\n * Maximum time between the value of two frames, beyond which we\n * assume the velocity has since been 0.\n */\n\nconst MAX_VELOCITY_DELTA = 30;\n\nconst isFloat = value => {\n  return !isNaN(parseFloat(value));\n};\n\nconst collectMotionValues = {\n  current: undefined\n};\n/**\n * `MotionValue` is used to track the state and velocity of motion values.\n *\n * @public\n */\n\nclass MotionValue {\n  /**\n   * @param init - The initiating value\n   * @param config - Optional configuration options\n   *\n   * -  `transformer`: A function to transform incoming values with.\n   *\n   * @internal\n   */\n  constructor(init) {\n    var _this = this;\n\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    /**\n     * This will be replaced by the build step with the latest version number.\n     * When MotionValues are provided to motion components, warn if versions are mixed.\n     */\n    this.version = \"12.0.3\";\n    /**\n     * Tracks whether this value can output a velocity. Currently this is only true\n     * if the value is numerical, but we might be able to widen the scope here and support\n     * other value types.\n     *\n     * @internal\n     */\n\n    this.canTrackVelocity = null;\n    /**\n     * An object containing a SubscriptionManager for each active event.\n     */\n\n    this.events = {};\n\n    this.updateAndNotify = function (v) {\n      let render = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      const currentTime = time.now();\n      /**\n       * If we're updating the value during another frame or eventloop\n       * than the previous frame, then the we set the previous frame value\n       * to current.\n       */\n\n      if (_this.updatedAt !== currentTime) {\n        _this.setPrevFrameValue();\n      }\n\n      _this.prev = _this.current;\n\n      _this.setCurrent(v); // Update update subscribers\n\n\n      if (_this.current !== _this.prev && _this.events.change) {\n        _this.events.change.notify(_this.current);\n      } // Update render subscribers\n\n\n      if (render && _this.events.renderRequest) {\n        _this.events.renderRequest.notify(_this.current);\n      }\n    };\n\n    this.hasAnimated = false;\n    this.setCurrent(init);\n    this.owner = options.owner;\n  }\n\n  setCurrent(current) {\n    this.current = current;\n    this.updatedAt = time.now();\n\n    if (this.canTrackVelocity === null && current !== undefined) {\n      this.canTrackVelocity = isFloat(this.current);\n    }\n  }\n\n  setPrevFrameValue() {\n    let prevFrameValue = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.current;\n    this.prevFrameValue = prevFrameValue;\n    this.prevUpdatedAt = this.updatedAt;\n  }\n  /**\n   * Adds a function that will be notified when the `MotionValue` is updated.\n   *\n   * It returns a function that, when called, will cancel the subscription.\n   *\n   * When calling `onChange` inside a React component, it should be wrapped with the\n   * `useEffect` hook. As it returns an unsubscribe function, this should be returned\n   * from the `useEffect` function to ensure you don't add duplicate subscribers..\n   *\n   * ```jsx\n   * export const MyComponent = () => {\n   *   const x = useMotionValue(0)\n   *   const y = useMotionValue(0)\n   *   const opacity = useMotionValue(1)\n   *\n   *   useEffect(() => {\n   *     function updateOpacity() {\n   *       const maxXY = Math.max(x.get(), y.get())\n   *       const newOpacity = transform(maxXY, [0, 100], [1, 0])\n   *       opacity.set(newOpacity)\n   *     }\n   *\n   *     const unsubscribeX = x.on(\"change\", updateOpacity)\n   *     const unsubscribeY = y.on(\"change\", updateOpacity)\n   *\n   *     return () => {\n   *       unsubscribeX()\n   *       unsubscribeY()\n   *     }\n   *   }, [])\n   *\n   *   return <motion.div style={{ x }} />\n   * }\n   * ```\n   *\n   * @param subscriber - A function that receives the latest value.\n   * @returns A function that, when called, will cancel this subscription.\n   *\n   * @deprecated\n   */\n\n\n  onChange(subscription) {\n    if (process.env.NODE_ENV !== \"production\") {\n      warnOnce(false, `value.onChange(callback) is deprecated. Switch to value.on(\"change\", callback).`);\n    }\n\n    return this.on(\"change\", subscription);\n  }\n\n  on(eventName, callback) {\n    if (!this.events[eventName]) {\n      this.events[eventName] = new SubscriptionManager();\n    }\n\n    const unsubscribe = this.events[eventName].add(callback);\n\n    if (eventName === \"change\") {\n      return () => {\n        unsubscribe();\n        /**\n         * If we have no more change listeners by the start\n         * of the next frame, stop active animations.\n         */\n\n        frame.read(() => {\n          if (!this.events.change.getSize()) {\n            this.stop();\n          }\n        });\n      };\n    }\n\n    return unsubscribe;\n  }\n\n  clearListeners() {\n    for (const eventManagers in this.events) {\n      this.events[eventManagers].clear();\n    }\n  }\n  /**\n   * Attaches a passive effect to the `MotionValue`.\n   *\n   * @internal\n   */\n\n\n  attach(passiveEffect, stopPassiveEffect) {\n    this.passiveEffect = passiveEffect;\n    this.stopPassiveEffect = stopPassiveEffect;\n  }\n  /**\n   * Sets the state of the `MotionValue`.\n   *\n   * @remarks\n   *\n   * ```jsx\n   * const x = useMotionValue(0)\n   * x.set(10)\n   * ```\n   *\n   * @param latest - Latest value to set.\n   * @param render - Whether to notify render subscribers. Defaults to `true`\n   *\n   * @public\n   */\n\n\n  set(v) {\n    let render = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n    if (!render || !this.passiveEffect) {\n      this.updateAndNotify(v, render);\n    } else {\n      this.passiveEffect(v, this.updateAndNotify);\n    }\n  }\n\n  setWithVelocity(prev, current, delta) {\n    this.set(current);\n    this.prev = undefined;\n    this.prevFrameValue = prev;\n    this.prevUpdatedAt = this.updatedAt - delta;\n  }\n  /**\n   * Set the state of the `MotionValue`, stopping any active animations,\n   * effects, and resets velocity to `0`.\n   */\n\n\n  jump(v) {\n    let endAnimation = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    this.updateAndNotify(v);\n    this.prev = v;\n    this.prevUpdatedAt = this.prevFrameValue = undefined;\n    endAnimation && this.stop();\n    if (this.stopPassiveEffect) this.stopPassiveEffect();\n  }\n  /**\n   * Returns the latest state of `MotionValue`\n   *\n   * @returns - The latest state of `MotionValue`\n   *\n   * @public\n   */\n\n\n  get() {\n    if (collectMotionValues.current) {\n      collectMotionValues.current.push(this);\n    }\n\n    return this.current;\n  }\n  /**\n   * @public\n   */\n\n\n  getPrevious() {\n    return this.prev;\n  }\n  /**\n   * Returns the latest velocity of `MotionValue`\n   *\n   * @returns - The latest velocity of `MotionValue`. Returns `0` if the state is non-numerical.\n   *\n   * @public\n   */\n\n\n  getVelocity() {\n    const currentTime = time.now();\n\n    if (!this.canTrackVelocity || this.prevFrameValue === undefined || currentTime - this.updatedAt > MAX_VELOCITY_DELTA) {\n      return 0;\n    }\n\n    const delta = Math.min(this.updatedAt - this.prevUpdatedAt, MAX_VELOCITY_DELTA); // Casts because of parseFloat's poor typing\n\n    return velocityPerSecond(parseFloat(this.current) - parseFloat(this.prevFrameValue), delta);\n  }\n  /**\n   * Registers a new animation to control this `MotionValue`. Only one\n   * animation can drive a `MotionValue` at one time.\n   *\n   * ```jsx\n   * value.start()\n   * ```\n   *\n   * @param animation - A function that starts the provided animation\n   *\n   * @internal\n   */\n\n\n  start(startAnimation) {\n    this.stop();\n    return new Promise(resolve => {\n      this.hasAnimated = true;\n      this.animation = startAnimation(resolve);\n\n      if (this.events.animationStart) {\n        this.events.animationStart.notify();\n      }\n    }).then(() => {\n      if (this.events.animationComplete) {\n        this.events.animationComplete.notify();\n      }\n\n      this.clearAnimation();\n    });\n  }\n  /**\n   * Stop the currently active animation.\n   *\n   * @public\n   */\n\n\n  stop() {\n    if (this.animation) {\n      this.animation.stop();\n\n      if (this.events.animationCancel) {\n        this.events.animationCancel.notify();\n      }\n    }\n\n    this.clearAnimation();\n  }\n  /**\n   * Returns `true` if this value is currently animating.\n   *\n   * @public\n   */\n\n\n  isAnimating() {\n    return !!this.animation;\n  }\n\n  clearAnimation() {\n    delete this.animation;\n  }\n  /**\n   * Destroy and clean up subscribers to this `MotionValue`.\n   *\n   * The `MotionValue` hooks like `useMotionValue` and `useTransform` automatically\n   * handle the lifecycle of the returned `MotionValue`, so this method is only necessary if you've manually\n   * created a `MotionValue` via the `motionValue` function.\n   *\n   * @public\n   */\n\n\n  destroy() {\n    this.clearListeners();\n    this.stop();\n\n    if (this.stopPassiveEffect) {\n      this.stopPassiveEffect();\n    }\n  }\n\n}\n\nfunction motionValue(init, options) {\n  return new MotionValue(init, options);\n}\n\nexport { MotionValue, collectMotionValues, motionValue };","map":{"version":3,"names":["time","SubscriptionManager","velocityPerSecond","warnOnce","frame","MAX_VELOCITY_DELTA","isFloat","value","isNaN","parseFloat","collectMotionValues","current","undefined","MotionValue","constructor","init","options","version","canTrackVelocity","events","updateAndNotify","v","render","currentTime","now","updatedAt","setPrevFrameValue","prev","setCurrent","change","notify","renderRequest","hasAnimated","owner","prevFrameValue","prevUpdatedAt","onChange","subscription","process","env","NODE_ENV","on","eventName","callback","unsubscribe","add","read","getSize","stop","clearListeners","eventManagers","clear","attach","passiveEffect","stopPassiveEffect","set","setWithVelocity","delta","jump","endAnimation","get","push","getPrevious","getVelocity","Math","min","start","startAnimation","Promise","resolve","animation","animationStart","then","animationComplete","clearAnimation","animationCancel","isAnimating","destroy","motionValue"],"sources":["C:/Users/samih/OneDrive/Desktop/school/website/PERNWebsite/node_modules/framer-motion/dist/es/value/index.mjs"],"sourcesContent":["import { time } from '../frameloop/sync-time.mjs';\nimport { SubscriptionManager } from '../utils/subscription-manager.mjs';\nimport { velocityPerSecond } from '../utils/velocity-per-second.mjs';\nimport { warnOnce } from '../utils/warn-once.mjs';\nimport { frame } from '../frameloop/frame.mjs';\n\n/**\n * Maximum time between the value of two frames, beyond which we\n * assume the velocity has since been 0.\n */\nconst MAX_VELOCITY_DELTA = 30;\nconst isFloat = (value) => {\n    return !isNaN(parseFloat(value));\n};\nconst collectMotionValues = {\n    current: undefined,\n};\n/**\n * `MotionValue` is used to track the state and velocity of motion values.\n *\n * @public\n */\nclass MotionValue {\n    /**\n     * @param init - The initiating value\n     * @param config - Optional configuration options\n     *\n     * -  `transformer`: A function to transform incoming values with.\n     *\n     * @internal\n     */\n    constructor(init, options = {}) {\n        /**\n         * This will be replaced by the build step with the latest version number.\n         * When MotionValues are provided to motion components, warn if versions are mixed.\n         */\n        this.version = \"12.0.3\";\n        /**\n         * Tracks whether this value can output a velocity. Currently this is only true\n         * if the value is numerical, but we might be able to widen the scope here and support\n         * other value types.\n         *\n         * @internal\n         */\n        this.canTrackVelocity = null;\n        /**\n         * An object containing a SubscriptionManager for each active event.\n         */\n        this.events = {};\n        this.updateAndNotify = (v, render = true) => {\n            const currentTime = time.now();\n            /**\n             * If we're updating the value during another frame or eventloop\n             * than the previous frame, then the we set the previous frame value\n             * to current.\n             */\n            if (this.updatedAt !== currentTime) {\n                this.setPrevFrameValue();\n            }\n            this.prev = this.current;\n            this.setCurrent(v);\n            // Update update subscribers\n            if (this.current !== this.prev && this.events.change) {\n                this.events.change.notify(this.current);\n            }\n            // Update render subscribers\n            if (render && this.events.renderRequest) {\n                this.events.renderRequest.notify(this.current);\n            }\n        };\n        this.hasAnimated = false;\n        this.setCurrent(init);\n        this.owner = options.owner;\n    }\n    setCurrent(current) {\n        this.current = current;\n        this.updatedAt = time.now();\n        if (this.canTrackVelocity === null && current !== undefined) {\n            this.canTrackVelocity = isFloat(this.current);\n        }\n    }\n    setPrevFrameValue(prevFrameValue = this.current) {\n        this.prevFrameValue = prevFrameValue;\n        this.prevUpdatedAt = this.updatedAt;\n    }\n    /**\n     * Adds a function that will be notified when the `MotionValue` is updated.\n     *\n     * It returns a function that, when called, will cancel the subscription.\n     *\n     * When calling `onChange` inside a React component, it should be wrapped with the\n     * `useEffect` hook. As it returns an unsubscribe function, this should be returned\n     * from the `useEffect` function to ensure you don't add duplicate subscribers..\n     *\n     * ```jsx\n     * export const MyComponent = () => {\n     *   const x = useMotionValue(0)\n     *   const y = useMotionValue(0)\n     *   const opacity = useMotionValue(1)\n     *\n     *   useEffect(() => {\n     *     function updateOpacity() {\n     *       const maxXY = Math.max(x.get(), y.get())\n     *       const newOpacity = transform(maxXY, [0, 100], [1, 0])\n     *       opacity.set(newOpacity)\n     *     }\n     *\n     *     const unsubscribeX = x.on(\"change\", updateOpacity)\n     *     const unsubscribeY = y.on(\"change\", updateOpacity)\n     *\n     *     return () => {\n     *       unsubscribeX()\n     *       unsubscribeY()\n     *     }\n     *   }, [])\n     *\n     *   return <motion.div style={{ x }} />\n     * }\n     * ```\n     *\n     * @param subscriber - A function that receives the latest value.\n     * @returns A function that, when called, will cancel this subscription.\n     *\n     * @deprecated\n     */\n    onChange(subscription) {\n        if (process.env.NODE_ENV !== \"production\") {\n            warnOnce(false, `value.onChange(callback) is deprecated. Switch to value.on(\"change\", callback).`);\n        }\n        return this.on(\"change\", subscription);\n    }\n    on(eventName, callback) {\n        if (!this.events[eventName]) {\n            this.events[eventName] = new SubscriptionManager();\n        }\n        const unsubscribe = this.events[eventName].add(callback);\n        if (eventName === \"change\") {\n            return () => {\n                unsubscribe();\n                /**\n                 * If we have no more change listeners by the start\n                 * of the next frame, stop active animations.\n                 */\n                frame.read(() => {\n                    if (!this.events.change.getSize()) {\n                        this.stop();\n                    }\n                });\n            };\n        }\n        return unsubscribe;\n    }\n    clearListeners() {\n        for (const eventManagers in this.events) {\n            this.events[eventManagers].clear();\n        }\n    }\n    /**\n     * Attaches a passive effect to the `MotionValue`.\n     *\n     * @internal\n     */\n    attach(passiveEffect, stopPassiveEffect) {\n        this.passiveEffect = passiveEffect;\n        this.stopPassiveEffect = stopPassiveEffect;\n    }\n    /**\n     * Sets the state of the `MotionValue`.\n     *\n     * @remarks\n     *\n     * ```jsx\n     * const x = useMotionValue(0)\n     * x.set(10)\n     * ```\n     *\n     * @param latest - Latest value to set.\n     * @param render - Whether to notify render subscribers. Defaults to `true`\n     *\n     * @public\n     */\n    set(v, render = true) {\n        if (!render || !this.passiveEffect) {\n            this.updateAndNotify(v, render);\n        }\n        else {\n            this.passiveEffect(v, this.updateAndNotify);\n        }\n    }\n    setWithVelocity(prev, current, delta) {\n        this.set(current);\n        this.prev = undefined;\n        this.prevFrameValue = prev;\n        this.prevUpdatedAt = this.updatedAt - delta;\n    }\n    /**\n     * Set the state of the `MotionValue`, stopping any active animations,\n     * effects, and resets velocity to `0`.\n     */\n    jump(v, endAnimation = true) {\n        this.updateAndNotify(v);\n        this.prev = v;\n        this.prevUpdatedAt = this.prevFrameValue = undefined;\n        endAnimation && this.stop();\n        if (this.stopPassiveEffect)\n            this.stopPassiveEffect();\n    }\n    /**\n     * Returns the latest state of `MotionValue`\n     *\n     * @returns - The latest state of `MotionValue`\n     *\n     * @public\n     */\n    get() {\n        if (collectMotionValues.current) {\n            collectMotionValues.current.push(this);\n        }\n        return this.current;\n    }\n    /**\n     * @public\n     */\n    getPrevious() {\n        return this.prev;\n    }\n    /**\n     * Returns the latest velocity of `MotionValue`\n     *\n     * @returns - The latest velocity of `MotionValue`. Returns `0` if the state is non-numerical.\n     *\n     * @public\n     */\n    getVelocity() {\n        const currentTime = time.now();\n        if (!this.canTrackVelocity ||\n            this.prevFrameValue === undefined ||\n            currentTime - this.updatedAt > MAX_VELOCITY_DELTA) {\n            return 0;\n        }\n        const delta = Math.min(this.updatedAt - this.prevUpdatedAt, MAX_VELOCITY_DELTA);\n        // Casts because of parseFloat's poor typing\n        return velocityPerSecond(parseFloat(this.current) -\n            parseFloat(this.prevFrameValue), delta);\n    }\n    /**\n     * Registers a new animation to control this `MotionValue`. Only one\n     * animation can drive a `MotionValue` at one time.\n     *\n     * ```jsx\n     * value.start()\n     * ```\n     *\n     * @param animation - A function that starts the provided animation\n     *\n     * @internal\n     */\n    start(startAnimation) {\n        this.stop();\n        return new Promise((resolve) => {\n            this.hasAnimated = true;\n            this.animation = startAnimation(resolve);\n            if (this.events.animationStart) {\n                this.events.animationStart.notify();\n            }\n        }).then(() => {\n            if (this.events.animationComplete) {\n                this.events.animationComplete.notify();\n            }\n            this.clearAnimation();\n        });\n    }\n    /**\n     * Stop the currently active animation.\n     *\n     * @public\n     */\n    stop() {\n        if (this.animation) {\n            this.animation.stop();\n            if (this.events.animationCancel) {\n                this.events.animationCancel.notify();\n            }\n        }\n        this.clearAnimation();\n    }\n    /**\n     * Returns `true` if this value is currently animating.\n     *\n     * @public\n     */\n    isAnimating() {\n        return !!this.animation;\n    }\n    clearAnimation() {\n        delete this.animation;\n    }\n    /**\n     * Destroy and clean up subscribers to this `MotionValue`.\n     *\n     * The `MotionValue` hooks like `useMotionValue` and `useTransform` automatically\n     * handle the lifecycle of the returned `MotionValue`, so this method is only necessary if you've manually\n     * created a `MotionValue` via the `motionValue` function.\n     *\n     * @public\n     */\n    destroy() {\n        this.clearListeners();\n        this.stop();\n        if (this.stopPassiveEffect) {\n            this.stopPassiveEffect();\n        }\n    }\n}\nfunction motionValue(init, options) {\n    return new MotionValue(init, options);\n}\n\nexport { MotionValue, collectMotionValues, motionValue };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}